
GPIO_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003bf8  08003bf8  00013bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  08003c08  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a8  20000010  08003c14  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003b8  08003c14  000203b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013de4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000274b  00000000  00000000  00033e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001420  00000000  00000000  00036570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001348  00000000  00000000  00037990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00020fd1  00000000  00000000  00038cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011633  00000000  00000000  00059ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d4c6d  00000000  00000000  0006b2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0013ff49  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000543c  00000000  00000000  0013ff9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08003aec 	.word	0x08003aec

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08003aec 	.word	0x08003aec

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468e      	mov	lr, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14d      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4694      	mov	ip, r2
 80001be:	d969      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b152      	cbz	r2, 80001dc <__udivmoddi4+0x30>
 80001c6:	fa01 f302 	lsl.w	r3, r1, r2
 80001ca:	f1c2 0120 	rsb	r1, r2, #32
 80001ce:	fa20 f101 	lsr.w	r1, r0, r1
 80001d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d6:	ea41 0e03 	orr.w	lr, r1, r3
 80001da:	4094      	lsls	r4, r2
 80001dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e0:	0c21      	lsrs	r1, r4, #16
 80001e2:	fbbe f6f8 	udiv	r6, lr, r8
 80001e6:	fa1f f78c 	uxth.w	r7, ip
 80001ea:	fb08 e316 	mls	r3, r8, r6, lr
 80001ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f2:	fb06 f107 	mul.w	r1, r6, r7
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000202:	f080 811f 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 811c 	bls.w	8000444 <__udivmoddi4+0x298>
 800020c:	3e02      	subs	r6, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f8 	udiv	r0, r3, r8
 8000218:	fb08 3310 	mls	r3, r8, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x92>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 810a 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8107 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000242:	1be4      	subs	r4, r4, r7
 8000244:	2600      	movs	r6, #0
 8000246:	b11d      	cbz	r5, 8000250 <__udivmoddi4+0xa4>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c5 4300 	strd	r4, r3, [r5]
 8000250:	4631      	mov	r1, r6
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xc2>
 800025a:	2d00      	cmp	r5, #0
 800025c:	f000 80ef 	beq.w	800043e <__udivmoddi4+0x292>
 8000260:	2600      	movs	r6, #0
 8000262:	e9c5 0100 	strd	r0, r1, [r5]
 8000266:	4630      	mov	r0, r6
 8000268:	4631      	mov	r1, r6
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f683 	clz	r6, r3
 8000272:	2e00      	cmp	r6, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80f9 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	469e      	mov	lr, r3
 800028a:	2d00      	cmp	r5, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa4>
 800028e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa4>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8092 	bne.w	80003c6 <__udivmoddi4+0x21a>
 80002a2:	eba1 010c 	sub.w	r1, r1, ip
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f fe8c 	uxth.w	lr, ip
 80002ae:	2601      	movs	r6, #1
 80002b0:	0c20      	lsrs	r0, r4, #16
 80002b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80002b6:	fb07 1113 	mls	r1, r7, r3, r1
 80002ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	4288      	cmp	r0, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0101 	adds.w	r1, ip, r1
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	4288      	cmp	r0, r1
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2c0>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a09      	subs	r1, r1, r0
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e0:	fb07 1110 	mls	r1, r7, r0, r1
 80002e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002e8:	fb0e fe00 	mul.w	lr, lr, r0
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80bb 	bhi.w	8000476 <__udivmoddi4+0x2ca>
 8000300:	4608      	mov	r0, r1
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79c      	b.n	8000246 <__udivmoddi4+0x9a>
 800030c:	f1c6 0720 	rsb	r7, r6, #32
 8000310:	40b3      	lsls	r3, r6
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa20 f407 	lsr.w	r4, r0, r7
 800031e:	fa01 f306 	lsl.w	r3, r1, r6
 8000322:	431c      	orrs	r4, r3
 8000324:	40f9      	lsrs	r1, r7
 8000326:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032a:	fa00 f306 	lsl.w	r3, r0, r6
 800032e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000332:	0c20      	lsrs	r0, r4, #16
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	fb09 1118 	mls	r1, r9, r8, r1
 800033c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000340:	fb08 f00e 	mul.w	r0, r8, lr
 8000344:	4288      	cmp	r0, r1
 8000346:	fa02 f206 	lsl.w	r2, r2, r6
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0101 	adds.w	r1, ip, r1
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	4288      	cmp	r0, r1
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4461      	add	r1, ip
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f9 	udiv	r0, r1, r9
 800036c:	fb09 1110 	mls	r1, r9, r0, r1
 8000370:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000374:	fb00 fe0e 	mul.w	lr, r0, lr
 8000378:	458e      	cmp	lr, r1
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0101 	adds.w	r1, ip, r1
 8000380:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	458e      	cmp	lr, r1
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4461      	add	r1, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9402 	umull	r9, r4, r0, r2
 8000396:	eba1 010e 	sub.w	r1, r1, lr
 800039a:	42a1      	cmp	r1, r4
 800039c:	46c8      	mov	r8, r9
 800039e:	46a6      	mov	lr, r4
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	b15d      	cbz	r5, 80003be <__udivmoddi4+0x212>
 80003a6:	ebb3 0208 	subs.w	r2, r3, r8
 80003aa:	eb61 010e 	sbc.w	r1, r1, lr
 80003ae:	fa01 f707 	lsl.w	r7, r1, r7
 80003b2:	fa22 f306 	lsr.w	r3, r2, r6
 80003b6:	40f1      	lsrs	r1, r6
 80003b8:	431f      	orrs	r7, r3
 80003ba:	e9c5 7100 	strd	r7, r1, [r5]
 80003be:	2600      	movs	r6, #0
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c2 0320 	rsb	r3, r2, #32
 80003ca:	40d8      	lsrs	r0, r3
 80003cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d0:	fa21 f303 	lsr.w	r3, r1, r3
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4301      	orrs	r1, r0
 80003d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e4:	fb07 3610 	mls	r6, r7, r0, r3
 80003e8:	0c0b      	lsrs	r3, r1, #16
 80003ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003ee:	fb00 f60e 	mul.w	r6, r0, lr
 80003f2:	429e      	cmp	r6, r3
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	429e      	cmp	r6, r3
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3802      	subs	r0, #2
 800040a:	4463      	add	r3, ip
 800040c:	1b9b      	subs	r3, r3, r6
 800040e:	b289      	uxth	r1, r1
 8000410:	fbb3 f6f7 	udiv	r6, r3, r7
 8000414:	fb07 3316 	mls	r3, r7, r6, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb06 f30e 	mul.w	r3, r6, lr
 8000420:	428b      	cmp	r3, r1
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0101 	adds.w	r1, ip, r1
 8000428:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	428b      	cmp	r3, r1
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3e02      	subs	r6, #2
 8000434:	4461      	add	r1, ip
 8000436:	1ac9      	subs	r1, r1, r3
 8000438:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e705      	b.n	8000250 <__udivmoddi4+0xa4>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e3      	b.n	8000210 <__udivmoddi4+0x64>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f8      	b.n	800023e <__udivmoddi4+0x92>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4646      	mov	r6, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4620      	mov	r0, r4
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4640      	mov	r0, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	3b02      	subs	r3, #2
 800046e:	4461      	add	r1, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000472:	4630      	mov	r0, r6
 8000474:	e709      	b.n	800028a <__udivmoddi4+0xde>
 8000476:	4464      	add	r4, ip
 8000478:	3802      	subs	r0, #2
 800047a:	e742      	b.n	8000302 <__udivmoddi4+0x156>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000490:	f023 0218 	bic.w	r2, r3, #24
 8000494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d0:	68fb      	ldr	r3, [r7, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fb3e 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f842 	bl	8000570 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004ec:	f000 f8b6 	bl	800065c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f948 	bl	8000784 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f8d0 	bl	8000698 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004f8:	f000 f91c 	bl	8000734 <MX_USB_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2120      	movs	r1, #32
 8000500:	481a      	ldr	r0, [pc, #104]	; (800056c <main+0x8c>)
 8000502:	f000 fe2d 	bl	8001160 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050a:	f000 fbb1 	bl	8000c70 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,0);
 800050e:	2200      	movs	r2, #0
 8000510:	2120      	movs	r1, #32
 8000512:	4816      	ldr	r0, [pc, #88]	; (800056c <main+0x8c>)
 8000514:	f000 fe24 	bl	8001160 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000518:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800051c:	f000 fba8 	bl	8000c70 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1);
 8000520:	2201      	movs	r2, #1
 8000522:	2101      	movs	r1, #1
 8000524:	4811      	ldr	r0, [pc, #68]	; (800056c <main+0x8c>)
 8000526:	f000 fe1b 	bl	8001160 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800052a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800052e:	f000 fb9f 	bl	8000c70 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 8000532:	2200      	movs	r2, #0
 8000534:	2101      	movs	r1, #1
 8000536:	480d      	ldr	r0, [pc, #52]	; (800056c <main+0x8c>)
 8000538:	f000 fe12 	bl	8001160 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800053c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000540:	f000 fb96 	bl	8000c70 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,1);
 8000544:	2201      	movs	r2, #1
 8000546:	2102      	movs	r1, #2
 8000548:	4808      	ldr	r0, [pc, #32]	; (800056c <main+0x8c>)
 800054a:	f000 fe09 	bl	8001160 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800054e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000552:	f000 fb8d 	bl	8000c70 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,0);
 8000556:	2200      	movs	r2, #0
 8000558:	2102      	movs	r1, #2
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <main+0x8c>)
 800055c:	f000 fe00 	bl	8001160 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000564:	f000 fb84 	bl	8000c70 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,1);
 8000568:	e7c8      	b.n	80004fc <main+0x1c>
 800056a:	bf00      	nop
 800056c:	48000400 	.word	0x48000400

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b09a      	sub	sp, #104	; 0x68
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2248      	movs	r2, #72	; 0x48
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 faac 	bl	8003adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005a4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80005a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	f023 0303 	bic.w	r3, r3, #3
 80005b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ba:	f000 feff 	bl	80013bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff ff5e 	bl	8000480 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <SystemClock_Config+0xe8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005cc:	4a22      	ldr	r2, [pc, #136]	; (8000658 <SystemClock_Config+0xe8>)
 80005ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <SystemClock_Config+0xe8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80005e0:	2327      	movs	r3, #39	; 0x27
 80005e2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ea:	2301      	movs	r3, #1
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2340      	movs	r3, #64	; 0x40
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005fc:	2300      	movs	r3, #0
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000600:	2360      	movs	r3, #96	; 0x60
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fa69 	bl	8001ae4 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000618:	f000 f8fc 	bl	8000814 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800061c:	236f      	movs	r3, #111	; 0x6f
 800061e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000620:	2302      	movs	r3, #2
 8000622:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2101      	movs	r1, #1
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fdc5 	bl	80021cc <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000648:	f000 f8e4 	bl	8000814 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800064c:	f002 fb80 	bl	8002d50 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000650:	bf00      	nop
 8000652:	3768      	adds	r7, #104	; 0x68
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	58000400 	.word	0x58000400

0800065c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000662:	463b      	mov	r3, r7
 8000664:	2250      	movs	r2, #80	; 0x50
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fa37 	bl	8003adc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800066e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000672:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000678:	2300      	movs	r3, #0
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f9f0 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800068a:	f000 f8c3 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800068e:	bf00      	nop
 8000690:	3750      	adds	r7, #80	; 0x50
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <MX_USART1_UART_Init+0x94>)
 800069e:	4a24      	ldr	r2, [pc, #144]	; (8000730 <MX_USART1_UART_Init+0x98>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006b0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006c0:	220c      	movs	r2, #12
 80006c2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e2:	4812      	ldr	r0, [pc, #72]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006e4:	f002 fc6b 	bl	8002fbe <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80006ee:	f000 f891 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f2:	2100      	movs	r1, #0
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_USART1_UART_Init+0x94>)
 80006f6:	f003 f8c7 	bl	8003888 <HAL_UARTEx_SetTxFifoThreshold>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000700:	f000 f888 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <MX_USART1_UART_Init+0x94>)
 8000708:	f003 f8fc 	bl	8003904 <HAL_UARTEx_SetRxFifoThreshold>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000712:	f000 f87f 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART1_UART_Init+0x94>)
 8000718:	f003 f87d 	bl	8003816 <HAL_UARTEx_DisableFifoMode>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000722:	f000 f877 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000002c 	.word	0x2000002c
 8000730:	40013800 	.word	0x40013800

08000734 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_USB_PCD_Init+0x48>)
 800073a:	4a11      	ldr	r2, [pc, #68]	; (8000780 <MX_USB_PCD_Init+0x4c>)
 800073c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_USB_PCD_Init+0x48>)
 8000740:	2208      	movs	r2, #8
 8000742:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_USB_PCD_Init+0x48>)
 8000746:	2202      	movs	r2, #2
 8000748:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USB_PCD_Init+0x48>)
 800074c:	2202      	movs	r2, #2
 800074e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_USB_PCD_Init+0x48>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USB_PCD_Init+0x48>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_USB_PCD_Init+0x48>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USB_PCD_Init+0x48>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_USB_PCD_Init+0x48>)
 800076a:	f000 fd11 	bl	8001190 <HAL_PCD_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000774:	f000 f84e 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000bc 	.word	0x200000bc
 8000780:	40006800 	.word	0x40006800

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000798:	2004      	movs	r0, #4
 800079a:	f7ff fe87 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2002      	movs	r0, #2
 80007a0:	f7ff fe84 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff fe81 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	2008      	movs	r0, #8
 80007ac:	f7ff fe7e 	bl	80004ac <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2123      	movs	r1, #35	; 0x23
 80007b4:	4814      	ldr	r0, [pc, #80]	; (8000808 <MX_GPIO_Init+0x84>)
 80007b6:	f000 fcd3 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ba:	2310      	movs	r3, #16
 80007bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4810      	ldr	r0, [pc, #64]	; (800080c <MX_GPIO_Init+0x88>)
 80007cc:	f000 fb58 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80007d0:	2323      	movs	r3, #35	; 0x23
 80007d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <MX_GPIO_Init+0x84>)
 80007e6:	f000 fb4b 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80007ea:	2303      	movs	r3, #3
 80007ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_GPIO_Init+0x8c>)
 80007fc:	f000 fb40 	bl	8000e80 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	48000400 	.word	0x48000400
 800080c:	48000800 	.word	0x48000800
 8000810:	48000c00 	.word	0x48000c00

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>

0800081e <LL_AHB2_GRP1_EnableClock>:
{
 800081e:	b480      	push	{r7}
 8000820:	b085      	sub	sp, #20
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800082c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4313      	orrs	r3, r2
 8000834:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800083a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4013      	ands	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800085c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800085e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4313      	orrs	r3, r2
 8000866:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4013      	ands	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000874:	68fb      	ldr	r3, [r7, #12]
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4313      	orrs	r3, r2
 8000898:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b09c      	sub	sp, #112	; 0x70
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2250      	movs	r2, #80	; 0x50
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 f8f9 	bl	8003adc <memset>
  if(huart->Instance==USART1)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a16      	ldr	r2, [pc, #88]	; (8000948 <HAL_UART_MspInit+0x84>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d124      	bne.n	800093e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4618      	mov	r0, r3
 8000902:	f002 f8af 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800090c:	f7ff ff82 	bl	8000814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000910:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000914:	f7ff ffb5 	bl	8000882 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	2002      	movs	r0, #2
 800091a:	f7ff ff80 	bl	800081e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800091e:	23c0      	movs	r3, #192	; 0xc0
 8000920:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000926:	2301      	movs	r3, #1
 8000928:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800092e:	2307      	movs	r3, #7
 8000930:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000936:	4619      	mov	r1, r3
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <HAL_UART_MspInit+0x88>)
 800093a:	f000 faa1 	bl	8000e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3770      	adds	r7, #112	; 0x70
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40013800 	.word	0x40013800
 800094c:	48000400 	.word	0x48000400

08000950 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b09c      	sub	sp, #112	; 0x70
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2250      	movs	r2, #80	; 0x50
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f003 f8b3 	bl	8003adc <memset>
  if(hpcd->Instance==USB)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <HAL_PCD_MspInit+0xa8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d136      	bne.n	80009ee <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000984:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000986:	2318      	movs	r3, #24
 8000988:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800098a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800098e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000994:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000996:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800099a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800099c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009a0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80009a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80009a6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 f859 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80009b8:	f7ff ff2c 	bl	8000814 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff ff2e 	bl	800081e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80009d4:	230a      	movs	r3, #10
 80009d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fa4d 	bl	8000e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80009e6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80009ea:	f7ff ff31 	bl	8000850 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3770      	adds	r7, #112	; 0x70
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40006800 	.word	0x40006800

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f8e6 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <SystemInit+0x98>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <SystemInit+0x98>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a78:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a7c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <SystemInit+0x9c>)
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a9a:	f023 0305 	bic.w	r3, r3, #5
 8000a9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000aae:	f023 0301 	bic.w	r3, r3, #1
 8000ab2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aba:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <SystemInit+0xa0>)
 8000abc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <SystemInit+0xa0>)
 8000ac4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	faf6fefb 	.word	0xfaf6fefb
 8000af0:	22041000 	.word	0x22041000

08000af4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000af4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af8:	3304      	adds	r3, #4

08000afa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000afe:	d3f9      	bcc.n	8000af4 <CopyDataInit>
  bx lr
 8000b00:	4770      	bx	lr

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000b02:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000b04:	3004      	adds	r0, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000b06:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>
  bx lr
 8000b0a:	4770      	bx	lr

08000b0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000b0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b10:	f7ff ff9e 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <LoopForever+0x8>)
 8000b16:	490c      	ldr	r1, [pc, #48]	; (8000b48 <LoopForever+0xc>)
 8000b18:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <LoopForever+0x10>)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f7ff ffed 	bl	8000afa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <LoopForever+0x14>)
 8000b22:	490c      	ldr	r1, [pc, #48]	; (8000b54 <LoopForever+0x18>)
 8000b24:	2300      	movs	r3, #0
 8000b26:	f7ff ffee 	bl	8000b06 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <LoopForever+0x1c>)
 8000b2c:	490b      	ldr	r1, [pc, #44]	; (8000b5c <LoopForever+0x20>)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f7ff ffe9 	bl	8000b06 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b34:	f002 ffae 	bl	8003a94 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000b38:	f7ff fcd2 	bl	80004e0 <main>

08000b3c <LoopForever>:

LoopForever:
  b LoopForever
 8000b3c:	e7fe      	b.n	8000b3c <LoopForever>
 8000b3e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000b40:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000b44:	20000004 	.word	0x20000004
 8000b48:	20000010 	.word	0x20000010
 8000b4c:	08003c08 	.word	0x08003c08
  INIT_BSS _sbss, _ebss
 8000b50:	20000010 	.word	0x20000010
 8000b54:	200003b8 	.word	0x200003b8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000b58:	20030000 	.word	0x20030000
 8000b5c:	20030000 	.word	0x20030000

08000b60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_Init+0x3c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <HAL_Init+0x3c>)
 8000b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f000 f94e 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 f80f 	bl	8000ba4 <HAL_InitTick>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	e001      	b.n	8000b96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b92:	f7ff fe8f 	bl	80008b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b96:	79fb      	ldrb	r3, [r7, #7]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58004000 	.word	0x58004000

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_InitTick+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d024      	beq.n	8000c02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb8:	f001 fcb4 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_InitTick+0x6c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f948 	bl	8000e66 <HAL_SYSTICK_Config>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10f      	bne.n	8000bfc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d809      	bhi.n	8000bf6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be2:	2200      	movs	r2, #0
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bea:	f000 f922 	bl	8000e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <HAL_InitTick+0x70>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	e007      	b.n	8000c06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	e004      	b.n	8000c06 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	e001      	b.n	8000c06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000000c 	.word	0x2000000c
 8000c14:	20000008 	.word	0x20000008

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	2000000c 	.word	0x2000000c
 8000c3c:	200003b4 	.word	0x200003b4

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	200003b4 	.word	0x200003b4

08000c58 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTickPrio+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffe2 	bl	8000c40 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Delay+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffd2 	bl	8000c40 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
    {
    }
  }
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000000c 	.word	0x2000000c

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	; (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	; 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dfc:	f7ff ff8e 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff47 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff5e 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff90 	bl	8000d70 <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5f 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffb2 	bl	8000dd8 <SysTick_Config>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8e:	e14c      	b.n	800112a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2101      	movs	r1, #1
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 813e 	beq.w	8001124 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d005      	beq.n	8000ec0 <HAL_GPIO_Init+0x40>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d130      	bne.n	8000f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	f003 0201 	and.w	r2, r3, #1
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d017      	beq.n	8000f5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d123      	bne.n	8000fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	6939      	ldr	r1, [r7, #16]
 8000fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0203 	and.w	r2, r3, #3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 8098 	beq.w	8001124 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ff4:	4a54      	ldr	r2, [pc, #336]	; (8001148 <HAL_GPIO_Init+0x2c8>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800101e:	d019      	beq.n	8001054 <HAL_GPIO_Init+0x1d4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a4a      	ldr	r2, [pc, #296]	; (800114c <HAL_GPIO_Init+0x2cc>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d013      	beq.n	8001050 <HAL_GPIO_Init+0x1d0>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d00d      	beq.n	800104c <HAL_GPIO_Init+0x1cc>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a48      	ldr	r2, [pc, #288]	; (8001154 <HAL_GPIO_Init+0x2d4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d007      	beq.n	8001048 <HAL_GPIO_Init+0x1c8>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a47      	ldr	r2, [pc, #284]	; (8001158 <HAL_GPIO_Init+0x2d8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d101      	bne.n	8001044 <HAL_GPIO_Init+0x1c4>
 8001040:	2304      	movs	r3, #4
 8001042:	e008      	b.n	8001056 <HAL_GPIO_Init+0x1d6>
 8001044:	2307      	movs	r3, #7
 8001046:	e006      	b.n	8001056 <HAL_GPIO_Init+0x1d6>
 8001048:	2303      	movs	r3, #3
 800104a:	e004      	b.n	8001056 <HAL_GPIO_Init+0x1d6>
 800104c:	2302      	movs	r3, #2
 800104e:	e002      	b.n	8001056 <HAL_GPIO_Init+0x1d6>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <HAL_GPIO_Init+0x1d6>
 8001054:	2300      	movs	r3, #0
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	f002 0203 	and.w	r2, r2, #3
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	4093      	lsls	r3, r2
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001066:	4938      	ldr	r1, [pc, #224]	; (8001148 <HAL_GPIO_Init+0x2c8>)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001074:	4b39      	ldr	r3, [pc, #228]	; (800115c <HAL_GPIO_Init+0x2dc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001098:	4a30      	ldr	r2, [pc, #192]	; (800115c <HAL_GPIO_Init+0x2dc>)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <HAL_GPIO_Init+0x2dc>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010c2:	4a26      	ldr	r2, [pc, #152]	; (800115c <HAL_GPIO_Init+0x2dc>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_GPIO_Init+0x2dc>)
 80010ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ee:	4a1b      	ldr	r2, [pc, #108]	; (800115c <HAL_GPIO_Init+0x2dc>)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_GPIO_Init+0x2dc>)
 80010f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800111c:	4a0f      	ldr	r2, [pc, #60]	; (800115c <HAL_GPIO_Init+0x2dc>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	f47f aeab 	bne.w	8000e90 <HAL_GPIO_Init+0x10>
  }
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40010000 	.word	0x40010000
 800114c:	48000400 	.word	0x48000400
 8001150:	48000800 	.word	0x48000800
 8001154:	48000c00 	.word	0x48000c00
 8001158:	48001000 	.word	0x48001000
 800115c:	58000800 	.word	0x58000800

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800117c:	e002      	b.n	8001184 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	b08b      	sub	sp, #44	; 0x2c
 8001194:	af06      	add	r7, sp, #24
 8001196:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e0dd      	b.n	800135e <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fbca 	bl	8000950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2203      	movs	r2, #3
 80011c0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 fc24 	bl	8003a1c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e04d      	b.n	8001276 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	440b      	add	r3, r1
 80011ea:	3305      	adds	r3, #5
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	440b      	add	r3, r1
 8001200:	3304      	adds	r3, #4
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	b298      	uxth	r0, r3
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	333a      	adds	r3, #58	; 0x3a
 800121a:	4602      	mov	r2, r0
 800121c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	3307      	adds	r3, #7
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	440b      	add	r3, r1
 8001242:	333c      	adds	r3, #60	; 0x3c
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	440b      	add	r3, r1
 8001256:	3340      	adds	r3, #64	; 0x40
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	440b      	add	r3, r1
 800126a:	3344      	adds	r3, #68	; 0x44
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	3301      	adds	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d3ac      	bcc.n	80011da <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	e044      	b.n	8001310 <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	440b      	add	r3, r1
 80012aa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	f203 136f 	addw	r3, r3, #367	; 0x16f
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	440b      	add	r3, r1
 80012ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3301      	adds	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	d3b5      	bcc.n	8001286 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	687e      	ldr	r6, [r7, #4]
 8001322:	466d      	mov	r5, sp
 8001324:	f106 0410 	add.w	r4, r6, #16
 8001328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800132c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001330:	e885 0003 	stmia.w	r5, {r0, r1}
 8001334:	1d33      	adds	r3, r6, #4
 8001336:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001338:	6838      	ldr	r0, [r7, #0]
 800133a:	f002 fb8a 	bl	8003a52 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d102      	bne.n	800135c <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f805 	bl	8001366 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001366 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001366:	b480      	push	{r7}
 8001368:	b085      	sub	sp, #20
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800138a:	b29b      	uxth	r3, r3
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	b29a      	uxth	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800139e:	b29b      	uxth	r3, r3
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	58000400 	.word	0x58000400

080013dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	58000400 	.word	0x58000400

080013f8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800140a:	d101      	bne.n	8001410 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_RCC_HSE_Enable>:
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800142a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_RCC_HSE_Disable>:
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800143e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144c:	6013      	str	r3, [r2, #0]
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_RCC_HSE_IsReady>:
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800145c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800146a:	d101      	bne.n	8001470 <LL_RCC_HSE_IsReady+0x18>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <LL_RCC_HSE_IsReady+0x1a>
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_RCC_HSI_Enable>:
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800148a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_RCC_HSI_Disable>:
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ac:	6013      	str	r3, [r2, #0]
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_RCC_HSI_IsReady>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ca:	d101      	bne.n	80014d0 <LL_RCC_HSI_IsReady+0x18>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <LL_RCC_HSI_IsReady+0x1a>
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_RCC_HSI_SetCalibTrimming>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80014e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_RCC_HSI48_Enable>:
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_RCC_HSI48_Disable>:
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <LL_RCC_HSI48_IsReady>:
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001552:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b02      	cmp	r3, #2
 800155c:	d101      	bne.n	8001562 <LL_RCC_HSI48_IsReady+0x18>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <LL_RCC_HSI48_IsReady+0x1a>
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_RCC_LSE_Enable>:
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_RCC_LSE_Disable>:
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_RCC_LSE_EnableBypass>:
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80015b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_RCC_LSE_DisableBypass>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80015d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b02      	cmp	r3, #2
 8001608:	d101      	bne.n	800160e <LL_RCC_LSE_IsReady+0x18>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <LL_RCC_LSE_IsReady+0x1a>
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b02      	cmp	r3, #2
 8001670:	d101      	bne.n	8001676 <LL_RCC_LSI1_IsReady+0x18>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <LL_RCC_LSI1_IsReady+0x1a>
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80016a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b4:	f023 0304 	bic.w	r3, r3, #4
 80016b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d101      	bne.n	80016de <LL_RCC_LSI2_IsReady+0x18>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <LL_RCC_LSI2_IsReady+0x1a>
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80016f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001706:	4313      	orrs	r3, r2
 8001708:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800173a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6013      	str	r3, [r2, #0]
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b02      	cmp	r3, #2
 8001764:	d101      	bne.n	800176a <LL_RCC_MSI_IsReady+0x16>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_RCC_MSI_IsReady+0x18>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800177e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80017a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2bb0      	cmp	r3, #176	; 0xb0
 80017b4:	d901      	bls.n	80017ba <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80017b6:	23b0      	movs	r3, #176	; 0xb0
 80017b8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80017ba:	687b      	ldr	r3, [r7, #4]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f023 0203 	bic.w	r2, r3, #3
 8001804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800181e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800186a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4313      	orrs	r3, r2
 8001876:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001892:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001896:	f023 020f 	bic.w	r2, r3, #15
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80018bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001994:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001998:	6013      	str	r3, [r2, #0]
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019b6:	d101      	bne.n	80019bc <LL_RCC_PLL_IsReady+0x18>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <LL_RCC_PLL_IsReady+0x1a>
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3c:	d101      	bne.n	8001a42 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a62:	d101      	bne.n	8001a68 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d101      	bne.n	8001a8e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001aac:	d101      	bne.n	8001ab2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001acc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ad0:	d101      	bne.n	8001ad6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b08d      	sub	sp, #52	; 0x34
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e363      	b.n	80021be <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 808d 	beq.w	8001c1e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b04:	f7ff fe89 	bl	800181a <LL_RCC_GetSysClkSource>
 8001b08:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0a:	f7ff ff82 	bl	8001a12 <LL_RCC_PLL_GetMainSource>
 8001b0e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_RCC_OscConfig+0x3e>
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	d147      	bne.n	8001bac <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d144      	bne.n	8001bac <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e347      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001b32:	f7ff fe34 	bl	800179e <LL_RCC_MSI_GetRange>
 8001b36:	4603      	mov	r3, r0
 8001b38:	429c      	cmp	r4, r3
 8001b3a:	d914      	bls.n	8001b66 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fd2f 	bl	80025a4 <RCC_SetFlashLatencyFromMSIRange>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e336      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fe0e 	bl	8001776 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fe32 	bl	80017c8 <LL_RCC_MSI_SetCalibTrimming>
 8001b64:	e013      	b.n	8001b8e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fe03 	bl	8001776 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe27 	bl	80017c8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fd10 	bl	80025a4 <RCC_SetFlashLatencyFromMSIRange>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e317      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b8e:	f000 fcc9 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4aa4      	ldr	r2, [pc, #656]	; (8001e28 <HAL_RCC_OscConfig+0x344>)
 8001b96:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b98:	4ba4      	ldr	r3, [pc, #656]	; (8001e2c <HAL_RCC_OscConfig+0x348>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f801 	bl	8000ba4 <HAL_InitTick>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d039      	beq.n	8001c1c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e308      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01e      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bb4:	f7ff fdb0 	bl	8001718 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f842 	bl	8000c40 <HAL_GetTick>
 8001bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bc0:	f7ff f83e 	bl	8000c40 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e2f5      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001bd2:	f7ff fdbf 	bl	8001754 <LL_RCC_MSI_IsReady>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f1      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fdc8 	bl	8001776 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fdec 	bl	80017c8 <LL_RCC_MSI_SetCalibTrimming>
 8001bf0:	e015      	b.n	8001c1e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bf2:	f7ff fda0 	bl	8001736 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f823 	bl	8000c40 <HAL_GetTick>
 8001bfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f81f 	bl	8000c40 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e2d6      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c10:	f7ff fda0 	bl	8001754 <LL_RCC_MSI_IsReady>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f1      	bne.n	8001bfe <HAL_RCC_OscConfig+0x11a>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c1c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d047      	beq.n	8001cba <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2a:	f7ff fdf6 	bl	800181a <LL_RCC_GetSysClkSource>
 8001c2e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c30:	f7ff feef 	bl	8001a12 <LL_RCC_PLL_GetMainSource>
 8001c34:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x164>
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	d108      	bne.n	8001c54 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d105      	bne.n	8001c54 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d134      	bne.n	8001cba <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e2b4      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d102      	bne.n	8001c64 <HAL_RCC_OscConfig+0x180>
 8001c5e:	f7ff fbdd 	bl	800141c <LL_RCC_HSE_Enable>
 8001c62:	e001      	b.n	8001c68 <HAL_RCC_OscConfig+0x184>
 8001c64:	f7ff fbe9 	bl	800143a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d012      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7fe ffe6 	bl	8000c40 <HAL_GetTick>
 8001c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7fe ffe2 	bl	8000c40 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e299      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c8a:	f7ff fbe5 	bl	8001458 <LL_RCC_HSE_IsReady>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f1      	beq.n	8001c78 <HAL_RCC_OscConfig+0x194>
 8001c94:	e011      	b.n	8001cba <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7fe ffd3 	bl	8000c40 <HAL_GetTick>
 8001c9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9e:	f7fe ffcf 	bl	8000c40 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b64      	cmp	r3, #100	; 0x64
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e286      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001cb0:	f7ff fbd2 	bl	8001458 <LL_RCC_HSE_IsReady>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f1      	bne.n	8001c9e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d04c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc6:	f7ff fda8 	bl	800181a <LL_RCC_GetSysClkSource>
 8001cca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ccc:	f7ff fea1 	bl	8001a12 <LL_RCC_PLL_GetMainSource>
 8001cd0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x200>
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b0c      	cmp	r3, #12
 8001cdc:	d10e      	bne.n	8001cfc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d10b      	bne.n	8001cfc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e266      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fbf1 	bl	80014dc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001cfa:	e031      	b.n	8001d60 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d019      	beq.n	8001d38 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d04:	f7ff fbba 	bl	800147c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7fe ff9a 	bl	8000c40 <HAL_GetTick>
 8001d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d10:	f7fe ff96 	bl	8000c40 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e24d      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d22:	f7ff fbc9 	bl	80014b8 <LL_RCC_HSI_IsReady>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f1      	beq.n	8001d10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fbd3 	bl	80014dc <LL_RCC_HSI_SetCalibTrimming>
 8001d36:	e013      	b.n	8001d60 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d38:	f7ff fbaf 	bl	800149a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7fe ff80 	bl	8000c40 <HAL_GetTick>
 8001d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d44:	f7fe ff7c 	bl	8000c40 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e233      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d56:	f7ff fbaf 	bl	80014b8 <LL_RCC_HSI_IsReady>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f1      	bne.n	8001d44 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a3 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d076      	beq.n	8001e70 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d046      	beq.n	8001e1c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001d8e:	f7ff fc66 	bl	800165e <LL_RCC_LSI1_IsReady>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d113      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001d98:	f7ff fc3f 	bl	800161a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d9c:	f7fe ff50 	bl	8000c40 <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001da4:	f7fe ff4c 	bl	8000c40 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e203      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001db6:	f7ff fc52 	bl	800165e <LL_RCC_LSI1_IsReady>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f1      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001dc0:	f7ff fc5f 	bl	8001682 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7fe ff3c 	bl	8000c40 <HAL_GetTick>
 8001dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001dcc:	f7fe ff38 	bl	8000c40 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1ef      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001dde:	f7ff fc72 	bl	80016c6 <LL_RCC_LSI2_IsReady>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f1      	beq.n	8001dcc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fc7c 	bl	80016ea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001df2:	f7ff fc23 	bl	800163c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7fe ff23 	bl	8000c40 <HAL_GetTick>
 8001dfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001dfe:	f7fe ff1f 	bl	8000c40 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e1d6      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001e10:	f7ff fc25 	bl	800165e <LL_RCC_LSI1_IsReady>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f1      	bne.n	8001dfe <HAL_RCC_OscConfig+0x31a>
 8001e1a:	e051      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001e1c:	f7ff fbfd 	bl	800161a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7fe ff0e 	bl	8000c40 <HAL_GetTick>
 8001e24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001e26:	e00c      	b.n	8001e42 <HAL_RCC_OscConfig+0x35e>
 8001e28:	20000004 	.word	0x20000004
 8001e2c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e30:	f7fe ff06 	bl	8000c40 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e1bd      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001e42:	f7ff fc0c 	bl	800165e <LL_RCC_LSI1_IsReady>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f1      	beq.n	8001e30 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001e4c:	f7ff fc2a 	bl	80016a4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001e52:	f7fe fef5 	bl	8000c40 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e1ac      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001e64:	f7ff fc2f 	bl	80016c6 <LL_RCC_LSI2_IsReady>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f1      	bne.n	8001e52 <HAL_RCC_OscConfig+0x36e>
 8001e6e:	e027      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001e70:	f7ff fc18 	bl	80016a4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7fe fee4 	bl	8000c40 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001e7c:	f7fe fee0 	bl	8000c40 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e197      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001e8e:	f7ff fc1a 	bl	80016c6 <LL_RCC_LSI2_IsReady>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f1      	bne.n	8001e7c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001e98:	f7ff fbd0 	bl	800163c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fed0 	bl	8000c40 <HAL_GetTick>
 8001ea0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ea4:	f7fe fecc 	bl	8000c40 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e183      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001eb6:	f7ff fbd2 	bl	800165e <LL_RCC_LSI1_IsReady>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f1      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d05b      	beq.n	8001f84 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ecc:	4ba7      	ldr	r3, [pc, #668]	; (800216c <HAL_RCC_OscConfig+0x688>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d114      	bne.n	8001f02 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001ed8:	f7ff fa70 	bl	80013bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001edc:	f7fe feb0 	bl	8000c40 <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee4:	f7fe feac 	bl	8000c40 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e163      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef6:	4b9d      	ldr	r3, [pc, #628]	; (800216c <HAL_RCC_OscConfig+0x688>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_OscConfig+0x42c>
 8001f0a:	f7ff fb30 	bl	800156e <LL_RCC_LSE_Enable>
 8001f0e:	e00c      	b.n	8001f2a <HAL_RCC_OscConfig+0x446>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d104      	bne.n	8001f22 <HAL_RCC_OscConfig+0x43e>
 8001f18:	f7ff fb4b 	bl	80015b2 <LL_RCC_LSE_EnableBypass>
 8001f1c:	f7ff fb27 	bl	800156e <LL_RCC_LSE_Enable>
 8001f20:	e003      	b.n	8001f2a <HAL_RCC_OscConfig+0x446>
 8001f22:	f7ff fb35 	bl	8001590 <LL_RCC_LSE_Disable>
 8001f26:	f7ff fb55 	bl	80015d4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d014      	beq.n	8001f5c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f32:	f7fe fe85 	bl	8000c40 <HAL_GetTick>
 8001f36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7fe fe81 	bl	8000c40 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e136      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001f50:	f7ff fb51 	bl	80015f6 <LL_RCC_LSE_IsReady>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0ef      	beq.n	8001f3a <HAL_RCC_OscConfig+0x456>
 8001f5a:	e013      	b.n	8001f84 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fe70 	bl	8000c40 <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f64:	f7fe fe6c 	bl	8000c40 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e121      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001f7a:	f7ff fb3c 	bl	80015f6 <LL_RCC_LSE_IsReady>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ef      	bne.n	8001f64 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d02c      	beq.n	8001fea <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d014      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f98:	f7ff fab5 	bl	8001506 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7fe fe50 	bl	8000c40 <HAL_GetTick>
 8001fa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fa4:	f7fe fe4c 	bl	8000c40 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e103      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001fb6:	f7ff fac8 	bl	800154a <LL_RCC_HSI48_IsReady>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f1      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x4c0>
 8001fc0:	e013      	b.n	8001fea <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fc2:	f7ff fab1 	bl	8001528 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7fe fe3b 	bl	8000c40 <HAL_GetTick>
 8001fca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fce:	f7fe fe37 	bl	8000c40 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0ee      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001fe0:	f7ff fab3 	bl	800154a <LL_RCC_HSI48_IsReady>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f1      	bne.n	8001fce <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80e4 	beq.w	80021bc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff4:	f7ff fc11 	bl	800181a <LL_RCC_GetSysClkSource>
 8001ff8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	2b02      	cmp	r3, #2
 8002008:	f040 80b4 	bne.w	8002174 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0203 	and.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	429a      	cmp	r2, r3
 8002018:	d123      	bne.n	8002062 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d11c      	bne.n	8002062 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d114      	bne.n	8002062 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d10d      	bne.n	8002062 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d05d      	beq.n	800211e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d058      	beq.n	800211a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0a1      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800207a:	f7ff fc84 	bl	8001986 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800207e:	f7fe fddf 	bl	8000c40 <HAL_GetTick>
 8002082:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7fe fddb 	bl	8000c40 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e092      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ef      	bne.n	8002086 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_RCC_OscConfig+0x68c>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020b8:	4311      	orrs	r1, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020be:	0212      	lsls	r2, r2, #8
 80020c0:	4311      	orrs	r1, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020c6:	4311      	orrs	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020cc:	4311      	orrs	r1, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020d2:	430a      	orrs	r2, r1
 80020d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d8:	4313      	orrs	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020dc:	f7ff fc44 	bl	8001968 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020f0:	f7fe fda6 	bl	8000c40 <HAL_GetTick>
 80020f4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f8:	f7fe fda2 	bl	8000c40 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e059      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ef      	beq.n	80020f8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002118:	e050      	b.n	80021bc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e04f      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d147      	bne.n	80021bc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800212c:	f7ff fc1c 	bl	8001968 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800213a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002140:	f7fe fd7e 	bl	8000c40 <HAL_GetTick>
 8002144:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002148:	f7fe fd7a 	bl	8000c40 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e031      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ef      	beq.n	8002148 <HAL_RCC_OscConfig+0x664>
 8002168:	e028      	b.n	80021bc <HAL_RCC_OscConfig+0x6d8>
 800216a:	bf00      	nop
 800216c:	58000400 	.word	0x58000400
 8002170:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d01e      	beq.n	80021b8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	f7ff fc04 	bl	8001986 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7fe fd5f 	bl	8000c40 <HAL_GetTick>
 8002182:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe fd5b 	bl	8000c40 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e012      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ef      	bne.n	8002186 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RCC_OscConfig+0x6e4>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	60cb      	str	r3, [r1, #12]
 80021b6:	e001      	b.n	80021bc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3734      	adds	r7, #52	; 0x34
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd90      	pop	{r4, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	eefefffc 	.word	0xeefefffc

080021cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e12d      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b98      	ldr	r3, [pc, #608]	; (8002444 <HAL_RCC_ClockConfig+0x278>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d91b      	bls.n	8002226 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b95      	ldr	r3, [pc, #596]	; (8002444 <HAL_RCC_ClockConfig+0x278>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	4993      	ldr	r1, [pc, #588]	; (8002444 <HAL_RCC_ClockConfig+0x278>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021fe:	f7fe fd1f 	bl	8000c40 <HAL_GetTick>
 8002202:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002204:	e008      	b.n	8002218 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002206:	f7fe fd1b 	bl	8000c40 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e111      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002218:	4b8a      	ldr	r3, [pc, #552]	; (8002444 <HAL_RCC_ClockConfig+0x278>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d1ef      	bne.n	8002206 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d016      	beq.n	8002260 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fafb 	bl	8001832 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800223c:	f7fe fd00 	bl	8000c40 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002244:	f7fe fcfc 	bl	8000c40 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e0f2      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002256:	f7ff fbe8 	bl	8001a2a <LL_RCC_IsActiveFlag_HPRE>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f1      	beq.n	8002244 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d016      	beq.n	800229a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff faf2 	bl	800185a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002276:	f7fe fce3 	bl	8000c40 <HAL_GetTick>
 800227a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800227e:	f7fe fcdf 	bl	8000c40 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e0d5      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002290:	f7ff fbdd 	bl	8001a4e <LL_RCC_IsActiveFlag_C2HPRE>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f1      	beq.n	800227e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d016      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff faeb 	bl	8001886 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022b0:	f7fe fcc6 	bl	8000c40 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022b8:	f7fe fcc2 	bl	8000c40 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0b8      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80022ca:	f7ff fbd3 	bl	8001a74 <LL_RCC_IsActiveFlag_SHDHPRE>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f1      	beq.n	80022b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d016      	beq.n	800230e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fae5 	bl	80018b4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022ea:	f7fe fca9 	bl	8000c40 <HAL_GetTick>
 80022ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022f2:	f7fe fca5 	bl	8000c40 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e09b      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002304:	f7ff fbc9 	bl	8001a9a <LL_RCC_IsActiveFlag_PPRE1>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f1      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d017      	beq.n	800234a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fadb 	bl	80018dc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002326:	f7fe fc8b 	bl	8000c40 <HAL_GetTick>
 800232a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800232e:	f7fe fc87 	bl	8000c40 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e07d      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002340:	f7ff fbbd 	bl	8001abe <LL_RCC_IsActiveFlag_PPRE2>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f1      	beq.n	800232e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d043      	beq.n	80023de <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d106      	bne.n	800236c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800235e:	f7ff f87b 	bl	8001458 <LL_RCC_HSE_IsReady>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11e      	bne.n	80023a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e067      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d106      	bne.n	8002382 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002374:	f7ff fb16 	bl	80019a4 <LL_RCC_PLL_IsReady>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d113      	bne.n	80023a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e05c      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800238a:	f7ff f9e3 	bl	8001754 <LL_RCC_MSI_IsReady>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d108      	bne.n	80023a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e051      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002398:	f7ff f88e 	bl	80014b8 <LL_RCC_HSI_IsReady>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e04a      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fa21 	bl	80017f2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b0:	f7fe fc46 	bl	8000c40 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7fe fc42 	bl	8000c40 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e036      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	f7ff fa24 	bl	800181a <LL_RCC_GetSysClkSource>
 80023d2:	4602      	mov	r2, r0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	429a      	cmp	r2, r3
 80023dc:	d1ec      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_RCC_ClockConfig+0x278>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d21b      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_RCC_ClockConfig+0x278>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 0207 	bic.w	r2, r3, #7
 80023f4:	4913      	ldr	r1, [pc, #76]	; (8002444 <HAL_RCC_ClockConfig+0x278>)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fc:	f7fe fc20 	bl	8000c40 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	e008      	b.n	8002416 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002404:	f7fe fc1c 	bl	8000c40 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e012      	b.n	800243c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_ClockConfig+0x278>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d1ef      	bne.n	8002404 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002424:	f000 f87e 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8002428:	4603      	mov	r3, r0
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_RCC_ClockConfig+0x27c>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800242e:	f7fe fc13 	bl	8000c58 <HAL_GetTickPrio>
 8002432:	4603      	mov	r3, r0
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fbb5 	bl	8000ba4 <HAL_InitTick>
 800243a:	4603      	mov	r3, r0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	58004000 	.word	0x58004000
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002452:	f7ff f9e2 	bl	800181a <LL_RCC_GetSysClkSource>
 8002456:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800245e:	f7ff f99e 	bl	800179e <LL_RCC_MSI_GetRange>
 8002462:	4603      	mov	r3, r0
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	4a2b      	ldr	r2, [pc, #172]	; (8002518 <HAL_RCC_GetSysClockFreq+0xcc>)
 800246c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e04b      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b04      	cmp	r3, #4
 8002478:	d102      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800247a:	4b28      	ldr	r3, [pc, #160]	; (800251c <HAL_RCC_GetSysClockFreq+0xd0>)
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e045      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b08      	cmp	r3, #8
 8002484:	d10a      	bne.n	800249c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002486:	f7fe ffb7 	bl	80013f8 <LL_RCC_HSE_IsEnabledDiv2>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d102      	bne.n	8002496 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e03a      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002496:	4b22      	ldr	r3, [pc, #136]	; (8002520 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	e037      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800249c:	f7ff fab9 	bl	8001a12 <LL_RCC_PLL_GetMainSource>
 80024a0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d003      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x64>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x6a>
 80024ae:	e00d      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <HAL_RCC_GetSysClockFreq+0xd0>)
 80024b2:	60bb      	str	r3, [r7, #8]
        break;
 80024b4:	e015      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024b6:	f7fe ff9f 	bl	80013f8 <LL_RCC_HSE_IsEnabledDiv2>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d102      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_RCC_GetSysClockFreq+0xd0>)
 80024c2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80024c4:	e00d      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_RCC_GetSysClockFreq+0xd4>)
 80024c8:	60bb      	str	r3, [r7, #8]
        break;
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80024cc:	f7ff f967 	bl	800179e <LL_RCC_MSI_GetRange>
 80024d0:	4603      	mov	r3, r0
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024de:	60bb      	str	r3, [r7, #8]
        break;
 80024e0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80024e2:	f7ff fa71 	bl	80019c8 <LL_RCC_PLL_GetN>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	fb03 f402 	mul.w	r4, r3, r2
 80024ee:	f7ff fa84 	bl	80019fa <LL_RCC_PLL_GetDivider>
 80024f2:	4603      	mov	r3, r0
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	3301      	adds	r3, #1
 80024f8:	fbb4 f4f3 	udiv	r4, r4, r3
 80024fc:	f7ff fa71 	bl	80019e2 <LL_RCC_PLL_GetR>
 8002500:	4603      	mov	r3, r0
 8002502:	0f5b      	lsrs	r3, r3, #29
 8002504:	3301      	adds	r3, #1
 8002506:	fbb4 f3f3 	udiv	r3, r4, r3
 800250a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800250c:	68fb      	ldr	r3, [r7, #12]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}
 8002516:	bf00      	nop
 8002518:	08003b90 	.word	0x08003b90
 800251c:	00f42400 	.word	0x00f42400
 8002520:	01e84800 	.word	0x01e84800

08002524 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002524:	b598      	push	{r3, r4, r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002528:	f7ff ff90 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800252c:	4604      	mov	r4, r0
 800252e:	f7ff f9e9 	bl	8001904 <LL_RCC_GetAHBPrescaler>
 8002532:	4603      	mov	r3, r0
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	4a03      	ldr	r2, [pc, #12]	; (8002548 <HAL_RCC_GetHCLKFreq+0x24>)
 800253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002540:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd98      	pop	{r3, r4, r7, pc}
 8002548:	08003b30 	.word	0x08003b30

0800254c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800254c:	b598      	push	{r3, r4, r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002550:	f7ff ffe8 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8002554:	4604      	mov	r4, r0
 8002556:	f7ff f9ef 	bl	8001938 <LL_RCC_GetAPB1Prescaler>
 800255a:	4603      	mov	r3, r0
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd98      	pop	{r3, r4, r7, pc}
 8002574:	08003b70 	.word	0x08003b70

08002578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002578:	b598      	push	{r3, r4, r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800257c:	f7ff ffd2 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8002580:	4604      	mov	r4, r0
 8002582:	f7ff f9e5 	bl	8001950 <LL_RCC_GetAPB2Prescaler>
 8002586:	4603      	mov	r3, r0
 8002588:	0adb      	lsrs	r3, r3, #11
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	fa24 f303 	lsr.w	r3, r4, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd98      	pop	{r3, r4, r7, pc}
 80025a0:	08003b70 	.word	0x08003b70

080025a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2bb0      	cmp	r3, #176	; 0xb0
 80025b0:	d903      	bls.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e007      	b.n	80025ca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80025c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80025ca:	f7ff f9a7 	bl	800191c <LL_RCC_GetAHB4Prescaler>
 80025ce:	4603      	mov	r3, r0
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	4a0d      	ldr	r2, [pc, #52]	; (800260c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80025d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	0c9c      	lsrs	r4, r3, #18
 80025ee:	f7fe fef5 	bl	80013dc <HAL_PWREx_GetVoltageRange>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4619      	mov	r1, r3
 80025f6:	4620      	mov	r0, r4
 80025f8:	f000 f80c 	bl	8002614 <RCC_SetFlashLatency>
 80025fc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bd90      	pop	{r4, r7, pc}
 8002606:	bf00      	nop
 8002608:	08003b90 	.word	0x08003b90
 800260c:	08003b30 	.word	0x08003b30
 8002610:	431bde83 	.word	0x431bde83

08002614 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b093      	sub	sp, #76	; 0x4c
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <RCC_SetFlashLatency+0xe8>)
 8002620:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002624:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800262a:	4a35      	ldr	r2, [pc, #212]	; (8002700 <RCC_SetFlashLatency+0xec>)
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	ca07      	ldmia	r2, {r0, r1, r2}
 8002632:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002636:	4b33      	ldr	r3, [pc, #204]	; (8002704 <RCC_SetFlashLatency+0xf0>)
 8002638:	f107 040c 	add.w	r4, r7, #12
 800263c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800263e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002642:	2300      	movs	r3, #0
 8002644:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800264c:	d11a      	bne.n	8002684 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800264e:	2300      	movs	r3, #0
 8002650:	643b      	str	r3, [r7, #64]	; 0x40
 8002652:	e013      	b.n	800267c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	3348      	adds	r3, #72	; 0x48
 800265a:	443b      	add	r3, r7
 800265c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	d807      	bhi.n	8002676 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	3348      	adds	r3, #72	; 0x48
 800266c:	443b      	add	r3, r7
 800266e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002672:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002674:	e020      	b.n	80026b8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002678:	3301      	adds	r3, #1
 800267a:	643b      	str	r3, [r7, #64]	; 0x40
 800267c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800267e:	2b03      	cmp	r3, #3
 8002680:	d9e8      	bls.n	8002654 <RCC_SetFlashLatency+0x40>
 8002682:	e019      	b.n	80026b8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002684:	2300      	movs	r3, #0
 8002686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002688:	e013      	b.n	80026b2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800268a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	3348      	adds	r3, #72	; 0x48
 8002690:	443b      	add	r3, r7
 8002692:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	d807      	bhi.n	80026ac <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800269c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	3348      	adds	r3, #72	; 0x48
 80026a2:	443b      	add	r3, r7
 80026a4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80026a8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80026aa:	e005      	b.n	80026b8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80026ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ae:	3301      	adds	r3, #1
 80026b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d9e8      	bls.n	800268a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <RCC_SetFlashLatency+0xf4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 0207 	bic.w	r2, r3, #7
 80026c0:	4911      	ldr	r1, [pc, #68]	; (8002708 <RCC_SetFlashLatency+0xf4>)
 80026c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026c8:	f7fe faba 	bl	8000c40 <HAL_GetTick>
 80026cc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026ce:	e008      	b.n	80026e2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026d0:	f7fe fab6 	bl	8000c40 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e007      	b.n	80026f2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <RCC_SetFlashLatency+0xf4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1ef      	bne.n	80026d0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	374c      	adds	r7, #76	; 0x4c
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd90      	pop	{r4, r7, pc}
 80026fa:	bf00      	nop
 80026fc:	08003b04 	.word	0x08003b04
 8002700:	08003b14 	.word	0x08003b14
 8002704:	08003b20 	.word	0x08003b20
 8002708:	58004000 	.word	0x58004000

0800270c <LL_RCC_LSE_IsEnabled>:
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <LL_RCC_LSE_IsEnabled+0x18>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_RCC_LSE_IsEnabled+0x1a>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_RCC_LSE_IsReady>:
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b02      	cmp	r3, #2
 8002742:	d101      	bne.n	8002748 <LL_RCC_LSE_IsReady+0x18>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <LL_RCC_LSE_IsReady+0x1a>
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_RCC_MSI_EnablePLLMode>:
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_RCC_SetRFWKPClockSource>:
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800277a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002782:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_RCC_SetSMPSClockSource>:
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	f023 0203 	bic.w	r2, r3, #3
 80027b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_RCC_SetSMPSPrescaler>:
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4313      	orrs	r3, r2
 80027e0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_RCC_SetUSARTClockSource>:
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f023 0203 	bic.w	r2, r3, #3
 8002802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_RCC_SetLPUARTClockSource>:
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800282e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <LL_RCC_SetI2CClockSource>:
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800284e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002852:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800285e:	43db      	mvns	r3, r3
 8002860:	401a      	ands	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800286a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_RCC_SetLPTIMClockSource>:
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	041b      	lsls	r3, r3, #16
 8002896:	43db      	mvns	r3, r3
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_RCC_SetSAIClockSource>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_RCC_SetRNGClockSource>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80028f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_RCC_SetCLK48ClockSource>:
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002920:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_RCC_SetUSBClockSource>:
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ffe3 	bl	800290c <LL_RCC_SetCLK48ClockSource>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <LL_RCC_SetADCClockSource>:
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_RCC_SetRTCClockSource>:
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800298e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_RCC_GetRTCClockSource>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_RCC_ForceBackupDomainReset>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_RCC_PLLSAI1_Enable>:
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_PLLSAI1_Disable>:
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a34:	6013      	str	r3, [r2, #0]
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_RCC_PLLSAI1_IsReady>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a52:	d101      	bne.n	8002a58 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a70:	2300      	movs	r3, #0
 8002a72:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d034      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a88:	d021      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002a8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a8e:	d81b      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a94:	d01d      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002a96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a9a:	d815      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa4:	d110      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002ab6:	e00d      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 f94d 	bl	8002d5c <RCCEx_PLLSAI1_ConfigNP>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002ac6:	e005      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	77fb      	strb	r3, [r7, #31]
        break;
 8002acc:	e002      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002ace:	bf00      	nop
 8002ad0:	e000      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ad4:	7ffb      	ldrb	r3, [r7, #31]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fee8 	bl	80028b4 <LL_RCC_SetSAIClockSource>
 8002ae4:	e001      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae6:	7ffb      	ldrb	r3, [r7, #31]
 8002ae8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d046      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002af6:	f7ff ff56 	bl	80029a6 <LL_RCC_GetRTCClockSource>
 8002afa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d03c      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002b06:	f7fe fc59 	bl	80013bc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff30 	bl	800297a <LL_RCC_SetRTCClockSource>
 8002b1a:	e02e      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002b26:	f7ff ff4b 	bl	80029c0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002b2a:	f7ff ff5a 	bl	80029e2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002b46:	f7ff fde1 	bl	800270c <LL_RCC_LSE_IsEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d114      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b50:	f7fe f876 	bl	8000c40 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002b56:	e00b      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe f872 	bl	8000c40 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d902      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	77fb      	strb	r3, [r7, #31]
              break;
 8002b6e:	e004      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002b70:	f7ff fdde 	bl	8002730 <LL_RCC_LSE_IsReady>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d1ee      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002b7a:	7ffb      	ldrb	r3, [r7, #31]
 8002b7c:	77bb      	strb	r3, [r7, #30]
 8002b7e:	e001      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
 8002b82:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fe2a 	bl	80027ee <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d004      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fe35 	bl	800281a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fe5d 	bl	8002880 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fe52 	bl	8002880 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fe2a 	bl	8002846 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d004      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fe1f 	bl	8002846 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d022      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fe8d 	bl	8002938 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c26:	d107      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c36:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c40:	d10b      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f8e3 	bl	8002e12 <RCCEx_PLLSAI1_ConfigNQ>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002c50:	7ffb      	ldrb	r3, [r7, #31]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002c56:	7ffb      	ldrb	r3, [r7, #31]
 8002c58:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02b      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c78:	d003      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d105      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fe2a 	bl	80028e0 <LL_RCC_SetRNGClockSource>
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f7ff fe21 	bl	80028e0 <LL_RCC_SetRNGClockSource>
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7ff fe34 	bl	800290c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002cac:	d107      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cbc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d022      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fe3d 	bl	800294e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cdc:	d107      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cf6:	d10b      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 f8e3 	bl	8002ec8 <RCCEx_PLLSAI1_ConfigNR>
 8002d02:	4603      	mov	r3, r0
 8002d04:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002d0c:	7ffb      	ldrb	r3, [r7, #31]
 8002d0e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d004      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fd26 	bl	8002772 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fd45 	bl	80027c6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fd2c 	bl	800279e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002d46:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3720      	adds	r7, #32
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002d54:	f7ff fcfe 	bl	8002754 <LL_RCC_MSI_EnablePLLMode>
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002d68:	f7ff fe5b 	bl	8002a22 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d6c:	f7fd ff68 	bl	8000c40 <HAL_GetTick>
 8002d70:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002d72:	e009      	b.n	8002d88 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d74:	f7fd ff64 	bl	8000c40 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d902      	bls.n	8002d88 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	73fb      	strb	r3, [r7, #15]
      break;
 8002d86:	e004      	b.n	8002d92 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002d88:	f7ff fe5a 	bl	8002a40 <LL_RCC_PLLSAI1_IsReady>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d137      	bne.n	8002e08 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dac:	4313      	orrs	r3, r2
 8002dae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002dc6:	f7ff fe1d 	bl	8002a04 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dca:	f7fd ff39 	bl	8000c40 <HAL_GetTick>
 8002dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002dd0:	e009      	b.n	8002de6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dd2:	f7fd ff35 	bl	8000c40 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d902      	bls.n	8002de6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	73fb      	strb	r3, [r7, #15]
        break;
 8002de4:	e004      	b.n	8002df0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002de6:	f7ff fe2b 	bl	8002a40 <LL_RCC_PLLSAI1_IsReady>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d1f0      	bne.n	8002dd2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d108      	bne.n	8002e08 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e04:	4313      	orrs	r3, r2
 8002e06:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e1e:	f7ff fe00 	bl	8002a22 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e22:	f7fd ff0d 	bl	8000c40 <HAL_GetTick>
 8002e26:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e28:	e009      	b.n	8002e3e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e2a:	f7fd ff09 	bl	8000c40 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d902      	bls.n	8002e3e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e3c:	e004      	b.n	8002e48 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e3e:	f7ff fdff 	bl	8002a40 <LL_RCC_PLLSAI1_IsReady>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d137      	bne.n	8002ebe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e62:	4313      	orrs	r3, r2
 8002e64:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002e7c:	f7ff fdc2 	bl	8002a04 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e80:	f7fd fede 	bl	8000c40 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e86:	e009      	b.n	8002e9c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e88:	f7fd feda 	bl	8000c40 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	73fb      	strb	r3, [r7, #15]
        break;
 8002e9a:	e004      	b.n	8002ea6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e9c:	f7ff fdd0 	bl	8002a40 <LL_RCC_PLLSAI1_IsReady>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d1f0      	bne.n	8002e88 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d108      	bne.n	8002ebe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ed4:	f7ff fda5 	bl	8002a22 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ed8:	f7fd feb2 	bl	8000c40 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ede:	e009      	b.n	8002ef4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ee0:	f7fd feae 	bl	8000c40 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d902      	bls.n	8002ef4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef2:	e004      	b.n	8002efe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ef4:	f7ff fda4 	bl	8002a40 <LL_RCC_PLLSAI1_IsReady>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d137      	bne.n	8002f74 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f32:	f7ff fd67 	bl	8002a04 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f36:	f7fd fe83 	bl	8000c40 <HAL_GetTick>
 8002f3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f3c:	e009      	b.n	8002f52 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f3e:	f7fd fe7f 	bl	8000c40 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d902      	bls.n	8002f52 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	73fb      	strb	r3, [r7, #15]
        break;
 8002f50:	e004      	b.n	8002f5c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f52:	f7ff fd75 	bl	8002a40 <LL_RCC_PLLSAI1_IsReady>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d1f0      	bne.n	8002f3e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d108      	bne.n	8002f74 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f70:	4313      	orrs	r3, r2
 8002f72:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <LL_RCC_GetUSARTClockSource>:
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4013      	ands	r3, r2
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_RCC_GetLPUARTClockSource>:
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4013      	ands	r3, r2
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e042      	b.n	8003056 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd fc6e 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2224      	movs	r2, #36	; 0x24
 8002fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f82d 	bl	8003060 <UART_SetConfig>
 8003006:	4603      	mov	r3, r0
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e022      	b.n	8003056 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fa47 	bl	80034ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800302c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800303c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 face 	bl	80035f0 <UART_CheckIdleState>
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003064:	b08c      	sub	sp, #48	; 0x30
 8003066:	af00      	add	r7, sp, #0
 8003068:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	431a      	orrs	r2, r3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	431a      	orrs	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	4313      	orrs	r3, r2
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4baf      	ldr	r3, [pc, #700]	; (800334c <UART_SetConfig+0x2ec>)
 8003090:	4013      	ands	r3, r2
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003098:	430b      	orrs	r3, r1
 800309a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4aa4      	ldr	r2, [pc, #656]	; (8003350 <UART_SetConfig+0x2f0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c8:	4313      	orrs	r3, r2
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80030d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030e0:	430b      	orrs	r3, r1
 80030e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	f023 010f 	bic.w	r1, r3, #15
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a95      	ldr	r2, [pc, #596]	; (8003354 <UART_SetConfig+0x2f4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d125      	bne.n	8003150 <UART_SetConfig+0xf0>
 8003104:	2003      	movs	r0, #3
 8003106:	f7ff ff3a 	bl	8002f7e <LL_RCC_GetUSARTClockSource>
 800310a:	4603      	mov	r3, r0
 800310c:	2b03      	cmp	r3, #3
 800310e:	d81b      	bhi.n	8003148 <UART_SetConfig+0xe8>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <UART_SetConfig+0xb8>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	08003129 	.word	0x08003129
 800311c:	08003139 	.word	0x08003139
 8003120:	08003131 	.word	0x08003131
 8003124:	08003141 	.word	0x08003141
 8003128:	2301      	movs	r3, #1
 800312a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800312e:	e042      	b.n	80031b6 <UART_SetConfig+0x156>
 8003130:	2302      	movs	r3, #2
 8003132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003136:	e03e      	b.n	80031b6 <UART_SetConfig+0x156>
 8003138:	2304      	movs	r3, #4
 800313a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800313e:	e03a      	b.n	80031b6 <UART_SetConfig+0x156>
 8003140:	2308      	movs	r3, #8
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003146:	e036      	b.n	80031b6 <UART_SetConfig+0x156>
 8003148:	2310      	movs	r3, #16
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314e:	e032      	b.n	80031b6 <UART_SetConfig+0x156>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a7e      	ldr	r2, [pc, #504]	; (8003350 <UART_SetConfig+0x2f0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d12a      	bne.n	80031b0 <UART_SetConfig+0x150>
 800315a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800315e:	f7ff ff1e 	bl	8002f9e <LL_RCC_GetLPUARTClockSource>
 8003162:	4603      	mov	r3, r0
 8003164:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003168:	d01a      	beq.n	80031a0 <UART_SetConfig+0x140>
 800316a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800316e:	d81b      	bhi.n	80031a8 <UART_SetConfig+0x148>
 8003170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003174:	d00c      	beq.n	8003190 <UART_SetConfig+0x130>
 8003176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317a:	d815      	bhi.n	80031a8 <UART_SetConfig+0x148>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <UART_SetConfig+0x128>
 8003180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003184:	d008      	beq.n	8003198 <UART_SetConfig+0x138>
 8003186:	e00f      	b.n	80031a8 <UART_SetConfig+0x148>
 8003188:	2300      	movs	r3, #0
 800318a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318e:	e012      	b.n	80031b6 <UART_SetConfig+0x156>
 8003190:	2302      	movs	r3, #2
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003196:	e00e      	b.n	80031b6 <UART_SetConfig+0x156>
 8003198:	2304      	movs	r3, #4
 800319a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800319e:	e00a      	b.n	80031b6 <UART_SetConfig+0x156>
 80031a0:	2308      	movs	r3, #8
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031a6:	e006      	b.n	80031b6 <UART_SetConfig+0x156>
 80031a8:	2310      	movs	r3, #16
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ae:	e002      	b.n	80031b6 <UART_SetConfig+0x156>
 80031b0:	2310      	movs	r3, #16
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a65      	ldr	r2, [pc, #404]	; (8003350 <UART_SetConfig+0x2f0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	f040 8097 	bne.w	80032f0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d823      	bhi.n	8003212 <UART_SetConfig+0x1b2>
 80031ca:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0x170>)
 80031cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	08003213 	.word	0x08003213
 80031d8:	080031fd 	.word	0x080031fd
 80031dc:	08003213 	.word	0x08003213
 80031e0:	08003203 	.word	0x08003203
 80031e4:	08003213 	.word	0x08003213
 80031e8:	08003213 	.word	0x08003213
 80031ec:	08003213 	.word	0x08003213
 80031f0:	0800320b 	.word	0x0800320b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f4:	f7ff f9aa 	bl	800254c <HAL_RCC_GetPCLK1Freq>
 80031f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031fa:	e010      	b.n	800321e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031fc:	4b56      	ldr	r3, [pc, #344]	; (8003358 <UART_SetConfig+0x2f8>)
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003200:	e00d      	b.n	800321e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003202:	f7ff f923 	bl	800244c <HAL_RCC_GetSysClockFreq>
 8003206:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003208:	e009      	b.n	800321e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800320a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003210:	e005      	b.n	800321e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800321c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 812a 	beq.w	800347a <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	4a4c      	ldr	r2, [pc, #304]	; (800335c <UART_SetConfig+0x2fc>)
 800322c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003230:	461a      	mov	r2, r3
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	fbb3 f3f2 	udiv	r3, r3, r2
 8003238:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	429a      	cmp	r2, r3
 8003248:	d305      	bcc.n	8003256 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	429a      	cmp	r2, r3
 8003254:	d903      	bls.n	800325e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800325c:	e10d      	b.n	800347a <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	2200      	movs	r2, #0
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	60fa      	str	r2, [r7, #12]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	4a3c      	ldr	r2, [pc, #240]	; (800335c <UART_SetConfig+0x2fc>)
 800326c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003270:	b29b      	uxth	r3, r3
 8003272:	2200      	movs	r2, #0
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800327c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003280:	f7fc ff7c 	bl	800017c <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	020b      	lsls	r3, r1, #8
 8003296:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800329a:	0202      	lsls	r2, r0, #8
 800329c:	6979      	ldr	r1, [r7, #20]
 800329e:	6849      	ldr	r1, [r1, #4]
 80032a0:	0849      	lsrs	r1, r1, #1
 80032a2:	2000      	movs	r0, #0
 80032a4:	460c      	mov	r4, r1
 80032a6:	4605      	mov	r5, r0
 80032a8:	eb12 0804 	adds.w	r8, r2, r4
 80032ac:	eb43 0905 	adc.w	r9, r3, r5
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	469a      	mov	sl, r3
 80032b8:	4693      	mov	fp, r2
 80032ba:	4652      	mov	r2, sl
 80032bc:	465b      	mov	r3, fp
 80032be:	4640      	mov	r0, r8
 80032c0:	4649      	mov	r1, r9
 80032c2:	f7fc ff5b 	bl	800017c <__aeabi_uldivmod>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4613      	mov	r3, r2
 80032cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d4:	d308      	bcc.n	80032e8 <UART_SetConfig+0x288>
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032dc:	d204      	bcs.n	80032e8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a3a      	ldr	r2, [r7, #32]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	e0c8      	b.n	800347a <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80032ee:	e0c4      	b.n	800347a <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f8:	d16d      	bne.n	80033d6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80032fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032fe:	3b01      	subs	r3, #1
 8003300:	2b07      	cmp	r3, #7
 8003302:	d82d      	bhi.n	8003360 <UART_SetConfig+0x300>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0x2ac>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	0800332d 	.word	0x0800332d
 8003310:	08003335 	.word	0x08003335
 8003314:	08003361 	.word	0x08003361
 8003318:	0800333b 	.word	0x0800333b
 800331c:	08003361 	.word	0x08003361
 8003320:	08003361 	.word	0x08003361
 8003324:	08003361 	.word	0x08003361
 8003328:	08003343 	.word	0x08003343
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800332c:	f7ff f924 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 8003330:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003332:	e01b      	b.n	800336c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <UART_SetConfig+0x2f8>)
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003338:	e018      	b.n	800336c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800333a:	f7ff f887 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800333e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003340:	e014      	b.n	800336c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003348:	e010      	b.n	800336c <UART_SetConfig+0x30c>
 800334a:	bf00      	nop
 800334c:	cfff69f3 	.word	0xcfff69f3
 8003350:	40008000 	.word	0x40008000
 8003354:	40013800 	.word	0x40013800
 8003358:	00f42400 	.word	0x00f42400
 800335c:	08003bd0 	.word	0x08003bd0
      default:
        pclk = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800336a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8083 	beq.w	800347a <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	4a4a      	ldr	r2, [pc, #296]	; (80034a4 <UART_SetConfig+0x444>)
 800337a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800337e:	461a      	mov	r2, r3
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	fbb3 f3f2 	udiv	r3, r3, r2
 8003386:	005a      	lsls	r2, r3, #1
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	441a      	add	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2b0f      	cmp	r3, #15
 800339e:	d916      	bls.n	80033ce <UART_SetConfig+0x36e>
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a6:	d212      	bcs.n	80033ce <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f023 030f 	bic.w	r3, r3, #15
 80033b0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	b29a      	uxth	r2, r3
 80033be:	8bfb      	ldrh	r3, [r7, #30]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	8bfa      	ldrh	r2, [r7, #30]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	e055      	b.n	800347a <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033d4:	e051      	b.n	800347a <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033da:	3b01      	subs	r3, #1
 80033dc:	2b07      	cmp	r3, #7
 80033de:	d822      	bhi.n	8003426 <UART_SetConfig+0x3c6>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <UART_SetConfig+0x388>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	08003409 	.word	0x08003409
 80033ec:	08003411 	.word	0x08003411
 80033f0:	08003427 	.word	0x08003427
 80033f4:	08003417 	.word	0x08003417
 80033f8:	08003427 	.word	0x08003427
 80033fc:	08003427 	.word	0x08003427
 8003400:	08003427 	.word	0x08003427
 8003404:	0800341f 	.word	0x0800341f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003408:	f7ff f8b6 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 800340c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800340e:	e010      	b.n	8003432 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <UART_SetConfig+0x448>)
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003414:	e00d      	b.n	8003432 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003416:	f7ff f819 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800341a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800341c:	e009      	b.n	8003432 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800341e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003424:	e005      	b.n	8003432 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003430:	bf00      	nop
    }

    if (pclk != 0U)
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	2b00      	cmp	r3, #0
 8003436:	d020      	beq.n	800347a <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <UART_SetConfig+0x444>)
 800343e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003442:	461a      	mov	r2, r3
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	fbb3 f2f2 	udiv	r2, r3, r2
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	441a      	add	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	2b0f      	cmp	r3, #15
 8003460:	d908      	bls.n	8003474 <UART_SetConfig+0x414>
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d204      	bcs.n	8003474 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a3a      	ldr	r2, [r7, #32]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	e002      	b.n	800347a <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2201      	movs	r2, #1
 800347e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2201      	movs	r2, #1
 8003486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2200      	movs	r2, #0
 8003494:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003496:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800349a:	4618      	mov	r0, r3
 800349c:	3730      	adds	r7, #48	; 0x30
 800349e:	46bd      	mov	sp, r7
 80034a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a4:	08003bd0 	.word	0x08003bd0
 80034a8:	00f42400 	.word	0x00f42400

080034ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01a      	beq.n	80035c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035aa:	d10a      	bne.n	80035c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003600:	f7fd fb1e 	bl	8000c40 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b08      	cmp	r3, #8
 8003612:	d10e      	bne.n	8003632 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f82f 	bl	8003686 <UART_WaitOnFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e025      	b.n	800367e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b04      	cmp	r3, #4
 800363e:	d10e      	bne.n	800365e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f819 	bl	8003686 <UART_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e00f      	b.n	800367e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b09c      	sub	sp, #112	; 0x70
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	4613      	mov	r3, r2
 8003694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003696:	e0a9      	b.n	80037ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800369e:	f000 80a5 	beq.w	80037ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7fd facd 	bl	8000c40 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80036b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d140      	bne.n	800373a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036cc:	667b      	str	r3, [r7, #100]	; 0x64
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e6      	bne.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3308      	adds	r3, #8
 80036f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	663b      	str	r3, [r7, #96]	; 0x60
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3308      	adds	r3, #8
 8003708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800370a:	64ba      	str	r2, [r7, #72]	; 0x48
 800370c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e5      	bne.n	80036ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e069      	b.n	800380e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d051      	beq.n	80037ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003756:	d149      	bne.n	80037ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003760:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003776:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
 8003782:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e6      	bne.n	8003762 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3308      	adds	r3, #8
 800379a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	613b      	str	r3, [r7, #16]
   return(result);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3308      	adds	r3, #8
 80037b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037b4:	623a      	str	r2, [r7, #32]
 80037b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	69f9      	ldr	r1, [r7, #28]
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e5      	bne.n	8003794 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e010      	b.n	800380e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4013      	ands	r3, r2
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	429a      	cmp	r2, r3
 8003808:	f43f af46 	beq.w	8003698 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3770      	adds	r7, #112	; 0x70
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_UARTEx_DisableFifoMode+0x16>
 8003828:	2302      	movs	r3, #2
 800382a:	e027      	b.n	800387c <HAL_UARTEx_DisableFifoMode+0x66>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800385a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800389c:	2302      	movs	r3, #2
 800389e:	e02d      	b.n	80038fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f84f 	bl	8003980 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003918:	2302      	movs	r3, #2
 800391a:	e02d      	b.n	8003978 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f811 	bl	8003980 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398c:	2b00      	cmp	r3, #0
 800398e:	d108      	bne.n	80039a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039a0:	e031      	b.n	8003a06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039a2:	2308      	movs	r3, #8
 80039a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039a6:	2308      	movs	r3, #8
 80039a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	0e5b      	lsrs	r3, r3, #25
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	0f5b      	lsrs	r3, r3, #29
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039ca:	7bbb      	ldrb	r3, [r7, #14]
 80039cc:	7b3a      	ldrb	r2, [r7, #12]
 80039ce:	4911      	ldr	r1, [pc, #68]	; (8003a14 <UARTEx_SetNbDataToProcess+0x94>)
 80039d0:	5c8a      	ldrb	r2, [r1, r2]
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80039d6:	7b3a      	ldrb	r2, [r7, #12]
 80039d8:	490f      	ldr	r1, [pc, #60]	; (8003a18 <UARTEx_SetNbDataToProcess+0x98>)
 80039da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	7b7a      	ldrb	r2, [r7, #13]
 80039ec:	4909      	ldr	r1, [pc, #36]	; (8003a14 <UARTEx_SetNbDataToProcess+0x94>)
 80039ee:	5c8a      	ldrb	r2, [r1, r2]
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80039f4:	7b7a      	ldrb	r2, [r7, #13]
 80039f6:	4908      	ldr	r1, [pc, #32]	; (8003a18 <UARTEx_SetNbDataToProcess+0x98>)
 80039f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003a06:	bf00      	nop
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	08003be8 	.word	0x08003be8
 8003a18:	08003bf0 	.word	0x08003bf0

08003a1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a24:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003a28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a52:	b084      	sub	sp, #16
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	f107 0014 	add.w	r0, r7, #20
 8003a60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	b004      	add	sp, #16
 8003a92:	4770      	bx	lr

08003a94 <__libc_init_array>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	4d0d      	ldr	r5, [pc, #52]	; (8003acc <__libc_init_array+0x38>)
 8003a98:	4c0d      	ldr	r4, [pc, #52]	; (8003ad0 <__libc_init_array+0x3c>)
 8003a9a:	1b64      	subs	r4, r4, r5
 8003a9c:	10a4      	asrs	r4, r4, #2
 8003a9e:	2600      	movs	r6, #0
 8003aa0:	42a6      	cmp	r6, r4
 8003aa2:	d109      	bne.n	8003ab8 <__libc_init_array+0x24>
 8003aa4:	4d0b      	ldr	r5, [pc, #44]	; (8003ad4 <__libc_init_array+0x40>)
 8003aa6:	4c0c      	ldr	r4, [pc, #48]	; (8003ad8 <__libc_init_array+0x44>)
 8003aa8:	f000 f820 	bl	8003aec <_init>
 8003aac:	1b64      	subs	r4, r4, r5
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	2600      	movs	r6, #0
 8003ab2:	42a6      	cmp	r6, r4
 8003ab4:	d105      	bne.n	8003ac2 <__libc_init_array+0x2e>
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003abc:	4798      	blx	r3
 8003abe:	3601      	adds	r6, #1
 8003ac0:	e7ee      	b.n	8003aa0 <__libc_init_array+0xc>
 8003ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac6:	4798      	blx	r3
 8003ac8:	3601      	adds	r6, #1
 8003aca:	e7f2      	b.n	8003ab2 <__libc_init_array+0x1e>
 8003acc:	08003c00 	.word	0x08003c00
 8003ad0:	08003c00 	.word	0x08003c00
 8003ad4:	08003c00 	.word	0x08003c00
 8003ad8:	08003c04 	.word	0x08003c04

08003adc <memset>:
 8003adc:	4402      	add	r2, r0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <memset+0xa>
 8003ae4:	4770      	bx	lr
 8003ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aea:	e7f9      	b.n	8003ae0 <memset+0x4>

08003aec <_init>:
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	bf00      	nop
 8003af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af2:	bc08      	pop	{r3}
 8003af4:	469e      	mov	lr, r3
 8003af6:	4770      	bx	lr

08003af8 <_fini>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr
