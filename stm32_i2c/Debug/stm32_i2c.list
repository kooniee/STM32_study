
stm32_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a28  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000004  08003c6c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c8  20000074  08003cdc  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000013c  08003cdc  0002013c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d61e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000020cc  00000000  00000000  0002d6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001200  00000000  00000000  0002f790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001108  00000000  00000000  00030990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00020646  00000000  00000000  00031a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e7fa  00000000  00000000  000520de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d071b  00000000  00000000  000608d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00130ff3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004ddc  00000000  00000000  00131044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08003b50 	.word	0x08003b50

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08003b50 	.word	0x08003b50

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800022e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4313      	orrs	r3, r2
 8000236:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800023c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4013      	ands	r3, r2
 8000242:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000244:	68fb      	ldr	r3, [r7, #12]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
	...

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 fa6e 	bl	8000738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f82e 	bl	80002bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000260:	f000 f894 	bl	800038c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f000 f8f0 	bl	8000448 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000268:	f000 f8ae 	bl	80003c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800026c:	f002 ff7d 	bl	800316a <lcd_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  sprintf(buffer, "20171163");
 8000270:	490f      	ldr	r1, [pc, #60]	; (80002b0 <main+0x5c>)
 8000272:	4810      	ldr	r0, [pc, #64]	; (80002b4 <main+0x60>)
 8000274:	f002 fffe 	bl	8003274 <siprintf>
	  lcd_send_string(buffer);
 8000278:	480e      	ldr	r0, [pc, #56]	; (80002b4 <main+0x60>)
 800027a:	f002 ffb3 	bl	80031e4 <lcd_send_string>
	  HAL_Delay(3000);
 800027e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000282:	f000 fadf 	bl	8000844 <HAL_Delay>
	  lcd_clear();
 8000286:	f002 ff57 	bl	8003138 <lcd_clear>
	  sprintf(buffer, "Kwon min wook");
 800028a:	490b      	ldr	r1, [pc, #44]	; (80002b8 <main+0x64>)
 800028c:	4809      	ldr	r0, [pc, #36]	; (80002b4 <main+0x60>)
 800028e:	f002 fff1 	bl	8003274 <siprintf>
	  lcd_send_string(buffer);
 8000292:	4808      	ldr	r0, [pc, #32]	; (80002b4 <main+0x60>)
 8000294:	f002 ffa6 	bl	80031e4 <lcd_send_string>
	  HAL_Delay(3000);
 8000298:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800029c:	f000 fad2 	bl	8000844 <HAL_Delay>
	  lcd_clear();
 80002a0:	f002 ff4a 	bl	8003138 <lcd_clear>
	  HAL_Delay(3000);
 80002a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80002a8:	f000 facc 	bl	8000844 <HAL_Delay>
  {
 80002ac:	e7e0      	b.n	8000270 <main+0x1c>
 80002ae:	bf00      	nop
 80002b0:	08003b68 	.word	0x08003b68
 80002b4:	200000e4 	.word	0x200000e4
 80002b8:	08003b74 	.word	0x08003b74

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b09a      	sub	sp, #104	; 0x68
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0320 	add.w	r3, r7, #32
 80002c6:	2248      	movs	r2, #72	; 0x48
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 ffca 	bl	8003264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]
 80002de:	615a      	str	r2, [r3, #20]
 80002e0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002e2:	4b29      	ldr	r3, [pc, #164]	; (8000388 <SystemClock_Config+0xcc>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002ea:	4a27      	ldr	r2, [pc, #156]	; (8000388 <SystemClock_Config+0xcc>)
 80002ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002f0:	6013      	str	r3, [r2, #0]
 80002f2:	4b25      	ldr	r3, [pc, #148]	; (8000388 <SystemClock_Config+0xcc>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002fa:	603b      	str	r3, [r7, #0]
 80002fc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80002fe:	2322      	movs	r3, #34	; 0x22
 8000300:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000306:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000308:	2301      	movs	r3, #1
 800030a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030c:	2340      	movs	r3, #64	; 0x40
 800030e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000310:	2300      	movs	r3, #0
 8000312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000314:	2360      	movs	r3, #96	; 0x60
 8000316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	2302      	movs	r3, #2
 800031a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800031c:	2301      	movs	r3, #1
 800031e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000324:	2318      	movs	r3, #24
 8000326:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800032c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800032e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000332:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000338:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	f107 0320 	add.w	r3, r7, #32
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fc8e 	bl	8001c60 <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800034a:	f000 f884 	bl	8000456 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800034e:	236f      	movs	r3, #111	; 0x6f
 8000350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000352:	2303      	movs	r3, #3
 8000354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000362:	2380      	movs	r3, #128	; 0x80
 8000364:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f001 ffea 	bl	8002348 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800037a:	f000 f86c 	bl	8000456 <Error_Handler>
  }
}
 800037e:	bf00      	nop
 8000380:	3768      	adds	r7, #104	; 0x68
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	58000400 	.word	0x58000400

0800038c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b094      	sub	sp, #80	; 0x50
 8000390:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000392:	463b      	mov	r3, r7
 8000394:	2250      	movs	r2, #80	; 0x50
 8000396:	2100      	movs	r1, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f002 ff63 	bl	8003264 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800039e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80003a4:	2300      	movs	r3, #0
 80003a6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003ac:	463b      	mov	r3, r7
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 fbdb 	bl	8002b6a <HAL_RCCEx_PeriphCLKConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80003ba:	f000 f84c 	bl	8000456 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80003be:	bf00      	nop
 80003c0:	3750      	adds	r7, #80	; 0x50
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_I2C1_Init+0x74>)
 80003ce:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <MX_I2C1_Init+0x78>)
 80003d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <MX_I2C1_Init+0x74>)
 80003d4:	4a1b      	ldr	r2, [pc, #108]	; (8000444 <MX_I2C1_Init+0x7c>)
 80003d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_I2C1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003de:	4b17      	ldr	r3, [pc, #92]	; (800043c <MX_I2C1_Init+0x74>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_I2C1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_I2C1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_I2C1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f6:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_I2C1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_I2C1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000402:	480e      	ldr	r0, [pc, #56]	; (800043c <MX_I2C1_Init+0x74>)
 8000404:	f000 fc96 	bl	8000d34 <HAL_I2C_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800040e:	f000 f822 	bl	8000456 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000412:	2100      	movs	r1, #0
 8000414:	4809      	ldr	r0, [pc, #36]	; (800043c <MX_I2C1_Init+0x74>)
 8000416:	f001 f80f 	bl	8001438 <HAL_I2CEx_ConfigAnalogFilter>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000420:	f000 f819 	bl	8000456 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000424:	2100      	movs	r1, #0
 8000426:	4805      	ldr	r0, [pc, #20]	; (800043c <MX_I2C1_Init+0x74>)
 8000428:	f001 f851 	bl	80014ce <HAL_I2CEx_ConfigDigitalFilter>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f810 	bl	8000456 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000090 	.word	0x20000090
 8000440:	40005400 	.word	0x40005400
 8000444:	20303e5d 	.word	0x20303e5d

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044c:	2002      	movs	r0, #2
 800044e:	f7ff fee7 	bl	8000220 <LL_AHB2_GRP1_EnableClock>

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}

08000456 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045a:	b672      	cpsid	i
}
 800045c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045e:	e7fe      	b.n	800045e <Error_Handler+0x8>

08000460 <LL_AHB2_GRP1_EnableClock>:
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800046c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800046e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4313      	orrs	r3, r2
 8000476:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800047c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4013      	ands	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000484:	68fb      	ldr	r3, [r7, #12]
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000492:	b480      	push	{r7}
 8000494:	b085      	sub	sp, #20
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800049a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80004a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80004aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4013      	ands	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b6:	68fb      	ldr	r3, [r7, #12]
}
 80004b8:	bf00      	nop
 80004ba:	3714      	adds	r7, #20
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b09c      	sub	sp, #112	; 0x70
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	2250      	movs	r2, #80	; 0x50
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f002 feb5 	bl	8003264 <memset>
  if(hi2c->Instance==I2C1)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a17      	ldr	r2, [pc, #92]	; (800055c <HAL_I2C_MspInit+0x88>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d126      	bne.n	8000552 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000504:	2304      	movs	r3, #4
 8000506:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000508:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800050c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fb29 	bl	8002b6a <HAL_RCCEx_PeriphCLKConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800051e:	f7ff ff9a 	bl	8000456 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	2002      	movs	r0, #2
 8000524:	f7ff ff9c 	bl	8000460 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000528:	f44f 7340 	mov.w	r3, #768	; 0x300
 800052c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800052e:	2312      	movs	r3, #18
 8000530:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800053a:	2304      	movs	r3, #4
 800053c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000542:	4619      	mov	r1, r3
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <HAL_I2C_MspInit+0x8c>)
 8000546:	f000 fa85 	bl	8000a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800054a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800054e:	f7ff ffa0 	bl	8000492 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000552:	bf00      	nop
 8000554:	3770      	adds	r7, #112	; 0x70
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40005400 	.word	0x40005400
 8000560:	48000400 	.word	0x48000400

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <NMI_Handler+0x4>

0800056a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <MemManage_Handler+0x4>

08000576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <BusFault_Handler+0x4>

0800057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <UsageFault_Handler+0x4>

08000582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b0:	f000 f91c 	bl	80007ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <_sbrk+0x5c>)
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <_sbrk+0x60>)
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <_sbrk+0x64>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <_sbrk+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d207      	bcs.n	80005f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e8:	f002 fe12 	bl	8003210 <__errno>
 80005ec:	4603      	mov	r3, r0
 80005ee:	220c      	movs	r2, #12
 80005f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f6:	e009      	b.n	800060c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <_sbrk+0x64>)
 8000608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20030000 	.word	0x20030000
 8000618:	00000400 	.word	0x00000400
 800061c:	20000124 	.word	0x20000124
 8000620:	20000140 	.word	0x20000140

08000624 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <SystemInit+0x98>)
 800062a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800062e:	4a23      	ldr	r2, [pc, #140]	; (80006bc <SystemInit+0x98>)
 8000630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000650:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <SystemInit+0x9c>)
 800065e:	4013      	ands	r3, r2
 8000660:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800066a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800066e:	f023 0305 	bic.w	r3, r3, #5
 8000672:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800067a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800067e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000682:	f023 0301 	bic.w	r3, r3, #1
 8000686:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800068a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800068e:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <SystemInit+0xa0>)
 8000690:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <SystemInit+0xa0>)
 8000698:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800069a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00
 80006c0:	faf6fefb 	.word	0xfaf6fefb
 80006c4:	22041000 	.word	0x22041000

080006c8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80006c8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006cc:	3304      	adds	r3, #4

080006ce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80006d2:	d3f9      	bcc.n	80006c8 <CopyDataInit>
  bx lr
 80006d4:	4770      	bx	lr

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80006d6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80006d8:	3004      	adds	r0, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80006da:	4288      	cmp	r0, r1
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>
  bx lr
 80006de:	4770      	bx	lr

080006e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80006e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e4:	f7ff ff9e 	bl	8000624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <LoopForever+0x8>)
 80006ea:	490c      	ldr	r1, [pc, #48]	; (800071c <LoopForever+0xc>)
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <LoopForever+0x10>)
 80006ee:	2300      	movs	r3, #0
 80006f0:	f7ff ffed 	bl	80006ce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <LoopForever+0x14>)
 80006f6:	490c      	ldr	r1, [pc, #48]	; (8000728 <LoopForever+0x18>)
 80006f8:	2300      	movs	r3, #0
 80006fa:	f7ff ffee 	bl	80006da <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80006fe:	480b      	ldr	r0, [pc, #44]	; (800072c <LoopForever+0x1c>)
 8000700:	490b      	ldr	r1, [pc, #44]	; (8000730 <LoopForever+0x20>)
 8000702:	2300      	movs	r3, #0
 8000704:	f7ff ffe9 	bl	80006da <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000708:	f002 fd88 	bl	800321c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800070c:	f7ff fda2 	bl	8000254 <main>

08000710 <LoopForever>:

LoopForever:
  b LoopForever
 8000710:	e7fe      	b.n	8000710 <LoopForever>
 8000712:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000714:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000718:	20000004 	.word	0x20000004
 800071c:	20000074 	.word	0x20000074
 8000720:	08003c6c 	.word	0x08003c6c
  INIT_BSS _sbss, _ebss
 8000724:	20000074 	.word	0x20000074
 8000728:	2000013c 	.word	0x2000013c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800072c:	20030000 	.word	0x20030000
 8000730:	20030000 	.word	0x20030000

08000734 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_IRQHandler>
	...

08000738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_Init+0x3c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <HAL_Init+0x3c>)
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074e:	2003      	movs	r0, #3
 8000750:	f000 f94e 	bl	80009f0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000754:	2000      	movs	r0, #0
 8000756:	f000 f80f 	bl	8000778 <HAL_InitTick>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	e001      	b.n	800076a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000766:	f7ff fead 	bl	80004c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800076a:	79fb      	ldrb	r3, [r7, #7]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	58004000 	.word	0x58004000

08000778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <HAL_InitTick+0x6c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d024      	beq.n	80007d6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800078c:	f001 ff88 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 8000790:	4602      	mov	r2, r0
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <HAL_InitTick+0x6c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4619      	mov	r1, r3
 8000798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079c:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f948 	bl	8000a3a <HAL_SYSTICK_Config>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10f      	bne.n	80007d0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b0f      	cmp	r3, #15
 80007b4:	d809      	bhi.n	80007ca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b6:	2200      	movs	r2, #0
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007be:	f000 f922 	bl	8000a06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007c2:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <HAL_InitTick+0x70>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	e007      	b.n	80007da <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	e004      	b.n	80007da <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	73fb      	strb	r3, [r7, #15]
 80007d4:	e001      	b.n	80007da <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007da:	7bfb      	ldrb	r3, [r7, #15]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000000c 	.word	0x2000000c
 80007e8:	20000008 	.word	0x20000008

080007ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_IncTick+0x20>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_IncTick+0x24>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_IncTick+0x24>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	2000000c 	.word	0x2000000c
 8000810:	20000128 	.word	0x20000128

08000814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <HAL_GetTick+0x14>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000128 	.word	0x20000128

0800082c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <HAL_GetTickPrio+0x14>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008

08000844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800084c:	f7ff ffe2 	bl	8000814 <HAL_GetTick>
 8000850:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800085c:	d005      	beq.n	800086a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_Delay+0x44>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800086a:	bf00      	nop
 800086c:	f7ff ffd2 	bl	8000814 <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	429a      	cmp	r2, r3
 800087a:	d8f7      	bhi.n	800086c <HAL_Delay+0x28>
    {
    }
  }
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000000c 	.word	0x2000000c

0800088c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	60d3      	str	r3, [r2, #12]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <__NVIC_GetPriorityGrouping+0x18>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	f003 0307 	and.w	r3, r3, #7
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	db0a      	blt.n	800091a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <__NVIC_SetPriority+0x4c>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	440b      	add	r3, r1
 8000914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000918:	e00a      	b.n	8000930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4908      	ldr	r1, [pc, #32]	; (8000940 <__NVIC_SetPriority+0x50>)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	3b04      	subs	r3, #4
 8000928:	0112      	lsls	r2, r2, #4
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	440b      	add	r3, r1
 800092e:	761a      	strb	r2, [r3, #24]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000e100 	.word	0xe000e100
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000944:	b480      	push	{r7}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f1c3 0307 	rsb	r3, r3, #7
 800095e:	2b04      	cmp	r3, #4
 8000960:	bf28      	it	cs
 8000962:	2304      	movcs	r3, #4
 8000964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3304      	adds	r3, #4
 800096a:	2b06      	cmp	r3, #6
 800096c:	d902      	bls.n	8000974 <NVIC_EncodePriority+0x30>
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3b03      	subs	r3, #3
 8000972:	e000      	b.n	8000976 <NVIC_EncodePriority+0x32>
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43da      	mvns	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	401a      	ands	r2, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800098c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	43d9      	mvns	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	4313      	orrs	r3, r2
         );
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3724      	adds	r7, #36	; 0x24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009bc:	d301      	bcc.n	80009c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009be:	2301      	movs	r3, #1
 80009c0:	e00f      	b.n	80009e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <SysTick_Config+0x40>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ca:	210f      	movs	r1, #15
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009d0:	f7ff ff8e 	bl	80008f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <SysTick_Config+0x40>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009da:	4b04      	ldr	r3, [pc, #16]	; (80009ec <SysTick_Config+0x40>)
 80009dc:	2207      	movs	r2, #7
 80009de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	e000e010 	.word	0xe000e010

080009f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff ff47 	bl	800088c <__NVIC_SetPriorityGrouping>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
 8000a12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a14:	f7ff ff5e 	bl	80008d4 <__NVIC_GetPriorityGrouping>
 8000a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	6978      	ldr	r0, [r7, #20]
 8000a20:	f7ff ff90 	bl	8000944 <NVIC_EncodePriority>
 8000a24:	4602      	mov	r2, r0
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff5f 	bl	80008f0 <__NVIC_SetPriority>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ffb2 	bl	80009ac <SysTick_Config>
 8000a48:	4603      	mov	r3, r0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	e14c      	b.n	8000cfe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	2101      	movs	r1, #1
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f000 813e 	beq.w	8000cf8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d005      	beq.n	8000a94 <HAL_GPIO_Init+0x40>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d130      	bne.n	8000af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aca:	2201      	movs	r2, #1
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	091b      	lsrs	r3, r3, #4
 8000ae0:	f003 0201 	and.w	r2, r3, #1
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 0303 	and.w	r3, r3, #3
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d017      	beq.n	8000b32 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d123      	bne.n	8000b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	08da      	lsrs	r2, r3, #3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3208      	adds	r2, #8
 8000b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	220f      	movs	r2, #15
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	691a      	ldr	r2, [r3, #16]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	08da      	lsrs	r2, r3, #3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3208      	adds	r2, #8
 8000b80:	6939      	ldr	r1, [r7, #16]
 8000b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2203      	movs	r2, #3
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0203 	and.w	r2, r3, #3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 8098 	beq.w	8000cf8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bc8:	4a54      	ldr	r2, [pc, #336]	; (8000d1c <HAL_GPIO_Init+0x2c8>)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	3302      	adds	r3, #2
 8000bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f003 0303 	and.w	r3, r3, #3
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	220f      	movs	r2, #15
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bf2:	d019      	beq.n	8000c28 <HAL_GPIO_Init+0x1d4>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a4a      	ldr	r2, [pc, #296]	; (8000d20 <HAL_GPIO_Init+0x2cc>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d013      	beq.n	8000c24 <HAL_GPIO_Init+0x1d0>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a49      	ldr	r2, [pc, #292]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d00d      	beq.n	8000c20 <HAL_GPIO_Init+0x1cc>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a48      	ldr	r2, [pc, #288]	; (8000d28 <HAL_GPIO_Init+0x2d4>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d007      	beq.n	8000c1c <HAL_GPIO_Init+0x1c8>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a47      	ldr	r2, [pc, #284]	; (8000d2c <HAL_GPIO_Init+0x2d8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d101      	bne.n	8000c18 <HAL_GPIO_Init+0x1c4>
 8000c14:	2304      	movs	r3, #4
 8000c16:	e008      	b.n	8000c2a <HAL_GPIO_Init+0x1d6>
 8000c18:	2307      	movs	r3, #7
 8000c1a:	e006      	b.n	8000c2a <HAL_GPIO_Init+0x1d6>
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	e004      	b.n	8000c2a <HAL_GPIO_Init+0x1d6>
 8000c20:	2302      	movs	r3, #2
 8000c22:	e002      	b.n	8000c2a <HAL_GPIO_Init+0x1d6>
 8000c24:	2301      	movs	r3, #1
 8000c26:	e000      	b.n	8000c2a <HAL_GPIO_Init+0x1d6>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	f002 0203 	and.w	r2, r2, #3
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	4093      	lsls	r3, r2
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c3a:	4938      	ldr	r1, [pc, #224]	; (8000d1c <HAL_GPIO_Init+0x2c8>)
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	3302      	adds	r3, #2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c48:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <HAL_GPIO_Init+0x2dc>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c6c:	4a30      	ldr	r2, [pc, #192]	; (8000d30 <HAL_GPIO_Init+0x2dc>)
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c72:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <HAL_GPIO_Init+0x2dc>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c96:	4a26      	ldr	r2, [pc, #152]	; (8000d30 <HAL_GPIO_Init+0x2dc>)
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <HAL_GPIO_Init+0x2dc>)
 8000c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cc2:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <HAL_GPIO_Init+0x2dc>)
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_GPIO_Init+0x2dc>)
 8000ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <HAL_GPIO_Init+0x2dc>)
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa22 f303 	lsr.w	r3, r2, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f47f aeab 	bne.w	8000a64 <HAL_GPIO_Init+0x10>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	371c      	adds	r7, #28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	48001000 	.word	0x48001000
 8000d30:	58000800 	.word	0x58000800

08000d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e081      	b.n	8000e4a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d106      	bne.n	8000d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fbba 	bl	80004d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2224      	movs	r2, #36	; 0x24
 8000d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 0201 	bic.w	r2, r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d107      	bne.n	8000dae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	e006      	b.n	8000dbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000dba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d104      	bne.n	8000dce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000df0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69d9      	ldr	r1, [r3, #28]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1a      	ldr	r2, [r3, #32]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0201 	orr.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2220      	movs	r2, #32
 8000e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	460b      	mov	r3, r1
 8000e62:	817b      	strh	r3, [r7, #10]
 8000e64:	4613      	mov	r3, r2
 8000e66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b20      	cmp	r3, #32
 8000e72:	f040 80da 	bne.w	800102a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d101      	bne.n	8000e84 <HAL_I2C_Master_Transmit+0x30>
 8000e80:	2302      	movs	r3, #2
 8000e82:	e0d3      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2201      	movs	r2, #1
 8000e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e8c:	f7ff fcc2 	bl	8000814 <HAL_GetTick>
 8000e90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2319      	movs	r3, #25
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f000 f8f0 	bl	8001084 <I2C_WaitOnFlagUntilTimeout>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e0be      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2221      	movs	r2, #33	; 0x21
 8000eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2210      	movs	r2, #16
 8000eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	893a      	ldrh	r2, [r7, #8]
 8000ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	2bff      	cmp	r3, #255	; 0xff
 8000ede:	d90e      	bls.n	8000efe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	22ff      	movs	r2, #255	; 0xff
 8000ee4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	8979      	ldrh	r1, [r7, #10]
 8000eee:	4b51      	ldr	r3, [pc, #324]	; (8001034 <HAL_I2C_Master_Transmit+0x1e0>)
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f000 fa6c 	bl	80013d4 <I2C_TransferConfig>
 8000efc:	e06c      	b.n	8000fd8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	8979      	ldrh	r1, [r7, #10]
 8000f10:	4b48      	ldr	r3, [pc, #288]	; (8001034 <HAL_I2C_Master_Transmit+0x1e0>)
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 fa5b 	bl	80013d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000f1e:	e05b      	b.n	8000fd8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	6a39      	ldr	r1, [r7, #32]
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f000 f8ed 	bl	8001104 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e07b      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d034      	beq.n	8000fd8 <HAL_I2C_Master_Transmit+0x184>
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d130      	bne.n	8000fd8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f87f 	bl	8001084 <I2C_WaitOnFlagUntilTimeout>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e04d      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	2bff      	cmp	r3, #255	; 0xff
 8000f98:	d90e      	bls.n	8000fb8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	22ff      	movs	r2, #255	; 0xff
 8000f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	8979      	ldrh	r1, [r7, #10]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 fa0f 	bl	80013d4 <I2C_TransferConfig>
 8000fb6:	e00f      	b.n	8000fd8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	8979      	ldrh	r1, [r7, #10]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 f9fe 	bl	80013d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d19e      	bne.n	8000f20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	6a39      	ldr	r1, [r7, #32]
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f000 f8cc 	bl	8001184 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e01a      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6859      	ldr	r1, [r3, #4]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_I2C_Master_Transmit+0x1e4>)
 800100a:	400b      	ands	r3, r1
 800100c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2220      	movs	r2, #32
 8001012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800102a:	2302      	movs	r3, #2
  }
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	80002000 	.word	0x80002000
 8001038:	fe00e800 	.word	0xfe00e800

0800103c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b02      	cmp	r3, #2
 8001050:	d103      	bne.n	800105a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b01      	cmp	r3, #1
 8001066:	d007      	beq.n	8001078 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	699a      	ldr	r2, [r3, #24]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0201 	orr.w	r2, r2, #1
 8001076:	619a      	str	r2, [r3, #24]
  }
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	4613      	mov	r3, r2
 8001092:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001094:	e022      	b.n	80010dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800109c:	d01e      	beq.n	80010dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800109e:	f7ff fbb9 	bl	8000814 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d302      	bcc.n	80010b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d113      	bne.n	80010dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	f043 0220 	orr.w	r2, r3, #32
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2220      	movs	r2, #32
 80010c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e00f      	b.n	80010fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	699a      	ldr	r2, [r3, #24]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	4013      	ands	r3, r2
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	bf0c      	ite	eq
 80010ec:	2301      	moveq	r3, #1
 80010ee:	2300      	movne	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d0cd      	beq.n	8001096 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001110:	e02c      	b.n	800116c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 f870 	bl	80011fc <I2C_IsErrorOccurred>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e02a      	b.n	800117c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800112c:	d01e      	beq.n	800116c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800112e:	f7ff fb71 	bl	8000814 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	429a      	cmp	r2, r3
 800113c:	d302      	bcc.n	8001144 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d113      	bne.n	800116c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	f043 0220 	orr.w	r2, r3, #32
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2220      	movs	r2, #32
 8001154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e007      	b.n	800117c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b02      	cmp	r3, #2
 8001178:	d1cb      	bne.n	8001112 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001190:	e028      	b.n	80011e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 f830 	bl	80011fc <I2C_IsErrorOccurred>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e026      	b.n	80011f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011a6:	f7ff fb35 	bl	8000814 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d302      	bcc.n	80011bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d113      	bne.n	80011e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	f043 0220 	orr.w	r2, r3, #32
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2220      	movs	r2, #32
 80011cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e007      	b.n	80011f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f003 0320 	and.w	r3, r3, #32
 80011ee:	2b20      	cmp	r3, #32
 80011f0:	d1cf      	bne.n	8001192 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b00      	cmp	r3, #0
 8001226:	d075      	beq.n	8001314 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2210      	movs	r2, #16
 800122e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001230:	e056      	b.n	80012e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001238:	d052      	beq.n	80012e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800123a:	f7ff faeb 	bl	8000814 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	429a      	cmp	r2, r3
 8001248:	d302      	bcc.n	8001250 <I2C_IsErrorOccurred+0x54>
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d147      	bne.n	80012e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001262:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800126e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001272:	d12e      	bne.n	80012d2 <I2C_IsErrorOccurred+0xd6>
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800127a:	d02a      	beq.n	80012d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800127c:	7cfb      	ldrb	r3, [r7, #19]
 800127e:	2b20      	cmp	r3, #32
 8001280:	d027      	beq.n	80012d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001290:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001292:	f7ff fabf 	bl	8000814 <HAL_GetTick>
 8001296:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001298:	e01b      	b.n	80012d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800129a:	f7ff fabb 	bl	8000814 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b19      	cmp	r3, #25
 80012a6:	d914      	bls.n	80012d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f043 0220 	orr.w	r2, r3, #32
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2220      	movs	r2, #32
 80012b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	2b20      	cmp	r3, #32
 80012de:	d1dc      	bne.n	800129a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0320 	and.w	r3, r3, #32
 80012ea:	2b20      	cmp	r3, #32
 80012ec:	d003      	beq.n	80012f6 <I2C_IsErrorOccurred+0xfa>
 80012ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d09d      	beq.n	8001232 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80012f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d103      	bne.n	8001306 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2220      	movs	r2, #32
 8001304:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001336:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001358:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01c      	beq.n	80013c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f7ff fe56 	bl	800103c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6859      	ldr	r1, [r3, #4]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <I2C_IsErrorOccurred+0x1d4>)
 800139c:	400b      	ands	r3, r1
 800139e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2220      	movs	r2, #32
 80013b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80013c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	fe00e800 	.word	0xfe00e800

080013d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	817b      	strh	r3, [r7, #10]
 80013e2:	4613      	mov	r3, r2
 80013e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013e6:	897b      	ldrh	r3, [r7, #10]
 80013e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80013ec:	7a7b      	ldrb	r3, [r7, #9]
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001402:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	0d5b      	lsrs	r3, r3, #21
 800140e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <I2C_TransferConfig+0x60>)
 8001414:	430b      	orrs	r3, r1
 8001416:	43db      	mvns	r3, r3
 8001418:	ea02 0103 	and.w	r1, r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001426:	bf00      	nop
 8001428:	371c      	adds	r7, #28
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	03ff63ff 	.word	0x03ff63ff

08001438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b20      	cmp	r3, #32
 800144c:	d138      	bne.n	80014c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001458:	2302      	movs	r3, #2
 800145a:	e032      	b.n	80014c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2224      	movs	r2, #36	; 0x24
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800148a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0201 	orr.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2220      	movs	r2, #32
 80014b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	e000      	b.n	80014c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014c0:	2302      	movs	r3, #2
  }
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b20      	cmp	r3, #32
 80014e2:	d139      	bne.n	8001558 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e033      	b.n	800155a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2224      	movs	r2, #36	; 0x24
 80014fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001520:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	e000      	b.n	800155a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001558:	2302      	movs	r3, #2
  }
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	58000400 	.word	0x58000400

08001588 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	58000400 	.word	0x58000400

080015a4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80015a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015b6:	d101      	bne.n	80015bc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80015ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001616:	d101      	bne.n	800161c <LL_RCC_HSE_IsReady+0x18>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <LL_RCC_HSE_IsReady+0x1a>
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001658:	6013      	str	r3, [r2, #0]
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001676:	d101      	bne.n	800167c <LL_RCC_HSI_IsReady+0x18>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <LL_RCC_HSI_IsReady+0x1a>
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	061b      	lsls	r3, r3, #24
 800169e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d101      	bne.n	800170e <LL_RCC_HSI48_IsReady+0x18>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <LL_RCC_HSI48_IsReady+0x1a>
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d101      	bne.n	80017ba <LL_RCC_LSE_IsReady+0x18>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_RCC_LSE_IsReady+0x1a>
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80017ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800180e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b02      	cmp	r3, #2
 800181c:	d101      	bne.n	8001822 <LL_RCC_LSI1_IsReady+0x18>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <LL_RCC_LSI1_IsReady+0x1a>
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b08      	cmp	r3, #8
 8001884:	d101      	bne.n	800188a <LL_RCC_LSI2_IsReady+0x18>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <LL_RCC_LSI2_IsReady+0x1a>
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b2:	4313      	orrs	r3, r2
 80018b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6013      	str	r3, [r2, #0]
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b02      	cmp	r3, #2
 8001910:	d101      	bne.n	8001916 <LL_RCC_MSI_IsReady+0x16>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <LL_RCC_MSI_IsReady+0x18>
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800195a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2bb0      	cmp	r3, #176	; 0xb0
 8001960:	d901      	bls.n	8001966 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001962:	23b0      	movs	r3, #176	; 0xb0
 8001964:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 0203 	bic.w	r2, r3, #3
 80019b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a42:	f023 020f 	bic.w	r2, r3, #15
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b14:	6013      	str	r3, [r2, #0]
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b32:	d101      	bne.n	8001b38 <LL_RCC_PLL_IsReady+0x18>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <LL_RCC_PLL_IsReady+0x1a>
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0303 	and.w	r3, r3, #3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d101      	bne.n	8001bbe <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bde:	d101      	bne.n	8001be4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d101      	bne.n	8001c0a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c28:	d101      	bne.n	8001c2e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c4c:	d101      	bne.n	8001c52 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b08d      	sub	sp, #52	; 0x34
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e363      	b.n	800233a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 808d 	beq.w	8001d9a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c80:	f7ff fea1 	bl	80019c6 <LL_RCC_GetSysClkSource>
 8001c84:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c86:	f7ff ff82 	bl	8001b8e <LL_RCC_PLL_GetMainSource>
 8001c8a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_RCC_OscConfig+0x3e>
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	2b0c      	cmp	r3, #12
 8001c96:	d147      	bne.n	8001d28 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d144      	bne.n	8001d28 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e347      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001cae:	f7ff fe4c 	bl	800194a <LL_RCC_MSI_GetRange>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	429c      	cmp	r4, r3
 8001cb6:	d914      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fd03 	bl	80026c8 <RCC_SetFlashLatencyFromMSIRange>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e336      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fe26 	bl	8001922 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fe4a 	bl	8001974 <LL_RCC_MSI_SetCalibTrimming>
 8001ce0:	e013      	b.n	8001d0a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fe1b 	bl	8001922 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fe3f 	bl	8001974 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fce4 	bl	80026c8 <RCC_SetFlashLatencyFromMSIRange>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e317      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d0a:	f000 fcc9 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4aa4      	ldr	r2, [pc, #656]	; (8001fa4 <HAL_RCC_OscConfig+0x344>)
 8001d12:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d14:	4ba4      	ldr	r3, [pc, #656]	; (8001fa8 <HAL_RCC_OscConfig+0x348>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fd2d 	bl	8000778 <HAL_InitTick>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d039      	beq.n	8001d98 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e308      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01e      	beq.n	8001d6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d30:	f7ff fdc8 	bl	80018c4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d34:	f7fe fd6e 	bl	8000814 <HAL_GetTick>
 8001d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d3c:	f7fe fd6a 	bl	8000814 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e2f5      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d4e:	f7ff fdd7 	bl	8001900 <LL_RCC_MSI_IsReady>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f1      	beq.n	8001d3c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fde0 	bl	8001922 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fe04 	bl	8001974 <LL_RCC_MSI_SetCalibTrimming>
 8001d6c:	e015      	b.n	8001d9a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d6e:	f7ff fdb8 	bl	80018e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d72:	f7fe fd4f 	bl	8000814 <HAL_GetTick>
 8001d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d7a:	f7fe fd4b 	bl	8000814 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e2d6      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d8c:	f7ff fdb8 	bl	8001900 <LL_RCC_MSI_IsReady>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f1      	bne.n	8001d7a <HAL_RCC_OscConfig+0x11a>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d98:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d047      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da6:	f7ff fe0e 	bl	80019c6 <LL_RCC_GetSysClkSource>
 8001daa:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dac:	f7ff feef 	bl	8001b8e <LL_RCC_PLL_GetMainSource>
 8001db0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x164>
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d108      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d134      	bne.n	8001e36 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e2b4      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_OscConfig+0x180>
 8001dda:	f7ff fbf5 	bl	80015c8 <LL_RCC_HSE_Enable>
 8001dde:	e001      	b.n	8001de4 <HAL_RCC_OscConfig+0x184>
 8001de0:	f7ff fc01 	bl	80015e6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d012      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7fe fd12 	bl	8000814 <HAL_GetTick>
 8001df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7fe fd0e 	bl	8000814 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e299      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001e06:	f7ff fbfd 	bl	8001604 <LL_RCC_HSE_IsReady>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f1      	beq.n	8001df4 <HAL_RCC_OscConfig+0x194>
 8001e10:	e011      	b.n	8001e36 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe fcff 	bl	8000814 <HAL_GetTick>
 8001e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1a:	f7fe fcfb 	bl	8000814 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b64      	cmp	r3, #100	; 0x64
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e286      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e2c:	f7ff fbea 	bl	8001604 <LL_RCC_HSE_IsReady>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f1      	bne.n	8001e1a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d04c      	beq.n	8001edc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e42:	f7ff fdc0 	bl	80019c6 <LL_RCC_GetSysClkSource>
 8001e46:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e48:	f7ff fea1 	bl	8001b8e <LL_RCC_PLL_GetMainSource>
 8001e4c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_OscConfig+0x200>
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d10e      	bne.n	8001e78 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d10b      	bne.n	8001e78 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e266      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fc09 	bl	8001688 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e76:	e031      	b.n	8001edc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d019      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e80:	f7ff fbd2 	bl	8001628 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7fe fcc6 	bl	8000814 <HAL_GetTick>
 8001e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fcc2 	bl	8000814 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e24d      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e9e:	f7ff fbe1 	bl	8001664 <LL_RCC_HSI_IsReady>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f1      	beq.n	8001e8c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fbeb 	bl	8001688 <LL_RCC_HSI_SetCalibTrimming>
 8001eb2:	e013      	b.n	8001edc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb4:	f7ff fbc7 	bl	8001646 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fcac 	bl	8000814 <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fca8 	bl	8000814 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e233      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ed2:	f7ff fbc7 	bl	8001664 <LL_RCC_HSI_IsReady>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f1      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80a3 	beq.w	800203c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d076      	beq.n	8001fec <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d046      	beq.n	8001f98 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001f0a:	f7ff fc7e 	bl	800180a <LL_RCC_LSI1_IsReady>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d113      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001f14:	f7ff fc57 	bl	80017c6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f18:	f7fe fc7c 	bl	8000814 <HAL_GetTick>
 8001f1c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f20:	f7fe fc78 	bl	8000814 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e203      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f32:	f7ff fc6a 	bl	800180a <LL_RCC_LSI1_IsReady>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f1      	beq.n	8001f20 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001f3c:	f7ff fc77 	bl	800182e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7fe fc68 	bl	8000814 <HAL_GetTick>
 8001f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f48:	f7fe fc64 	bl	8000814 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1ef      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f5a:	f7ff fc8a 	bl	8001872 <LL_RCC_LSI2_IsReady>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f1      	beq.n	8001f48 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fc94 	bl	8001896 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001f6e:	f7ff fc3b 	bl	80017e8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7fe fc4f 	bl	8000814 <HAL_GetTick>
 8001f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f7a:	f7fe fc4b 	bl	8000814 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e1d6      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f8c:	f7ff fc3d 	bl	800180a <LL_RCC_LSI1_IsReady>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f1      	bne.n	8001f7a <HAL_RCC_OscConfig+0x31a>
 8001f96:	e051      	b.n	800203c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001f98:	f7ff fc15 	bl	80017c6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fc3a 	bl	8000814 <HAL_GetTick>
 8001fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001fa2:	e00c      	b.n	8001fbe <HAL_RCC_OscConfig+0x35e>
 8001fa4:	20000004 	.word	0x20000004
 8001fa8:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001fac:	f7fe fc32 	bl	8000814 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1bd      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001fbe:	f7ff fc24 	bl	800180a <LL_RCC_LSI1_IsReady>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f1      	beq.n	8001fac <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001fc8:	f7ff fc42 	bl	8001850 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fce:	f7fe fc21 	bl	8000814 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1ac      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fe0:	f7ff fc47 	bl	8001872 <LL_RCC_LSI2_IsReady>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f1      	bne.n	8001fce <HAL_RCC_OscConfig+0x36e>
 8001fea:	e027      	b.n	800203c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001fec:	f7ff fc30 	bl	8001850 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7fe fc10 	bl	8000814 <HAL_GetTick>
 8001ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ff8:	f7fe fc0c 	bl	8000814 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b03      	cmp	r3, #3
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e197      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800200a:	f7ff fc32 	bl	8001872 <LL_RCC_LSI2_IsReady>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f1      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002014:	f7ff fbe8 	bl	80017e8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7fe fbfc 	bl	8000814 <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002020:	f7fe fbf8 	bl	8000814 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e183      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002032:	f7ff fbea 	bl	800180a <LL_RCC_LSI1_IsReady>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f1      	bne.n	8002020 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d05b      	beq.n	8002100 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002048:	4ba7      	ldr	r3, [pc, #668]	; (80022e8 <HAL_RCC_OscConfig+0x688>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d114      	bne.n	800207e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002054:	f7ff fa88 	bl	8001568 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002058:	f7fe fbdc 	bl	8000814 <HAL_GetTick>
 800205c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002060:	f7fe fbd8 	bl	8000814 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e163      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002072:	4b9d      	ldr	r3, [pc, #628]	; (80022e8 <HAL_RCC_OscConfig+0x688>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d102      	bne.n	800208c <HAL_RCC_OscConfig+0x42c>
 8002086:	f7ff fb48 	bl	800171a <LL_RCC_LSE_Enable>
 800208a:	e00c      	b.n	80020a6 <HAL_RCC_OscConfig+0x446>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b05      	cmp	r3, #5
 8002092:	d104      	bne.n	800209e <HAL_RCC_OscConfig+0x43e>
 8002094:	f7ff fb63 	bl	800175e <LL_RCC_LSE_EnableBypass>
 8002098:	f7ff fb3f 	bl	800171a <LL_RCC_LSE_Enable>
 800209c:	e003      	b.n	80020a6 <HAL_RCC_OscConfig+0x446>
 800209e:	f7ff fb4d 	bl	800173c <LL_RCC_LSE_Disable>
 80020a2:	f7ff fb6d 	bl	8001780 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d014      	beq.n	80020d8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ae:	f7fe fbb1 	bl	8000814 <HAL_GetTick>
 80020b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7fe fbad 	bl	8000814 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e136      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80020cc:	f7ff fb69 	bl	80017a2 <LL_RCC_LSE_IsReady>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0ef      	beq.n	80020b6 <HAL_RCC_OscConfig+0x456>
 80020d6:	e013      	b.n	8002100 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d8:	f7fe fb9c 	bl	8000814 <HAL_GetTick>
 80020dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7fe fb98 	bl	8000814 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e121      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80020f6:	f7ff fb54 	bl	80017a2 <LL_RCC_LSE_IsReady>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ef      	bne.n	80020e0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d02c      	beq.n	8002166 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	d014      	beq.n	800213e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002114:	f7ff facd 	bl	80016b2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7fe fb7c 	bl	8000814 <HAL_GetTick>
 800211c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002120:	f7fe fb78 	bl	8000814 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e103      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002132:	f7ff fae0 	bl	80016f6 <LL_RCC_HSI48_IsReady>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f1      	beq.n	8002120 <HAL_RCC_OscConfig+0x4c0>
 800213c:	e013      	b.n	8002166 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800213e:	f7ff fac9 	bl	80016d4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7fe fb67 	bl	8000814 <HAL_GetTick>
 8002146:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800214a:	f7fe fb63 	bl	8000814 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0ee      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800215c:	f7ff facb 	bl	80016f6 <LL_RCC_HSI48_IsReady>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f1      	bne.n	800214a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80e4 	beq.w	8002338 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002170:	f7ff fc29 	bl	80019c6 <LL_RCC_GetSysClkSource>
 8002174:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	2b02      	cmp	r3, #2
 8002184:	f040 80b4 	bne.w	80022f0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0203 	and.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	429a      	cmp	r2, r3
 8002194:	d123      	bne.n	80021de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d11c      	bne.n	80021de <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d114      	bne.n	80021de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d10d      	bne.n	80021de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d05d      	beq.n	800229a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	d058      	beq.n	8002296 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0a1      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021f6:	f7ff fc84 	bl	8001b02 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021fa:	f7fe fb0b 	bl	8000814 <HAL_GetTick>
 80021fe:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7fe fb07 	bl	8000814 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e092      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ef      	bne.n	8002202 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_RCC_OscConfig+0x68c>)
 800222a:	4013      	ands	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002234:	4311      	orrs	r1, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800223a:	0212      	lsls	r2, r2, #8
 800223c:	4311      	orrs	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002242:	4311      	orrs	r1, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002248:	4311      	orrs	r1, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800224e:	430a      	orrs	r2, r1
 8002250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002254:	4313      	orrs	r3, r2
 8002256:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002258:	f7ff fc44 	bl	8001ae4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800225c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800226c:	f7fe fad2 	bl	8000814 <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe face 	bl	8000814 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e059      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ef      	beq.n	8002274 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002294:	e050      	b.n	8002338 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e04f      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d147      	bne.n	8002338 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022a8:	f7ff fc1c 	bl	8001ae4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022bc:	f7fe faaa 	bl	8000814 <HAL_GetTick>
 80022c0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe faa6 	bl	8000814 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e031      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ef      	beq.n	80022c4 <HAL_RCC_OscConfig+0x664>
 80022e4:	e028      	b.n	8002338 <HAL_RCC_OscConfig+0x6d8>
 80022e6:	bf00      	nop
 80022e8:	58000400 	.word	0x58000400
 80022ec:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d01e      	beq.n	8002334 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f6:	f7ff fc04 	bl	8001b02 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe fa8b 	bl	8000814 <HAL_GetTick>
 80022fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002302:	f7fe fa87 	bl	8000814 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e012      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1ef      	bne.n	8002302 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_OscConfig+0x6e4>)
 800232e:	4013      	ands	r3, r2
 8002330:	60cb      	str	r3, [r1, #12]
 8002332:	e001      	b.n	8002338 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3734      	adds	r7, #52	; 0x34
 800233e:	46bd      	mov	sp, r7
 8002340:	bd90      	pop	{r4, r7, pc}
 8002342:	bf00      	nop
 8002344:	eefefffc 	.word	0xeefefffc

08002348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e12d      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b98      	ldr	r3, [pc, #608]	; (80025c0 <HAL_RCC_ClockConfig+0x278>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d91b      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b95      	ldr	r3, [pc, #596]	; (80025c0 <HAL_RCC_ClockConfig+0x278>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 0207 	bic.w	r2, r3, #7
 8002372:	4993      	ldr	r1, [pc, #588]	; (80025c0 <HAL_RCC_ClockConfig+0x278>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800237a:	f7fe fa4b 	bl	8000814 <HAL_GetTick>
 800237e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002380:	e008      	b.n	8002394 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002382:	f7fe fa47 	bl	8000814 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e111      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002394:	4b8a      	ldr	r3, [pc, #552]	; (80025c0 <HAL_RCC_ClockConfig+0x278>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d1ef      	bne.n	8002382 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fb13 	bl	80019de <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023b8:	f7fe fa2c 	bl	8000814 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023c0:	f7fe fa28 	bl	8000814 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0f2      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023d2:	f7ff fbe8 	bl	8001ba6 <LL_RCC_IsActiveFlag_HPRE>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f1      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d016      	beq.n	8002416 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fb0a 	bl	8001a06 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023f2:	f7fe fa0f 	bl	8000814 <HAL_GetTick>
 80023f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023fa:	f7fe fa0b 	bl	8000814 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0d5      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800240c:	f7ff fbdd 	bl	8001bca <LL_RCC_IsActiveFlag_C2HPRE>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f1      	beq.n	80023fa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fb03 	bl	8001a32 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800242c:	f7fe f9f2 	bl	8000814 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002434:	f7fe f9ee 	bl	8000814 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e0b8      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002446:	f7ff fbd3 	bl	8001bf0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f1      	beq.n	8002434 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d016      	beq.n	800248a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fafd 	bl	8001a60 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002466:	f7fe f9d5 	bl	8000814 <HAL_GetTick>
 800246a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800246e:	f7fe f9d1 	bl	8000814 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e09b      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002480:	f7ff fbc9 	bl	8001c16 <LL_RCC_IsActiveFlag_PPRE1>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f1      	beq.n	800246e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d017      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff faf3 	bl	8001a88 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024a2:	f7fe f9b7 	bl	8000814 <HAL_GetTick>
 80024a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024aa:	f7fe f9b3 	bl	8000814 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e07d      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024bc:	f7ff fbbd 	bl	8001c3a <LL_RCC_IsActiveFlag_PPRE2>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f1      	beq.n	80024aa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d043      	beq.n	800255a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d106      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80024da:	f7ff f893 	bl	8001604 <LL_RCC_HSE_IsReady>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d11e      	bne.n	8002522 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e067      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d106      	bne.n	80024fe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80024f0:	f7ff fb16 	bl	8001b20 <LL_RCC_PLL_IsReady>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d113      	bne.n	8002522 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e05c      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002506:	f7ff f9fb 	bl	8001900 <LL_RCC_MSI_IsReady>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d108      	bne.n	8002522 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e051      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002514:	f7ff f8a6 	bl	8001664 <LL_RCC_HSI_IsReady>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e04a      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fa39 	bl	800199e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252c:	f7fe f972 	bl	8000814 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	e00a      	b.n	800254a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002534:	f7fe f96e 	bl	8000814 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e036      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	f7ff fa3c 	bl	80019c6 <LL_RCC_GetSysClkSource>
 800254e:	4602      	mov	r2, r0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	429a      	cmp	r2, r3
 8002558:	d1ec      	bne.n	8002534 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_RCC_ClockConfig+0x278>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d21b      	bcs.n	80025a0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_RCC_ClockConfig+0x278>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 0207 	bic.w	r2, r3, #7
 8002570:	4913      	ldr	r1, [pc, #76]	; (80025c0 <HAL_RCC_ClockConfig+0x278>)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4313      	orrs	r3, r2
 8002576:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002578:	f7fe f94c 	bl	8000814 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	e008      	b.n	8002592 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002580:	f7fe f948 	bl	8000814 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e012      	b.n	80025b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_ClockConfig+0x278>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d1ef      	bne.n	8002580 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025a0:	f000 f87e 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_RCC_ClockConfig+0x27c>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80025aa:	f7fe f93f 	bl	800082c <HAL_GetTickPrio>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe f8e1 	bl	8000778 <HAL_InitTick>
 80025b6:	4603      	mov	r3, r0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	58004000 	.word	0x58004000
 80025c4:	20000004 	.word	0x20000004

080025c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ce:	f7ff f9fa 	bl	80019c6 <LL_RCC_GetSysClkSource>
 80025d2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10a      	bne.n	80025f0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025da:	f7ff f9b6 	bl	800194a <LL_RCC_MSI_GetRange>
 80025de:	4603      	mov	r3, r0
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	4a2b      	ldr	r2, [pc, #172]	; (8002694 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	e04b      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025f6:	4b28      	ldr	r3, [pc, #160]	; (8002698 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e045      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d10a      	bne.n	8002618 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002602:	f7fe ffcf 	bl	80015a4 <LL_RCC_HSE_IsEnabledDiv2>
 8002606:	4603      	mov	r3, r0
 8002608:	2b01      	cmp	r3, #1
 800260a:	d102      	bne.n	8002612 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_RCC_GetSysClockFreq+0xd0>)
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e03a      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002612:	4b22      	ldr	r3, [pc, #136]	; (800269c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	e037      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002618:	f7ff fab9 	bl	8001b8e <LL_RCC_PLL_GetMainSource>
 800261c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d003      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x64>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b03      	cmp	r3, #3
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x6a>
 800262a:	e00d      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_RCC_GetSysClockFreq+0xd0>)
 800262e:	60bb      	str	r3, [r7, #8]
        break;
 8002630:	e015      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002632:	f7fe ffb7 	bl	80015a4 <LL_RCC_HSE_IsEnabledDiv2>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d102      	bne.n	8002642 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_RCC_GetSysClockFreq+0xd0>)
 800263e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002640:	e00d      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002644:	60bb      	str	r3, [r7, #8]
        break;
 8002646:	e00a      	b.n	800265e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002648:	f7ff f97f 	bl	800194a <LL_RCC_MSI_GetRange>
 800264c:	4603      	mov	r3, r0
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265a:	60bb      	str	r3, [r7, #8]
        break;
 800265c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800265e:	f7ff fa71 	bl	8001b44 <LL_RCC_PLL_GetN>
 8002662:	4602      	mov	r2, r0
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	fb03 f402 	mul.w	r4, r3, r2
 800266a:	f7ff fa84 	bl	8001b76 <LL_RCC_PLL_GetDivider>
 800266e:	4603      	mov	r3, r0
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	3301      	adds	r3, #1
 8002674:	fbb4 f4f3 	udiv	r4, r4, r3
 8002678:	f7ff fa71 	bl	8001b5e <LL_RCC_PLL_GetR>
 800267c:	4603      	mov	r3, r0
 800267e:	0f5b      	lsrs	r3, r3, #29
 8002680:	3301      	adds	r3, #1
 8002682:	fbb4 f3f3 	udiv	r3, r4, r3
 8002686:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002688:	68fb      	ldr	r3, [r7, #12]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bd90      	pop	{r4, r7, pc}
 8002692:	bf00      	nop
 8002694:	08003bf0 	.word	0x08003bf0
 8002698:	00f42400 	.word	0x00f42400
 800269c:	01e84800 	.word	0x01e84800

080026a0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b598      	push	{r3, r4, r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80026a4:	f7ff ff90 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 80026a8:	4604      	mov	r4, r0
 80026aa:	f7ff fa01 	bl	8001ab0 <LL_RCC_GetAHBPrescaler>
 80026ae:	4603      	mov	r3, r0
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x24>)
 80026b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026bc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd98      	pop	{r3, r4, r7, pc}
 80026c4:	08003bb0 	.word	0x08003bb0

080026c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2bb0      	cmp	r3, #176	; 0xb0
 80026d4:	d903      	bls.n	80026de <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e007      	b.n	80026ee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	4a11      	ldr	r2, [pc, #68]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80026ee:	f7ff f9eb 	bl	8001ac8 <LL_RCC_GetAHB4Prescaler>
 80026f2:	4603      	mov	r3, r0
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	0c9c      	lsrs	r4, r3, #18
 8002712:	f7fe ff39 	bl	8001588 <HAL_PWREx_GetVoltageRange>
 8002716:	4603      	mov	r3, r0
 8002718:	4619      	mov	r1, r3
 800271a:	4620      	mov	r0, r4
 800271c:	f000 f80c 	bl	8002738 <RCC_SetFlashLatency>
 8002720:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}
 800272a:	bf00      	nop
 800272c:	08003bf0 	.word	0x08003bf0
 8002730:	08003bb0 	.word	0x08003bb0
 8002734:	431bde83 	.word	0x431bde83

08002738 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b093      	sub	sp, #76	; 0x4c
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002742:	4b37      	ldr	r3, [pc, #220]	; (8002820 <RCC_SetFlashLatency+0xe8>)
 8002744:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800274a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800274e:	4a35      	ldr	r2, [pc, #212]	; (8002824 <RCC_SetFlashLatency+0xec>)
 8002750:	f107 031c 	add.w	r3, r7, #28
 8002754:	ca07      	ldmia	r2, {r0, r1, r2}
 8002756:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800275a:	4b33      	ldr	r3, [pc, #204]	; (8002828 <RCC_SetFlashLatency+0xf0>)
 800275c:	f107 040c 	add.w	r4, r7, #12
 8002760:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002762:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002766:	2300      	movs	r3, #0
 8002768:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002770:	d11a      	bne.n	80027a8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002772:	2300      	movs	r3, #0
 8002774:	643b      	str	r3, [r7, #64]	; 0x40
 8002776:	e013      	b.n	80027a0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	3348      	adds	r3, #72	; 0x48
 800277e:	443b      	add	r3, r7
 8002780:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	d807      	bhi.n	800279a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800278a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	3348      	adds	r3, #72	; 0x48
 8002790:	443b      	add	r3, r7
 8002792:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002796:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002798:	e020      	b.n	80027dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800279a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279c:	3301      	adds	r3, #1
 800279e:	643b      	str	r3, [r7, #64]	; 0x40
 80027a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d9e8      	bls.n	8002778 <RCC_SetFlashLatency+0x40>
 80027a6:	e019      	b.n	80027dc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ac:	e013      	b.n	80027d6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	3348      	adds	r3, #72	; 0x48
 80027b4:	443b      	add	r3, r7
 80027b6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d807      	bhi.n	80027d0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	3348      	adds	r3, #72	; 0x48
 80027c6:	443b      	add	r3, r7
 80027c8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027cc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80027ce:	e005      	b.n	80027dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d2:	3301      	adds	r3, #1
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d9e8      	bls.n	80027ae <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <RCC_SetFlashLatency+0xf4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 0207 	bic.w	r2, r3, #7
 80027e4:	4911      	ldr	r1, [pc, #68]	; (800282c <RCC_SetFlashLatency+0xf4>)
 80027e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027ec:	f7fe f812 	bl	8000814 <HAL_GetTick>
 80027f0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027f2:	e008      	b.n	8002806 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027f4:	f7fe f80e 	bl	8000814 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e007      	b.n	8002816 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <RCC_SetFlashLatency+0xf4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002810:	429a      	cmp	r2, r3
 8002812:	d1ef      	bne.n	80027f4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	374c      	adds	r7, #76	; 0x4c
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	bf00      	nop
 8002820:	08003b84 	.word	0x08003b84
 8002824:	08003b94 	.word	0x08003b94
 8002828:	08003ba0 	.word	0x08003ba0
 800282c:	58004000 	.word	0x58004000

08002830 <LL_RCC_LSE_IsEnabled>:
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <LL_RCC_LSE_IsEnabled+0x18>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <LL_RCC_LSE_IsEnabled+0x1a>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_RCC_LSE_IsReady>:
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b02      	cmp	r3, #2
 8002866:	d101      	bne.n	800286c <LL_RCC_LSE_IsReady+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_RCC_LSE_IsReady+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_RCC_SetRFWKPClockSource>:
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002888:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800288c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_RCC_SetSMPSClockSource>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4313      	orrs	r3, r2
 80028be:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_RCC_SetSMPSPrescaler>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_RCC_SetUSARTClockSource>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f023 0203 	bic.w	r2, r3, #3
 8002908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_RCC_SetLPUARTClockSource>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_RCC_SetI2CClockSource>:
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002958:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002964:	43db      	mvns	r3, r3
 8002966:	401a      	ands	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_RCC_SetLPTIMClockSource>:
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	041b      	lsls	r3, r3, #16
 800299c:	43db      	mvns	r3, r3
 800299e:	401a      	ands	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	041b      	lsls	r3, r3, #16
 80029a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_RCC_SetSAIClockSource>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_SetRNGClockSource>:
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80029fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_RCC_SetCLK48ClockSource>:
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_RCC_SetUSBClockSource>:
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ffe3 	bl	8002a12 <LL_RCC_SetCLK48ClockSource>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <LL_RCC_SetADCClockSource>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_RCC_SetRTCClockSource>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_RCC_GetRTCClockSource>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_RCC_ForceBackupDomainReset>:
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_RCC_PLLSAI1_Enable>:
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b1c:	6013      	str	r3, [r2, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_RCC_PLLSAI1_Disable>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_RCC_PLLSAI1_IsReady>:
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b58:	d101      	bne.n	8002b5e <LL_RCC_PLLSAI1_IsReady+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b088      	sub	sp, #32
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002b72:	2300      	movs	r3, #0
 8002b74:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b76:	2300      	movs	r3, #0
 8002b78:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d034      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b8e:	d021      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002b90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b94:	d81b      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b9a:	d01d      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002b9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ba0:	d815      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002baa:	d110      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bba:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002bbc:	e00d      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f947 	bl	8002e56 <RCCEx_PLLSAI1_ConfigNP>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002bcc:	e005      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	77fb      	strb	r3, [r7, #31]
        break;
 8002bd2:	e002      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002bd4:	bf00      	nop
 8002bd6:	e000      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bda:	7ffb      	ldrb	r3, [r7, #31]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fee8 	bl	80029ba <LL_RCC_SetSAIClockSource>
 8002bea:	e001      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	7ffb      	ldrb	r3, [r7, #31]
 8002bee:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d046      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002bfc:	f7ff ff56 	bl	8002aac <LL_RCC_GetRTCClockSource>
 8002c00:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d03c      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c0c:	f7fe fcac 	bl	8001568 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ff30 	bl	8002a80 <LL_RCC_SetRTCClockSource>
 8002c20:	e02e      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002c2c:	f7ff ff4b 	bl	8002ac6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002c30:	f7ff ff5a 	bl	8002ae8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002c4c:	f7ff fdf0 	bl	8002830 <LL_RCC_LSE_IsEnabled>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d114      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c56:	f7fd fddd 	bl	8000814 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c5c:	e00b      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7fd fdd9 	bl	8000814 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d902      	bls.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	77fb      	strb	r3, [r7, #31]
              break;
 8002c74:	e004      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c76:	f7ff fded 	bl	8002854 <LL_RCC_LSE_IsReady>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d1ee      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002c80:	7ffb      	ldrb	r3, [r7, #31]
 8002c82:	77bb      	strb	r3, [r7, #30]
 8002c84:	e001      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c86:	7ffb      	ldrb	r3, [r7, #31]
 8002c88:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fe2a 	bl	80028f4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fe35 	bl	8002920 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fe5d 	bl	8002986 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d004      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fe52 	bl	8002986 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fe2a 	bl	800294c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fe1f 	bl	800294c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d022      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fe8d 	bl	8002a3e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d3c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 f8dd 	bl	8002f0c <RCCEx_PLLSAI1_ConfigNQ>
 8002d52:	4603      	mov	r3, r0
 8002d54:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002d5c:	7ffb      	ldrb	r3, [r7, #31]
 8002d5e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d02b      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d74:	d008      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d7e:	d003      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fe2a 	bl	80029e6 <LL_RCC_SetRNGClockSource>
 8002d92:	e00a      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7ff fe21 	bl	80029e6 <LL_RCC_SetRNGClockSource>
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff fe34 	bl	8002a12 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d022      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fe3d 	bl	8002a54 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de2:	d107      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dfc:	d10b      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3304      	adds	r3, #4
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f8dd 	bl	8002fc2 <RCCEx_PLLSAI1_ConfigNR>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002e0c:	7ffb      	ldrb	r3, [r7, #31]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002e12:	7ffb      	ldrb	r3, [r7, #31]
 8002e14:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fd26 	bl	8002878 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d009      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fd45 	bl	80028cc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fd2c 	bl	80028a4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002e4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e62:	f7ff fe61 	bl	8002b28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e66:	f7fd fcd5 	bl	8000814 <HAL_GetTick>
 8002e6a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e6c:	e009      	b.n	8002e82 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e6e:	f7fd fcd1 	bl	8000814 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d902      	bls.n	8002e82 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e004      	b.n	8002e8c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e82:	f7ff fe60 	bl	8002b46 <LL_RCC_PLLSAI1_IsReady>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d137      	bne.n	8002f02 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002ec0:	f7ff fe23 	bl	8002b0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec4:	f7fd fca6 	bl	8000814 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002eca:	e009      	b.n	8002ee0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ecc:	f7fd fca2 	bl	8000814 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d902      	bls.n	8002ee0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ede:	e004      	b.n	8002eea <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ee0:	f7ff fe31 	bl	8002b46 <LL_RCC_PLLSAI1_IsReady>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d1f0      	bne.n	8002ecc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d108      	bne.n	8002f02 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002efe:	4313      	orrs	r3, r2
 8002f00:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f18:	f7ff fe06 	bl	8002b28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f1c:	f7fd fc7a 	bl	8000814 <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f22:	e009      	b.n	8002f38 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f24:	f7fd fc76 	bl	8000814 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	73fb      	strb	r3, [r7, #15]
      break;
 8002f36:	e004      	b.n	8002f42 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f38:	f7ff fe05 	bl	8002b46 <LL_RCC_PLLSAI1_IsReady>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d137      	bne.n	8002fb8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f72:	4313      	orrs	r3, r2
 8002f74:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f76:	f7ff fdc8 	bl	8002b0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7a:	f7fd fc4b 	bl	8000814 <HAL_GetTick>
 8002f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f80:	e009      	b.n	8002f96 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f82:	f7fd fc47 	bl	8000814 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d902      	bls.n	8002f96 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	73fb      	strb	r3, [r7, #15]
        break;
 8002f94:	e004      	b.n	8002fa0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f96:	f7ff fdd6 	bl	8002b46 <LL_RCC_PLLSAI1_IsReady>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d1f0      	bne.n	8002f82 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002fce:	f7ff fdab 	bl	8002b28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fd2:	f7fd fc1f 	bl	8000814 <HAL_GetTick>
 8002fd6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fd8:	e009      	b.n	8002fee <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fda:	f7fd fc1b 	bl	8000814 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d902      	bls.n	8002fee <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	73fb      	strb	r3, [r7, #15]
      break;
 8002fec:	e004      	b.n	8002ff8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fee:	f7ff fdaa 	bl	8002b46 <LL_RCC_PLLSAI1_IsReady>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f0      	bne.n	8002fda <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d137      	bne.n	800306e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003012:	4313      	orrs	r3, r2
 8003014:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003028:	4313      	orrs	r3, r2
 800302a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800302c:	f7ff fd6d 	bl	8002b0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003030:	f7fd fbf0 	bl	8000814 <HAL_GetTick>
 8003034:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003036:	e009      	b.n	800304c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003038:	f7fd fbec 	bl	8000814 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d902      	bls.n	800304c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	73fb      	strb	r3, [r7, #15]
        break;
 800304a:	e004      	b.n	8003056 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800304c:	f7ff fd7b 	bl	8002b46 <LL_RCC_PLLSAI1_IsReady>
 8003050:	4603      	mov	r3, r0
 8003052:	2b01      	cmp	r3, #1
 8003054:	d1f0      	bne.n	8003038 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d108      	bne.n	800306e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800305c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306a:	4313      	orrs	r3, r2
 800306c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
//#define SLAVE_ADDRESS_LCD 0x27
void lcd_send_cmd (char cmd)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af02      	add	r7, sp, #8
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	f023 030f 	bic.w	r3, r3, #15
 8003088:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	f043 030c 	orr.w	r3, r3, #12
 8003096:	b2db      	uxtb	r3, r3
 8003098:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	f043 0308 	orr.w	r3, r3, #8
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80030a4:	7bbb      	ldrb	r3, [r7, #14]
 80030a6:	f043 030c 	orr.w	r3, r3, #12
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80030ae:	7bbb      	ldrb	r3, [r7, #14]
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030b8:	f107 0208 	add.w	r2, r7, #8
 80030bc:	2364      	movs	r3, #100	; 0x64
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2304      	movs	r3, #4
 80030c2:	214e      	movs	r1, #78	; 0x4e
 80030c4:	4803      	ldr	r0, [pc, #12]	; (80030d4 <lcd_send_cmd+0x5c>)
 80030c6:	f7fd fec5 	bl	8000e54 <HAL_I2C_Master_Transmit>
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000090 	.word	0x20000090

080030d8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	f023 030f 	bic.w	r3, r3, #15
 80030e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	f043 030d 	orr.w	r3, r3, #13
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	f043 0309 	orr.w	r3, r3, #9
 8003100:	b2db      	uxtb	r3, r3
 8003102:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003104:	7bbb      	ldrb	r3, [r7, #14]
 8003106:	f043 030d 	orr.w	r3, r3, #13
 800310a:	b2db      	uxtb	r3, r3
 800310c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800310e:	7bbb      	ldrb	r3, [r7, #14]
 8003110:	f043 0309 	orr.w	r3, r3, #9
 8003114:	b2db      	uxtb	r3, r3
 8003116:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003118:	f107 0208 	add.w	r2, r7, #8
 800311c:	2364      	movs	r3, #100	; 0x64
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2304      	movs	r3, #4
 8003122:	214e      	movs	r1, #78	; 0x4e
 8003124:	4803      	ldr	r0, [pc, #12]	; (8003134 <lcd_send_data+0x5c>)
 8003126:	f7fd fe95 	bl	8000e54 <HAL_I2C_Master_Transmit>
}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000090 	.word	0x20000090

08003138 <lcd_clear>:

void lcd_clear (void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800313e:	2080      	movs	r0, #128	; 0x80
 8003140:	f7ff ff9a 	bl	8003078 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8003144:	2300      	movs	r3, #0
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	e005      	b.n	8003156 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800314a:	2020      	movs	r0, #32
 800314c:	f7ff ffc4 	bl	80030d8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3301      	adds	r3, #1
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b45      	cmp	r3, #69	; 0x45
 800315a:	ddf6      	ble.n	800314a <lcd_clear+0x12>
	}
	lcd_send_cmd (0x80);
 800315c:	2080      	movs	r0, #128	; 0x80
 800315e:	f7ff ff8b 	bl	8003078 <lcd_send_cmd>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800316e:	2032      	movs	r0, #50	; 0x32
 8003170:	f7fd fb68 	bl	8000844 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003174:	2030      	movs	r0, #48	; 0x30
 8003176:	f7ff ff7f 	bl	8003078 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800317a:	2005      	movs	r0, #5
 800317c:	f7fd fb62 	bl	8000844 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003180:	2030      	movs	r0, #48	; 0x30
 8003182:	f7ff ff79 	bl	8003078 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003186:	2001      	movs	r0, #1
 8003188:	f7fd fb5c 	bl	8000844 <HAL_Delay>
	lcd_send_cmd (0x30);
 800318c:	2030      	movs	r0, #48	; 0x30
 800318e:	f7ff ff73 	bl	8003078 <lcd_send_cmd>
	HAL_Delay(10);
 8003192:	200a      	movs	r0, #10
 8003194:	f7fd fb56 	bl	8000844 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8003198:	2020      	movs	r0, #32
 800319a:	f7ff ff6d 	bl	8003078 <lcd_send_cmd>
	HAL_Delay(10);
 800319e:	200a      	movs	r0, #10
 80031a0:	f7fd fb50 	bl	8000844 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80031a4:	2028      	movs	r0, #40	; 0x28
 80031a6:	f7ff ff67 	bl	8003078 <lcd_send_cmd>
	HAL_Delay(1);
 80031aa:	2001      	movs	r0, #1
 80031ac:	f7fd fb4a 	bl	8000844 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80031b0:	2008      	movs	r0, #8
 80031b2:	f7ff ff61 	bl	8003078 <lcd_send_cmd>
	HAL_Delay(1);
 80031b6:	2001      	movs	r0, #1
 80031b8:	f7fd fb44 	bl	8000844 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80031bc:	2001      	movs	r0, #1
 80031be:	f7ff ff5b 	bl	8003078 <lcd_send_cmd>
	HAL_Delay(1);
 80031c2:	2001      	movs	r0, #1
 80031c4:	f7fd fb3e 	bl	8000844 <HAL_Delay>
	HAL_Delay(1);
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7fd fb3b 	bl	8000844 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80031ce:	2006      	movs	r0, #6
 80031d0:	f7ff ff52 	bl	8003078 <lcd_send_cmd>
	HAL_Delay(1);
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7fd fb35 	bl	8000844 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80031da:	200c      	movs	r0, #12
 80031dc:	f7ff ff4c 	bl	8003078 <lcd_send_cmd>
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80031ec:	e006      	b.n	80031fc <lcd_send_string+0x18>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff6e 	bl	80030d8 <lcd_send_data>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f4      	bne.n	80031ee <lcd_send_string+0xa>
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <__errno>:
 8003210:	4b01      	ldr	r3, [pc, #4]	; (8003218 <__errno+0x8>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000010 	.word	0x20000010

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	4d0d      	ldr	r5, [pc, #52]	; (8003254 <__libc_init_array+0x38>)
 8003220:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003222:	1b64      	subs	r4, r4, r5
 8003224:	10a4      	asrs	r4, r4, #2
 8003226:	2600      	movs	r6, #0
 8003228:	42a6      	cmp	r6, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	4d0b      	ldr	r5, [pc, #44]	; (800325c <__libc_init_array+0x40>)
 800322e:	4c0c      	ldr	r4, [pc, #48]	; (8003260 <__libc_init_array+0x44>)
 8003230:	f000 fc8e 	bl	8003b50 <_init>
 8003234:	1b64      	subs	r4, r4, r5
 8003236:	10a4      	asrs	r4, r4, #2
 8003238:	2600      	movs	r6, #0
 800323a:	42a6      	cmp	r6, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f855 3b04 	ldr.w	r3, [r5], #4
 8003244:	4798      	blx	r3
 8003246:	3601      	adds	r6, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f855 3b04 	ldr.w	r3, [r5], #4
 800324e:	4798      	blx	r3
 8003250:	3601      	adds	r6, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	08003c64 	.word	0x08003c64
 8003258:	08003c64 	.word	0x08003c64
 800325c:	08003c64 	.word	0x08003c64
 8003260:	08003c68 	.word	0x08003c68

08003264 <memset>:
 8003264:	4402      	add	r2, r0
 8003266:	4603      	mov	r3, r0
 8003268:	4293      	cmp	r3, r2
 800326a:	d100      	bne.n	800326e <memset+0xa>
 800326c:	4770      	bx	lr
 800326e:	f803 1b01 	strb.w	r1, [r3], #1
 8003272:	e7f9      	b.n	8003268 <memset+0x4>

08003274 <siprintf>:
 8003274:	b40e      	push	{r1, r2, r3}
 8003276:	b500      	push	{lr}
 8003278:	b09c      	sub	sp, #112	; 0x70
 800327a:	ab1d      	add	r3, sp, #116	; 0x74
 800327c:	9002      	str	r0, [sp, #8]
 800327e:	9006      	str	r0, [sp, #24]
 8003280:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003284:	4809      	ldr	r0, [pc, #36]	; (80032ac <siprintf+0x38>)
 8003286:	9107      	str	r1, [sp, #28]
 8003288:	9104      	str	r1, [sp, #16]
 800328a:	4909      	ldr	r1, [pc, #36]	; (80032b0 <siprintf+0x3c>)
 800328c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003290:	9105      	str	r1, [sp, #20]
 8003292:	6800      	ldr	r0, [r0, #0]
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	a902      	add	r1, sp, #8
 8003298:	f000 f868 	bl	800336c <_svfiprintf_r>
 800329c:	9b02      	ldr	r3, [sp, #8]
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	b01c      	add	sp, #112	; 0x70
 80032a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80032a8:	b003      	add	sp, #12
 80032aa:	4770      	bx	lr
 80032ac:	20000010 	.word	0x20000010
 80032b0:	ffff0208 	.word	0xffff0208

080032b4 <__ssputs_r>:
 80032b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b8:	688e      	ldr	r6, [r1, #8]
 80032ba:	429e      	cmp	r6, r3
 80032bc:	4682      	mov	sl, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	4690      	mov	r8, r2
 80032c2:	461f      	mov	r7, r3
 80032c4:	d838      	bhi.n	8003338 <__ssputs_r+0x84>
 80032c6:	898a      	ldrh	r2, [r1, #12]
 80032c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032cc:	d032      	beq.n	8003334 <__ssputs_r+0x80>
 80032ce:	6825      	ldr	r5, [r4, #0]
 80032d0:	6909      	ldr	r1, [r1, #16]
 80032d2:	eba5 0901 	sub.w	r9, r5, r1
 80032d6:	6965      	ldr	r5, [r4, #20]
 80032d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032e0:	3301      	adds	r3, #1
 80032e2:	444b      	add	r3, r9
 80032e4:	106d      	asrs	r5, r5, #1
 80032e6:	429d      	cmp	r5, r3
 80032e8:	bf38      	it	cc
 80032ea:	461d      	movcc	r5, r3
 80032ec:	0553      	lsls	r3, r2, #21
 80032ee:	d531      	bpl.n	8003354 <__ssputs_r+0xa0>
 80032f0:	4629      	mov	r1, r5
 80032f2:	f000 fb63 	bl	80039bc <_malloc_r>
 80032f6:	4606      	mov	r6, r0
 80032f8:	b950      	cbnz	r0, 8003310 <__ssputs_r+0x5c>
 80032fa:	230c      	movs	r3, #12
 80032fc:	f8ca 3000 	str.w	r3, [sl]
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003306:	81a3      	strh	r3, [r4, #12]
 8003308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800330c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003310:	6921      	ldr	r1, [r4, #16]
 8003312:	464a      	mov	r2, r9
 8003314:	f000 fabe 	bl	8003894 <memcpy>
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800331e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	6126      	str	r6, [r4, #16]
 8003326:	6165      	str	r5, [r4, #20]
 8003328:	444e      	add	r6, r9
 800332a:	eba5 0509 	sub.w	r5, r5, r9
 800332e:	6026      	str	r6, [r4, #0]
 8003330:	60a5      	str	r5, [r4, #8]
 8003332:	463e      	mov	r6, r7
 8003334:	42be      	cmp	r6, r7
 8003336:	d900      	bls.n	800333a <__ssputs_r+0x86>
 8003338:	463e      	mov	r6, r7
 800333a:	6820      	ldr	r0, [r4, #0]
 800333c:	4632      	mov	r2, r6
 800333e:	4641      	mov	r1, r8
 8003340:	f000 fab6 	bl	80038b0 <memmove>
 8003344:	68a3      	ldr	r3, [r4, #8]
 8003346:	1b9b      	subs	r3, r3, r6
 8003348:	60a3      	str	r3, [r4, #8]
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	4433      	add	r3, r6
 800334e:	6023      	str	r3, [r4, #0]
 8003350:	2000      	movs	r0, #0
 8003352:	e7db      	b.n	800330c <__ssputs_r+0x58>
 8003354:	462a      	mov	r2, r5
 8003356:	f000 fba5 	bl	8003aa4 <_realloc_r>
 800335a:	4606      	mov	r6, r0
 800335c:	2800      	cmp	r0, #0
 800335e:	d1e1      	bne.n	8003324 <__ssputs_r+0x70>
 8003360:	6921      	ldr	r1, [r4, #16]
 8003362:	4650      	mov	r0, sl
 8003364:	f000 fabe 	bl	80038e4 <_free_r>
 8003368:	e7c7      	b.n	80032fa <__ssputs_r+0x46>
	...

0800336c <_svfiprintf_r>:
 800336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003370:	4698      	mov	r8, r3
 8003372:	898b      	ldrh	r3, [r1, #12]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	b09d      	sub	sp, #116	; 0x74
 8003378:	4607      	mov	r7, r0
 800337a:	460d      	mov	r5, r1
 800337c:	4614      	mov	r4, r2
 800337e:	d50e      	bpl.n	800339e <_svfiprintf_r+0x32>
 8003380:	690b      	ldr	r3, [r1, #16]
 8003382:	b963      	cbnz	r3, 800339e <_svfiprintf_r+0x32>
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	f000 fb19 	bl	80039bc <_malloc_r>
 800338a:	6028      	str	r0, [r5, #0]
 800338c:	6128      	str	r0, [r5, #16]
 800338e:	b920      	cbnz	r0, 800339a <_svfiprintf_r+0x2e>
 8003390:	230c      	movs	r3, #12
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003398:	e0d1      	b.n	800353e <_svfiprintf_r+0x1d2>
 800339a:	2340      	movs	r3, #64	; 0x40
 800339c:	616b      	str	r3, [r5, #20]
 800339e:	2300      	movs	r3, #0
 80033a0:	9309      	str	r3, [sp, #36]	; 0x24
 80033a2:	2320      	movs	r3, #32
 80033a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80033ac:	2330      	movs	r3, #48	; 0x30
 80033ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003558 <_svfiprintf_r+0x1ec>
 80033b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033b6:	f04f 0901 	mov.w	r9, #1
 80033ba:	4623      	mov	r3, r4
 80033bc:	469a      	mov	sl, r3
 80033be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033c2:	b10a      	cbz	r2, 80033c8 <_svfiprintf_r+0x5c>
 80033c4:	2a25      	cmp	r2, #37	; 0x25
 80033c6:	d1f9      	bne.n	80033bc <_svfiprintf_r+0x50>
 80033c8:	ebba 0b04 	subs.w	fp, sl, r4
 80033cc:	d00b      	beq.n	80033e6 <_svfiprintf_r+0x7a>
 80033ce:	465b      	mov	r3, fp
 80033d0:	4622      	mov	r2, r4
 80033d2:	4629      	mov	r1, r5
 80033d4:	4638      	mov	r0, r7
 80033d6:	f7ff ff6d 	bl	80032b4 <__ssputs_r>
 80033da:	3001      	adds	r0, #1
 80033dc:	f000 80aa 	beq.w	8003534 <_svfiprintf_r+0x1c8>
 80033e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033e2:	445a      	add	r2, fp
 80033e4:	9209      	str	r2, [sp, #36]	; 0x24
 80033e6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80a2 	beq.w	8003534 <_svfiprintf_r+0x1c8>
 80033f0:	2300      	movs	r3, #0
 80033f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033fa:	f10a 0a01 	add.w	sl, sl, #1
 80033fe:	9304      	str	r3, [sp, #16]
 8003400:	9307      	str	r3, [sp, #28]
 8003402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003406:	931a      	str	r3, [sp, #104]	; 0x68
 8003408:	4654      	mov	r4, sl
 800340a:	2205      	movs	r2, #5
 800340c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003410:	4851      	ldr	r0, [pc, #324]	; (8003558 <_svfiprintf_r+0x1ec>)
 8003412:	f7fc feb5 	bl	8000180 <memchr>
 8003416:	9a04      	ldr	r2, [sp, #16]
 8003418:	b9d8      	cbnz	r0, 8003452 <_svfiprintf_r+0xe6>
 800341a:	06d0      	lsls	r0, r2, #27
 800341c:	bf44      	itt	mi
 800341e:	2320      	movmi	r3, #32
 8003420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003424:	0711      	lsls	r1, r2, #28
 8003426:	bf44      	itt	mi
 8003428:	232b      	movmi	r3, #43	; 0x2b
 800342a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800342e:	f89a 3000 	ldrb.w	r3, [sl]
 8003432:	2b2a      	cmp	r3, #42	; 0x2a
 8003434:	d015      	beq.n	8003462 <_svfiprintf_r+0xf6>
 8003436:	9a07      	ldr	r2, [sp, #28]
 8003438:	4654      	mov	r4, sl
 800343a:	2000      	movs	r0, #0
 800343c:	f04f 0c0a 	mov.w	ip, #10
 8003440:	4621      	mov	r1, r4
 8003442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003446:	3b30      	subs	r3, #48	; 0x30
 8003448:	2b09      	cmp	r3, #9
 800344a:	d94e      	bls.n	80034ea <_svfiprintf_r+0x17e>
 800344c:	b1b0      	cbz	r0, 800347c <_svfiprintf_r+0x110>
 800344e:	9207      	str	r2, [sp, #28]
 8003450:	e014      	b.n	800347c <_svfiprintf_r+0x110>
 8003452:	eba0 0308 	sub.w	r3, r0, r8
 8003456:	fa09 f303 	lsl.w	r3, r9, r3
 800345a:	4313      	orrs	r3, r2
 800345c:	9304      	str	r3, [sp, #16]
 800345e:	46a2      	mov	sl, r4
 8003460:	e7d2      	b.n	8003408 <_svfiprintf_r+0x9c>
 8003462:	9b03      	ldr	r3, [sp, #12]
 8003464:	1d19      	adds	r1, r3, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	9103      	str	r1, [sp, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	bfbb      	ittet	lt
 800346e:	425b      	neglt	r3, r3
 8003470:	f042 0202 	orrlt.w	r2, r2, #2
 8003474:	9307      	strge	r3, [sp, #28]
 8003476:	9307      	strlt	r3, [sp, #28]
 8003478:	bfb8      	it	lt
 800347a:	9204      	strlt	r2, [sp, #16]
 800347c:	7823      	ldrb	r3, [r4, #0]
 800347e:	2b2e      	cmp	r3, #46	; 0x2e
 8003480:	d10c      	bne.n	800349c <_svfiprintf_r+0x130>
 8003482:	7863      	ldrb	r3, [r4, #1]
 8003484:	2b2a      	cmp	r3, #42	; 0x2a
 8003486:	d135      	bne.n	80034f4 <_svfiprintf_r+0x188>
 8003488:	9b03      	ldr	r3, [sp, #12]
 800348a:	1d1a      	adds	r2, r3, #4
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	9203      	str	r2, [sp, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	bfb8      	it	lt
 8003494:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003498:	3402      	adds	r4, #2
 800349a:	9305      	str	r3, [sp, #20]
 800349c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003568 <_svfiprintf_r+0x1fc>
 80034a0:	7821      	ldrb	r1, [r4, #0]
 80034a2:	2203      	movs	r2, #3
 80034a4:	4650      	mov	r0, sl
 80034a6:	f7fc fe6b 	bl	8000180 <memchr>
 80034aa:	b140      	cbz	r0, 80034be <_svfiprintf_r+0x152>
 80034ac:	2340      	movs	r3, #64	; 0x40
 80034ae:	eba0 000a 	sub.w	r0, r0, sl
 80034b2:	fa03 f000 	lsl.w	r0, r3, r0
 80034b6:	9b04      	ldr	r3, [sp, #16]
 80034b8:	4303      	orrs	r3, r0
 80034ba:	3401      	adds	r4, #1
 80034bc:	9304      	str	r3, [sp, #16]
 80034be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c2:	4826      	ldr	r0, [pc, #152]	; (800355c <_svfiprintf_r+0x1f0>)
 80034c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034c8:	2206      	movs	r2, #6
 80034ca:	f7fc fe59 	bl	8000180 <memchr>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d038      	beq.n	8003544 <_svfiprintf_r+0x1d8>
 80034d2:	4b23      	ldr	r3, [pc, #140]	; (8003560 <_svfiprintf_r+0x1f4>)
 80034d4:	bb1b      	cbnz	r3, 800351e <_svfiprintf_r+0x1b2>
 80034d6:	9b03      	ldr	r3, [sp, #12]
 80034d8:	3307      	adds	r3, #7
 80034da:	f023 0307 	bic.w	r3, r3, #7
 80034de:	3308      	adds	r3, #8
 80034e0:	9303      	str	r3, [sp, #12]
 80034e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e4:	4433      	add	r3, r6
 80034e6:	9309      	str	r3, [sp, #36]	; 0x24
 80034e8:	e767      	b.n	80033ba <_svfiprintf_r+0x4e>
 80034ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ee:	460c      	mov	r4, r1
 80034f0:	2001      	movs	r0, #1
 80034f2:	e7a5      	b.n	8003440 <_svfiprintf_r+0xd4>
 80034f4:	2300      	movs	r3, #0
 80034f6:	3401      	adds	r4, #1
 80034f8:	9305      	str	r3, [sp, #20]
 80034fa:	4619      	mov	r1, r3
 80034fc:	f04f 0c0a 	mov.w	ip, #10
 8003500:	4620      	mov	r0, r4
 8003502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003506:	3a30      	subs	r2, #48	; 0x30
 8003508:	2a09      	cmp	r2, #9
 800350a:	d903      	bls.n	8003514 <_svfiprintf_r+0x1a8>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0c5      	beq.n	800349c <_svfiprintf_r+0x130>
 8003510:	9105      	str	r1, [sp, #20]
 8003512:	e7c3      	b.n	800349c <_svfiprintf_r+0x130>
 8003514:	fb0c 2101 	mla	r1, ip, r1, r2
 8003518:	4604      	mov	r4, r0
 800351a:	2301      	movs	r3, #1
 800351c:	e7f0      	b.n	8003500 <_svfiprintf_r+0x194>
 800351e:	ab03      	add	r3, sp, #12
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	462a      	mov	r2, r5
 8003524:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <_svfiprintf_r+0x1f8>)
 8003526:	a904      	add	r1, sp, #16
 8003528:	4638      	mov	r0, r7
 800352a:	f3af 8000 	nop.w
 800352e:	1c42      	adds	r2, r0, #1
 8003530:	4606      	mov	r6, r0
 8003532:	d1d6      	bne.n	80034e2 <_svfiprintf_r+0x176>
 8003534:	89ab      	ldrh	r3, [r5, #12]
 8003536:	065b      	lsls	r3, r3, #25
 8003538:	f53f af2c 	bmi.w	8003394 <_svfiprintf_r+0x28>
 800353c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800353e:	b01d      	add	sp, #116	; 0x74
 8003540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003544:	ab03      	add	r3, sp, #12
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	462a      	mov	r2, r5
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <_svfiprintf_r+0x1f8>)
 800354c:	a904      	add	r1, sp, #16
 800354e:	4638      	mov	r0, r7
 8003550:	f000 f87a 	bl	8003648 <_printf_i>
 8003554:	e7eb      	b.n	800352e <_svfiprintf_r+0x1c2>
 8003556:	bf00      	nop
 8003558:	08003c30 	.word	0x08003c30
 800355c:	08003c3a 	.word	0x08003c3a
 8003560:	00000000 	.word	0x00000000
 8003564:	080032b5 	.word	0x080032b5
 8003568:	08003c36 	.word	0x08003c36

0800356c <_printf_common>:
 800356c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003570:	4616      	mov	r6, r2
 8003572:	4699      	mov	r9, r3
 8003574:	688a      	ldr	r2, [r1, #8]
 8003576:	690b      	ldr	r3, [r1, #16]
 8003578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800357c:	4293      	cmp	r3, r2
 800357e:	bfb8      	it	lt
 8003580:	4613      	movlt	r3, r2
 8003582:	6033      	str	r3, [r6, #0]
 8003584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003588:	4607      	mov	r7, r0
 800358a:	460c      	mov	r4, r1
 800358c:	b10a      	cbz	r2, 8003592 <_printf_common+0x26>
 800358e:	3301      	adds	r3, #1
 8003590:	6033      	str	r3, [r6, #0]
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	0699      	lsls	r1, r3, #26
 8003596:	bf42      	ittt	mi
 8003598:	6833      	ldrmi	r3, [r6, #0]
 800359a:	3302      	addmi	r3, #2
 800359c:	6033      	strmi	r3, [r6, #0]
 800359e:	6825      	ldr	r5, [r4, #0]
 80035a0:	f015 0506 	ands.w	r5, r5, #6
 80035a4:	d106      	bne.n	80035b4 <_printf_common+0x48>
 80035a6:	f104 0a19 	add.w	sl, r4, #25
 80035aa:	68e3      	ldr	r3, [r4, #12]
 80035ac:	6832      	ldr	r2, [r6, #0]
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	42ab      	cmp	r3, r5
 80035b2:	dc26      	bgt.n	8003602 <_printf_common+0x96>
 80035b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035b8:	1e13      	subs	r3, r2, #0
 80035ba:	6822      	ldr	r2, [r4, #0]
 80035bc:	bf18      	it	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	0692      	lsls	r2, r2, #26
 80035c2:	d42b      	bmi.n	800361c <_printf_common+0xb0>
 80035c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035c8:	4649      	mov	r1, r9
 80035ca:	4638      	mov	r0, r7
 80035cc:	47c0      	blx	r8
 80035ce:	3001      	adds	r0, #1
 80035d0:	d01e      	beq.n	8003610 <_printf_common+0xa4>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	68e5      	ldr	r5, [r4, #12]
 80035d6:	6832      	ldr	r2, [r6, #0]
 80035d8:	f003 0306 	and.w	r3, r3, #6
 80035dc:	2b04      	cmp	r3, #4
 80035de:	bf08      	it	eq
 80035e0:	1aad      	subeq	r5, r5, r2
 80035e2:	68a3      	ldr	r3, [r4, #8]
 80035e4:	6922      	ldr	r2, [r4, #16]
 80035e6:	bf0c      	ite	eq
 80035e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ec:	2500      	movne	r5, #0
 80035ee:	4293      	cmp	r3, r2
 80035f0:	bfc4      	itt	gt
 80035f2:	1a9b      	subgt	r3, r3, r2
 80035f4:	18ed      	addgt	r5, r5, r3
 80035f6:	2600      	movs	r6, #0
 80035f8:	341a      	adds	r4, #26
 80035fa:	42b5      	cmp	r5, r6
 80035fc:	d11a      	bne.n	8003634 <_printf_common+0xc8>
 80035fe:	2000      	movs	r0, #0
 8003600:	e008      	b.n	8003614 <_printf_common+0xa8>
 8003602:	2301      	movs	r3, #1
 8003604:	4652      	mov	r2, sl
 8003606:	4649      	mov	r1, r9
 8003608:	4638      	mov	r0, r7
 800360a:	47c0      	blx	r8
 800360c:	3001      	adds	r0, #1
 800360e:	d103      	bne.n	8003618 <_printf_common+0xac>
 8003610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003618:	3501      	adds	r5, #1
 800361a:	e7c6      	b.n	80035aa <_printf_common+0x3e>
 800361c:	18e1      	adds	r1, r4, r3
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	2030      	movs	r0, #48	; 0x30
 8003622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003626:	4422      	add	r2, r4
 8003628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800362c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003630:	3302      	adds	r3, #2
 8003632:	e7c7      	b.n	80035c4 <_printf_common+0x58>
 8003634:	2301      	movs	r3, #1
 8003636:	4622      	mov	r2, r4
 8003638:	4649      	mov	r1, r9
 800363a:	4638      	mov	r0, r7
 800363c:	47c0      	blx	r8
 800363e:	3001      	adds	r0, #1
 8003640:	d0e6      	beq.n	8003610 <_printf_common+0xa4>
 8003642:	3601      	adds	r6, #1
 8003644:	e7d9      	b.n	80035fa <_printf_common+0x8e>
	...

08003648 <_printf_i>:
 8003648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	7e0f      	ldrb	r7, [r1, #24]
 800364e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003650:	2f78      	cmp	r7, #120	; 0x78
 8003652:	4691      	mov	r9, r2
 8003654:	4680      	mov	r8, r0
 8003656:	460c      	mov	r4, r1
 8003658:	469a      	mov	sl, r3
 800365a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800365e:	d807      	bhi.n	8003670 <_printf_i+0x28>
 8003660:	2f62      	cmp	r7, #98	; 0x62
 8003662:	d80a      	bhi.n	800367a <_printf_i+0x32>
 8003664:	2f00      	cmp	r7, #0
 8003666:	f000 80d8 	beq.w	800381a <_printf_i+0x1d2>
 800366a:	2f58      	cmp	r7, #88	; 0x58
 800366c:	f000 80a3 	beq.w	80037b6 <_printf_i+0x16e>
 8003670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003678:	e03a      	b.n	80036f0 <_printf_i+0xa8>
 800367a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800367e:	2b15      	cmp	r3, #21
 8003680:	d8f6      	bhi.n	8003670 <_printf_i+0x28>
 8003682:	a101      	add	r1, pc, #4	; (adr r1, 8003688 <_printf_i+0x40>)
 8003684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003688:	080036e1 	.word	0x080036e1
 800368c:	080036f5 	.word	0x080036f5
 8003690:	08003671 	.word	0x08003671
 8003694:	08003671 	.word	0x08003671
 8003698:	08003671 	.word	0x08003671
 800369c:	08003671 	.word	0x08003671
 80036a0:	080036f5 	.word	0x080036f5
 80036a4:	08003671 	.word	0x08003671
 80036a8:	08003671 	.word	0x08003671
 80036ac:	08003671 	.word	0x08003671
 80036b0:	08003671 	.word	0x08003671
 80036b4:	08003801 	.word	0x08003801
 80036b8:	08003725 	.word	0x08003725
 80036bc:	080037e3 	.word	0x080037e3
 80036c0:	08003671 	.word	0x08003671
 80036c4:	08003671 	.word	0x08003671
 80036c8:	08003823 	.word	0x08003823
 80036cc:	08003671 	.word	0x08003671
 80036d0:	08003725 	.word	0x08003725
 80036d4:	08003671 	.word	0x08003671
 80036d8:	08003671 	.word	0x08003671
 80036dc:	080037eb 	.word	0x080037eb
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	602a      	str	r2, [r5, #0]
 80036e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0a3      	b.n	800383c <_printf_i+0x1f4>
 80036f4:	6820      	ldr	r0, [r4, #0]
 80036f6:	6829      	ldr	r1, [r5, #0]
 80036f8:	0606      	lsls	r6, r0, #24
 80036fa:	f101 0304 	add.w	r3, r1, #4
 80036fe:	d50a      	bpl.n	8003716 <_printf_i+0xce>
 8003700:	680e      	ldr	r6, [r1, #0]
 8003702:	602b      	str	r3, [r5, #0]
 8003704:	2e00      	cmp	r6, #0
 8003706:	da03      	bge.n	8003710 <_printf_i+0xc8>
 8003708:	232d      	movs	r3, #45	; 0x2d
 800370a:	4276      	negs	r6, r6
 800370c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003710:	485e      	ldr	r0, [pc, #376]	; (800388c <_printf_i+0x244>)
 8003712:	230a      	movs	r3, #10
 8003714:	e019      	b.n	800374a <_printf_i+0x102>
 8003716:	680e      	ldr	r6, [r1, #0]
 8003718:	602b      	str	r3, [r5, #0]
 800371a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800371e:	bf18      	it	ne
 8003720:	b236      	sxthne	r6, r6
 8003722:	e7ef      	b.n	8003704 <_printf_i+0xbc>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	6820      	ldr	r0, [r4, #0]
 8003728:	1d19      	adds	r1, r3, #4
 800372a:	6029      	str	r1, [r5, #0]
 800372c:	0601      	lsls	r1, r0, #24
 800372e:	d501      	bpl.n	8003734 <_printf_i+0xec>
 8003730:	681e      	ldr	r6, [r3, #0]
 8003732:	e002      	b.n	800373a <_printf_i+0xf2>
 8003734:	0646      	lsls	r6, r0, #25
 8003736:	d5fb      	bpl.n	8003730 <_printf_i+0xe8>
 8003738:	881e      	ldrh	r6, [r3, #0]
 800373a:	4854      	ldr	r0, [pc, #336]	; (800388c <_printf_i+0x244>)
 800373c:	2f6f      	cmp	r7, #111	; 0x6f
 800373e:	bf0c      	ite	eq
 8003740:	2308      	moveq	r3, #8
 8003742:	230a      	movne	r3, #10
 8003744:	2100      	movs	r1, #0
 8003746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800374a:	6865      	ldr	r5, [r4, #4]
 800374c:	60a5      	str	r5, [r4, #8]
 800374e:	2d00      	cmp	r5, #0
 8003750:	bfa2      	ittt	ge
 8003752:	6821      	ldrge	r1, [r4, #0]
 8003754:	f021 0104 	bicge.w	r1, r1, #4
 8003758:	6021      	strge	r1, [r4, #0]
 800375a:	b90e      	cbnz	r6, 8003760 <_printf_i+0x118>
 800375c:	2d00      	cmp	r5, #0
 800375e:	d04d      	beq.n	80037fc <_printf_i+0x1b4>
 8003760:	4615      	mov	r5, r2
 8003762:	fbb6 f1f3 	udiv	r1, r6, r3
 8003766:	fb03 6711 	mls	r7, r3, r1, r6
 800376a:	5dc7      	ldrb	r7, [r0, r7]
 800376c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003770:	4637      	mov	r7, r6
 8003772:	42bb      	cmp	r3, r7
 8003774:	460e      	mov	r6, r1
 8003776:	d9f4      	bls.n	8003762 <_printf_i+0x11a>
 8003778:	2b08      	cmp	r3, #8
 800377a:	d10b      	bne.n	8003794 <_printf_i+0x14c>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	07de      	lsls	r6, r3, #31
 8003780:	d508      	bpl.n	8003794 <_printf_i+0x14c>
 8003782:	6923      	ldr	r3, [r4, #16]
 8003784:	6861      	ldr	r1, [r4, #4]
 8003786:	4299      	cmp	r1, r3
 8003788:	bfde      	ittt	le
 800378a:	2330      	movle	r3, #48	; 0x30
 800378c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003790:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003794:	1b52      	subs	r2, r2, r5
 8003796:	6122      	str	r2, [r4, #16]
 8003798:	f8cd a000 	str.w	sl, [sp]
 800379c:	464b      	mov	r3, r9
 800379e:	aa03      	add	r2, sp, #12
 80037a0:	4621      	mov	r1, r4
 80037a2:	4640      	mov	r0, r8
 80037a4:	f7ff fee2 	bl	800356c <_printf_common>
 80037a8:	3001      	adds	r0, #1
 80037aa:	d14c      	bne.n	8003846 <_printf_i+0x1fe>
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b0:	b004      	add	sp, #16
 80037b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b6:	4835      	ldr	r0, [pc, #212]	; (800388c <_printf_i+0x244>)
 80037b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037bc:	6829      	ldr	r1, [r5, #0]
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80037c4:	6029      	str	r1, [r5, #0]
 80037c6:	061d      	lsls	r5, r3, #24
 80037c8:	d514      	bpl.n	80037f4 <_printf_i+0x1ac>
 80037ca:	07df      	lsls	r7, r3, #31
 80037cc:	bf44      	itt	mi
 80037ce:	f043 0320 	orrmi.w	r3, r3, #32
 80037d2:	6023      	strmi	r3, [r4, #0]
 80037d4:	b91e      	cbnz	r6, 80037de <_printf_i+0x196>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	f023 0320 	bic.w	r3, r3, #32
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	2310      	movs	r3, #16
 80037e0:	e7b0      	b.n	8003744 <_printf_i+0xfc>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	f043 0320 	orr.w	r3, r3, #32
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	2378      	movs	r3, #120	; 0x78
 80037ec:	4828      	ldr	r0, [pc, #160]	; (8003890 <_printf_i+0x248>)
 80037ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037f2:	e7e3      	b.n	80037bc <_printf_i+0x174>
 80037f4:	0659      	lsls	r1, r3, #25
 80037f6:	bf48      	it	mi
 80037f8:	b2b6      	uxthmi	r6, r6
 80037fa:	e7e6      	b.n	80037ca <_printf_i+0x182>
 80037fc:	4615      	mov	r5, r2
 80037fe:	e7bb      	b.n	8003778 <_printf_i+0x130>
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	6826      	ldr	r6, [r4, #0]
 8003804:	6961      	ldr	r1, [r4, #20]
 8003806:	1d18      	adds	r0, r3, #4
 8003808:	6028      	str	r0, [r5, #0]
 800380a:	0635      	lsls	r5, r6, #24
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	d501      	bpl.n	8003814 <_printf_i+0x1cc>
 8003810:	6019      	str	r1, [r3, #0]
 8003812:	e002      	b.n	800381a <_printf_i+0x1d2>
 8003814:	0670      	lsls	r0, r6, #25
 8003816:	d5fb      	bpl.n	8003810 <_printf_i+0x1c8>
 8003818:	8019      	strh	r1, [r3, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	6123      	str	r3, [r4, #16]
 800381e:	4615      	mov	r5, r2
 8003820:	e7ba      	b.n	8003798 <_printf_i+0x150>
 8003822:	682b      	ldr	r3, [r5, #0]
 8003824:	1d1a      	adds	r2, r3, #4
 8003826:	602a      	str	r2, [r5, #0]
 8003828:	681d      	ldr	r5, [r3, #0]
 800382a:	6862      	ldr	r2, [r4, #4]
 800382c:	2100      	movs	r1, #0
 800382e:	4628      	mov	r0, r5
 8003830:	f7fc fca6 	bl	8000180 <memchr>
 8003834:	b108      	cbz	r0, 800383a <_printf_i+0x1f2>
 8003836:	1b40      	subs	r0, r0, r5
 8003838:	6060      	str	r0, [r4, #4]
 800383a:	6863      	ldr	r3, [r4, #4]
 800383c:	6123      	str	r3, [r4, #16]
 800383e:	2300      	movs	r3, #0
 8003840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003844:	e7a8      	b.n	8003798 <_printf_i+0x150>
 8003846:	6923      	ldr	r3, [r4, #16]
 8003848:	462a      	mov	r2, r5
 800384a:	4649      	mov	r1, r9
 800384c:	4640      	mov	r0, r8
 800384e:	47d0      	blx	sl
 8003850:	3001      	adds	r0, #1
 8003852:	d0ab      	beq.n	80037ac <_printf_i+0x164>
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	079b      	lsls	r3, r3, #30
 8003858:	d413      	bmi.n	8003882 <_printf_i+0x23a>
 800385a:	68e0      	ldr	r0, [r4, #12]
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	4298      	cmp	r0, r3
 8003860:	bfb8      	it	lt
 8003862:	4618      	movlt	r0, r3
 8003864:	e7a4      	b.n	80037b0 <_printf_i+0x168>
 8003866:	2301      	movs	r3, #1
 8003868:	4632      	mov	r2, r6
 800386a:	4649      	mov	r1, r9
 800386c:	4640      	mov	r0, r8
 800386e:	47d0      	blx	sl
 8003870:	3001      	adds	r0, #1
 8003872:	d09b      	beq.n	80037ac <_printf_i+0x164>
 8003874:	3501      	adds	r5, #1
 8003876:	68e3      	ldr	r3, [r4, #12]
 8003878:	9903      	ldr	r1, [sp, #12]
 800387a:	1a5b      	subs	r3, r3, r1
 800387c:	42ab      	cmp	r3, r5
 800387e:	dcf2      	bgt.n	8003866 <_printf_i+0x21e>
 8003880:	e7eb      	b.n	800385a <_printf_i+0x212>
 8003882:	2500      	movs	r5, #0
 8003884:	f104 0619 	add.w	r6, r4, #25
 8003888:	e7f5      	b.n	8003876 <_printf_i+0x22e>
 800388a:	bf00      	nop
 800388c:	08003c41 	.word	0x08003c41
 8003890:	08003c52 	.word	0x08003c52

08003894 <memcpy>:
 8003894:	440a      	add	r2, r1
 8003896:	4291      	cmp	r1, r2
 8003898:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800389c:	d100      	bne.n	80038a0 <memcpy+0xc>
 800389e:	4770      	bx	lr
 80038a0:	b510      	push	{r4, lr}
 80038a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038aa:	4291      	cmp	r1, r2
 80038ac:	d1f9      	bne.n	80038a2 <memcpy+0xe>
 80038ae:	bd10      	pop	{r4, pc}

080038b0 <memmove>:
 80038b0:	4288      	cmp	r0, r1
 80038b2:	b510      	push	{r4, lr}
 80038b4:	eb01 0402 	add.w	r4, r1, r2
 80038b8:	d902      	bls.n	80038c0 <memmove+0x10>
 80038ba:	4284      	cmp	r4, r0
 80038bc:	4623      	mov	r3, r4
 80038be:	d807      	bhi.n	80038d0 <memmove+0x20>
 80038c0:	1e43      	subs	r3, r0, #1
 80038c2:	42a1      	cmp	r1, r4
 80038c4:	d008      	beq.n	80038d8 <memmove+0x28>
 80038c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038ce:	e7f8      	b.n	80038c2 <memmove+0x12>
 80038d0:	4402      	add	r2, r0
 80038d2:	4601      	mov	r1, r0
 80038d4:	428a      	cmp	r2, r1
 80038d6:	d100      	bne.n	80038da <memmove+0x2a>
 80038d8:	bd10      	pop	{r4, pc}
 80038da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038e2:	e7f7      	b.n	80038d4 <memmove+0x24>

080038e4 <_free_r>:
 80038e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038e6:	2900      	cmp	r1, #0
 80038e8:	d044      	beq.n	8003974 <_free_r+0x90>
 80038ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ee:	9001      	str	r0, [sp, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f1a1 0404 	sub.w	r4, r1, #4
 80038f6:	bfb8      	it	lt
 80038f8:	18e4      	addlt	r4, r4, r3
 80038fa:	f000 f913 	bl	8003b24 <__malloc_lock>
 80038fe:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <_free_r+0x94>)
 8003900:	9801      	ldr	r0, [sp, #4]
 8003902:	6813      	ldr	r3, [r2, #0]
 8003904:	b933      	cbnz	r3, 8003914 <_free_r+0x30>
 8003906:	6063      	str	r3, [r4, #4]
 8003908:	6014      	str	r4, [r2, #0]
 800390a:	b003      	add	sp, #12
 800390c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003910:	f000 b90e 	b.w	8003b30 <__malloc_unlock>
 8003914:	42a3      	cmp	r3, r4
 8003916:	d908      	bls.n	800392a <_free_r+0x46>
 8003918:	6825      	ldr	r5, [r4, #0]
 800391a:	1961      	adds	r1, r4, r5
 800391c:	428b      	cmp	r3, r1
 800391e:	bf01      	itttt	eq
 8003920:	6819      	ldreq	r1, [r3, #0]
 8003922:	685b      	ldreq	r3, [r3, #4]
 8003924:	1949      	addeq	r1, r1, r5
 8003926:	6021      	streq	r1, [r4, #0]
 8003928:	e7ed      	b.n	8003906 <_free_r+0x22>
 800392a:	461a      	mov	r2, r3
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	b10b      	cbz	r3, 8003934 <_free_r+0x50>
 8003930:	42a3      	cmp	r3, r4
 8003932:	d9fa      	bls.n	800392a <_free_r+0x46>
 8003934:	6811      	ldr	r1, [r2, #0]
 8003936:	1855      	adds	r5, r2, r1
 8003938:	42a5      	cmp	r5, r4
 800393a:	d10b      	bne.n	8003954 <_free_r+0x70>
 800393c:	6824      	ldr	r4, [r4, #0]
 800393e:	4421      	add	r1, r4
 8003940:	1854      	adds	r4, r2, r1
 8003942:	42a3      	cmp	r3, r4
 8003944:	6011      	str	r1, [r2, #0]
 8003946:	d1e0      	bne.n	800390a <_free_r+0x26>
 8003948:	681c      	ldr	r4, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	6053      	str	r3, [r2, #4]
 800394e:	4421      	add	r1, r4
 8003950:	6011      	str	r1, [r2, #0]
 8003952:	e7da      	b.n	800390a <_free_r+0x26>
 8003954:	d902      	bls.n	800395c <_free_r+0x78>
 8003956:	230c      	movs	r3, #12
 8003958:	6003      	str	r3, [r0, #0]
 800395a:	e7d6      	b.n	800390a <_free_r+0x26>
 800395c:	6825      	ldr	r5, [r4, #0]
 800395e:	1961      	adds	r1, r4, r5
 8003960:	428b      	cmp	r3, r1
 8003962:	bf04      	itt	eq
 8003964:	6819      	ldreq	r1, [r3, #0]
 8003966:	685b      	ldreq	r3, [r3, #4]
 8003968:	6063      	str	r3, [r4, #4]
 800396a:	bf04      	itt	eq
 800396c:	1949      	addeq	r1, r1, r5
 800396e:	6021      	streq	r1, [r4, #0]
 8003970:	6054      	str	r4, [r2, #4]
 8003972:	e7ca      	b.n	800390a <_free_r+0x26>
 8003974:	b003      	add	sp, #12
 8003976:	bd30      	pop	{r4, r5, pc}
 8003978:	2000012c 	.word	0x2000012c

0800397c <sbrk_aligned>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	4e0e      	ldr	r6, [pc, #56]	; (80039b8 <sbrk_aligned+0x3c>)
 8003980:	460c      	mov	r4, r1
 8003982:	6831      	ldr	r1, [r6, #0]
 8003984:	4605      	mov	r5, r0
 8003986:	b911      	cbnz	r1, 800398e <sbrk_aligned+0x12>
 8003988:	f000 f8bc 	bl	8003b04 <_sbrk_r>
 800398c:	6030      	str	r0, [r6, #0]
 800398e:	4621      	mov	r1, r4
 8003990:	4628      	mov	r0, r5
 8003992:	f000 f8b7 	bl	8003b04 <_sbrk_r>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	d00a      	beq.n	80039b0 <sbrk_aligned+0x34>
 800399a:	1cc4      	adds	r4, r0, #3
 800399c:	f024 0403 	bic.w	r4, r4, #3
 80039a0:	42a0      	cmp	r0, r4
 80039a2:	d007      	beq.n	80039b4 <sbrk_aligned+0x38>
 80039a4:	1a21      	subs	r1, r4, r0
 80039a6:	4628      	mov	r0, r5
 80039a8:	f000 f8ac 	bl	8003b04 <_sbrk_r>
 80039ac:	3001      	adds	r0, #1
 80039ae:	d101      	bne.n	80039b4 <sbrk_aligned+0x38>
 80039b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80039b4:	4620      	mov	r0, r4
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
 80039b8:	20000130 	.word	0x20000130

080039bc <_malloc_r>:
 80039bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c0:	1ccd      	adds	r5, r1, #3
 80039c2:	f025 0503 	bic.w	r5, r5, #3
 80039c6:	3508      	adds	r5, #8
 80039c8:	2d0c      	cmp	r5, #12
 80039ca:	bf38      	it	cc
 80039cc:	250c      	movcc	r5, #12
 80039ce:	2d00      	cmp	r5, #0
 80039d0:	4607      	mov	r7, r0
 80039d2:	db01      	blt.n	80039d8 <_malloc_r+0x1c>
 80039d4:	42a9      	cmp	r1, r5
 80039d6:	d905      	bls.n	80039e4 <_malloc_r+0x28>
 80039d8:	230c      	movs	r3, #12
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	2600      	movs	r6, #0
 80039de:	4630      	mov	r0, r6
 80039e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039e4:	4e2e      	ldr	r6, [pc, #184]	; (8003aa0 <_malloc_r+0xe4>)
 80039e6:	f000 f89d 	bl	8003b24 <__malloc_lock>
 80039ea:	6833      	ldr	r3, [r6, #0]
 80039ec:	461c      	mov	r4, r3
 80039ee:	bb34      	cbnz	r4, 8003a3e <_malloc_r+0x82>
 80039f0:	4629      	mov	r1, r5
 80039f2:	4638      	mov	r0, r7
 80039f4:	f7ff ffc2 	bl	800397c <sbrk_aligned>
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	4604      	mov	r4, r0
 80039fc:	d14d      	bne.n	8003a9a <_malloc_r+0xde>
 80039fe:	6834      	ldr	r4, [r6, #0]
 8003a00:	4626      	mov	r6, r4
 8003a02:	2e00      	cmp	r6, #0
 8003a04:	d140      	bne.n	8003a88 <_malloc_r+0xcc>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	4631      	mov	r1, r6
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	eb04 0803 	add.w	r8, r4, r3
 8003a10:	f000 f878 	bl	8003b04 <_sbrk_r>
 8003a14:	4580      	cmp	r8, r0
 8003a16:	d13a      	bne.n	8003a8e <_malloc_r+0xd2>
 8003a18:	6821      	ldr	r1, [r4, #0]
 8003a1a:	3503      	adds	r5, #3
 8003a1c:	1a6d      	subs	r5, r5, r1
 8003a1e:	f025 0503 	bic.w	r5, r5, #3
 8003a22:	3508      	adds	r5, #8
 8003a24:	2d0c      	cmp	r5, #12
 8003a26:	bf38      	it	cc
 8003a28:	250c      	movcc	r5, #12
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	4638      	mov	r0, r7
 8003a2e:	f7ff ffa5 	bl	800397c <sbrk_aligned>
 8003a32:	3001      	adds	r0, #1
 8003a34:	d02b      	beq.n	8003a8e <_malloc_r+0xd2>
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	442b      	add	r3, r5
 8003a3a:	6023      	str	r3, [r4, #0]
 8003a3c:	e00e      	b.n	8003a5c <_malloc_r+0xa0>
 8003a3e:	6822      	ldr	r2, [r4, #0]
 8003a40:	1b52      	subs	r2, r2, r5
 8003a42:	d41e      	bmi.n	8003a82 <_malloc_r+0xc6>
 8003a44:	2a0b      	cmp	r2, #11
 8003a46:	d916      	bls.n	8003a76 <_malloc_r+0xba>
 8003a48:	1961      	adds	r1, r4, r5
 8003a4a:	42a3      	cmp	r3, r4
 8003a4c:	6025      	str	r5, [r4, #0]
 8003a4e:	bf18      	it	ne
 8003a50:	6059      	strne	r1, [r3, #4]
 8003a52:	6863      	ldr	r3, [r4, #4]
 8003a54:	bf08      	it	eq
 8003a56:	6031      	streq	r1, [r6, #0]
 8003a58:	5162      	str	r2, [r4, r5]
 8003a5a:	604b      	str	r3, [r1, #4]
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f104 060b 	add.w	r6, r4, #11
 8003a62:	f000 f865 	bl	8003b30 <__malloc_unlock>
 8003a66:	f026 0607 	bic.w	r6, r6, #7
 8003a6a:	1d23      	adds	r3, r4, #4
 8003a6c:	1af2      	subs	r2, r6, r3
 8003a6e:	d0b6      	beq.n	80039de <_malloc_r+0x22>
 8003a70:	1b9b      	subs	r3, r3, r6
 8003a72:	50a3      	str	r3, [r4, r2]
 8003a74:	e7b3      	b.n	80039de <_malloc_r+0x22>
 8003a76:	6862      	ldr	r2, [r4, #4]
 8003a78:	42a3      	cmp	r3, r4
 8003a7a:	bf0c      	ite	eq
 8003a7c:	6032      	streq	r2, [r6, #0]
 8003a7e:	605a      	strne	r2, [r3, #4]
 8003a80:	e7ec      	b.n	8003a5c <_malloc_r+0xa0>
 8003a82:	4623      	mov	r3, r4
 8003a84:	6864      	ldr	r4, [r4, #4]
 8003a86:	e7b2      	b.n	80039ee <_malloc_r+0x32>
 8003a88:	4634      	mov	r4, r6
 8003a8a:	6876      	ldr	r6, [r6, #4]
 8003a8c:	e7b9      	b.n	8003a02 <_malloc_r+0x46>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4638      	mov	r0, r7
 8003a94:	f000 f84c 	bl	8003b30 <__malloc_unlock>
 8003a98:	e7a1      	b.n	80039de <_malloc_r+0x22>
 8003a9a:	6025      	str	r5, [r4, #0]
 8003a9c:	e7de      	b.n	8003a5c <_malloc_r+0xa0>
 8003a9e:	bf00      	nop
 8003aa0:	2000012c 	.word	0x2000012c

08003aa4 <_realloc_r>:
 8003aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa8:	4680      	mov	r8, r0
 8003aaa:	4614      	mov	r4, r2
 8003aac:	460e      	mov	r6, r1
 8003aae:	b921      	cbnz	r1, 8003aba <_realloc_r+0x16>
 8003ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	f7ff bf81 	b.w	80039bc <_malloc_r>
 8003aba:	b92a      	cbnz	r2, 8003ac8 <_realloc_r+0x24>
 8003abc:	f7ff ff12 	bl	80038e4 <_free_r>
 8003ac0:	4625      	mov	r5, r4
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac8:	f000 f838 	bl	8003b3c <_malloc_usable_size_r>
 8003acc:	4284      	cmp	r4, r0
 8003ace:	4607      	mov	r7, r0
 8003ad0:	d802      	bhi.n	8003ad8 <_realloc_r+0x34>
 8003ad2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ad6:	d812      	bhi.n	8003afe <_realloc_r+0x5a>
 8003ad8:	4621      	mov	r1, r4
 8003ada:	4640      	mov	r0, r8
 8003adc:	f7ff ff6e 	bl	80039bc <_malloc_r>
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d0ed      	beq.n	8003ac2 <_realloc_r+0x1e>
 8003ae6:	42bc      	cmp	r4, r7
 8003ae8:	4622      	mov	r2, r4
 8003aea:	4631      	mov	r1, r6
 8003aec:	bf28      	it	cs
 8003aee:	463a      	movcs	r2, r7
 8003af0:	f7ff fed0 	bl	8003894 <memcpy>
 8003af4:	4631      	mov	r1, r6
 8003af6:	4640      	mov	r0, r8
 8003af8:	f7ff fef4 	bl	80038e4 <_free_r>
 8003afc:	e7e1      	b.n	8003ac2 <_realloc_r+0x1e>
 8003afe:	4635      	mov	r5, r6
 8003b00:	e7df      	b.n	8003ac2 <_realloc_r+0x1e>
	...

08003b04 <_sbrk_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4d06      	ldr	r5, [pc, #24]	; (8003b20 <_sbrk_r+0x1c>)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	f7fc fd52 	bl	80005b8 <_sbrk>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_sbrk_r+0x1a>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_sbrk_r+0x1a>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	20000134 	.word	0x20000134

08003b24 <__malloc_lock>:
 8003b24:	4801      	ldr	r0, [pc, #4]	; (8003b2c <__malloc_lock+0x8>)
 8003b26:	f000 b811 	b.w	8003b4c <__retarget_lock_acquire_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	20000138 	.word	0x20000138

08003b30 <__malloc_unlock>:
 8003b30:	4801      	ldr	r0, [pc, #4]	; (8003b38 <__malloc_unlock+0x8>)
 8003b32:	f000 b80c 	b.w	8003b4e <__retarget_lock_release_recursive>
 8003b36:	bf00      	nop
 8003b38:	20000138 	.word	0x20000138

08003b3c <_malloc_usable_size_r>:
 8003b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b40:	1f18      	subs	r0, r3, #4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	bfbc      	itt	lt
 8003b46:	580b      	ldrlt	r3, [r1, r0]
 8003b48:	18c0      	addlt	r0, r0, r3
 8003b4a:	4770      	bx	lr

08003b4c <__retarget_lock_acquire_recursive>:
 8003b4c:	4770      	bx	lr

08003b4e <__retarget_lock_release_recursive>:
 8003b4e:	4770      	bx	lr

08003b50 <_init>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr

08003b5c <_fini>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr
