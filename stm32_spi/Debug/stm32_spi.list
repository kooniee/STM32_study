
stm32_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002750  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800293c  0800293c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000004  08002940  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000084  20000010  0800294c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000094  0800294c  00020094  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b571  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c0c  00000000  00000000  0002b5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001088  00000000  00000000  0002d1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000fc0  00000000  00000000  0002e248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001fdc0  00000000  00000000  0002f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b970  00000000  00000000  0004efc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cde6b  00000000  00000000  0005a938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001287a3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000043e4  00000000  00000000  001287f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08002874 	.word	0x08002874

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08002874 	.word	0x08002874

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ae:	b580      	push	{r7, lr}
 80001b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b2:	f000 fa15 	bl	80005e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b6:	f000 f807 	bl	80001c8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001ba:	f000 f86d 	bl	8000298 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001be:	f000 f8c7 	bl	8000350 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001c2:	f000 f887 	bl	80002d4 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c6:	e7fe      	b.n	80001c6 <main+0x18>

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b09a      	sub	sp, #104	; 0x68
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0320 	add.w	r3, r7, #32
 80001d2:	2248      	movs	r2, #72	; 0x48
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 fb44 	bl	8002864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]
 80001ea:	615a      	str	r2, [r3, #20]
 80001ec:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001ee:	4b29      	ldr	r3, [pc, #164]	; (8000294 <SystemClock_Config+0xcc>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80001f6:	4a27      	ldr	r2, [pc, #156]	; (8000294 <SystemClock_Config+0xcc>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
 80001fe:	4b25      	ldr	r3, [pc, #148]	; (8000294 <SystemClock_Config+0xcc>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800020a:	2322      	movs	r3, #34	; 0x22
 800020c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000212:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000214:	2301      	movs	r3, #1
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000218:	2340      	movs	r3, #64	; 0x40
 800021a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800021c:	2300      	movs	r3, #0
 800021e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000220:	2360      	movs	r3, #96	; 0x60
 8000222:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000228:	2301      	movs	r3, #1
 800022a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000230:	2319      	movs	r3, #25
 8000232:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000238:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 800023a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800023e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000244:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f107 0320 	add.w	r3, r7, #32
 800024a:	4618      	mov	r0, r3
 800024c:	f001 f836 	bl	80012bc <HAL_RCC_OscConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000256:	f000 f8a0 	bl	800039a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800025a:	236f      	movs	r3, #111	; 0x6f
 800025c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025e:	2303      	movs	r3, #3
 8000260:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800026e:	2380      	movs	r3, #128	; 0x80
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2101      	movs	r1, #1
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fb92 	bl	80019a4 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000286:	f000 f888 	bl	800039a <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3768      	adds	r7, #104	; 0x68
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	58000400 	.word	0x58000400

08000298 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b094      	sub	sp, #80	; 0x50
 800029c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800029e:	463b      	mov	r3, r7
 80002a0:	2250      	movs	r2, #80	; 0x50
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fadd 	bl	8002864 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ae:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002b0:	2300      	movs	r3, #0
 80002b2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 ff83 	bl	80021c6 <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80002c6:	f000 f868 	bl	800039a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80002ca:	bf00      	nop
 80002cc:	3750      	adds	r7, #80	; 0x50
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <MX_SPI1_Init+0x74>)
 80002da:	4a1c      	ldr	r2, [pc, #112]	; (800034c <MX_SPI1_Init+0x78>)
 80002dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <MX_SPI1_Init+0x74>)
 80002e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_SPI1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <MX_SPI1_Init+0x74>)
 80002ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002f4:	4b14      	ldr	r3, [pc, #80]	; (8000348 <MX_SPI1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <MX_SPI1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_SPI1_Init+0x74>)
 8000302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000306:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_SPI1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <MX_SPI1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <MX_SPI1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <MX_SPI1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <MX_SPI1_Init+0x74>)
 8000322:	2207      	movs	r2, #7
 8000324:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <MX_SPI1_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <MX_SPI1_Init+0x74>)
 800032e:	2208      	movs	r2, #8
 8000330:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000332:	4805      	ldr	r0, [pc, #20]	; (8000348 <MX_SPI1_Init+0x74>)
 8000334:	f002 f9ce 	bl	80026d4 <HAL_SPI_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800033e:	f000 f82c 	bl	800039a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	2000002c 	.word	0x2000002c
 800034c:	40013000 	.word	0x40013000

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	2001      	movs	r0, #1
 8000366:	f7ff ff09 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2101      	movs	r1, #1
 800036e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000372:	f000 fc0f 	bl	8000b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000376:	2301      	movs	r3, #1
 8000378:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
 800037c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4619      	mov	r1, r3
 800038a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038e:	f000 fa91 	bl	80008b4 <HAL_GPIO_Init>

}
 8000392:	bf00      	nop
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039e:	b672      	cpsid	i
}
 80003a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <Error_Handler+0x8>

080003a4 <LL_AHB2_GRP1_EnableClock>:
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4013      	ands	r3, r2
 80003c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003c8:	68fb      	ldr	r3, [r7, #12]
}
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b085      	sub	sp, #20
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4013      	ands	r3, r2
 80003f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003fa:	68fb      	ldr	r3, [r7, #12]
}
 80003fc:	bf00      	nop
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
	...

08000418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000420:	f107 030c 	add.w	r3, r7, #12
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <HAL_SPI_MspInit+0x5c>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d117      	bne.n	800046a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800043a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800043e:	f7ff ffca 	bl	80003d6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	2001      	movs	r0, #1
 8000444:	f7ff ffae 	bl	80003a4 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000448:	23c2      	movs	r3, #194	; 0xc2
 800044a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044c:	2302      	movs	r3, #2
 800044e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000458:	2305      	movs	r3, #5
 800045a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	f107 030c 	add.w	r3, r7, #12
 8000460:	4619      	mov	r1, r3
 8000462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000466:	f000 fa25 	bl	80008b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800046a:	bf00      	nop
 800046c:	3720      	adds	r7, #32
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40013000 	.word	0x40013000

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800047c:	e7fe      	b.n	800047c <NMI_Handler+0x4>

0800047e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <HardFault_Handler+0x4>

08000484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <MemManage_Handler+0x4>

0800048a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800048e:	e7fe      	b.n	800048e <BusFault_Handler+0x4>

08000490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <UsageFault_Handler+0x4>

08000496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c4:	f000 f8e6 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80004d0:	4b24      	ldr	r3, [pc, #144]	; (8000564 <SystemInit+0x98>)
 80004d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004d6:	4a23      	ldr	r2, [pc, #140]	; (8000564 <SystemInit+0x98>)
 80004d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80004f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80004f8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80004fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <SystemInit+0x9c>)
 8000506:	4013      	ands	r3, r2
 8000508:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800050a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800050e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000516:	f023 0305 	bic.w	r3, r3, #5
 800051a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800051e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800052a:	f023 0301 	bic.w	r3, r3, #1
 800052e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000536:	4a0d      	ldr	r2, [pc, #52]	; (800056c <SystemInit+0xa0>)
 8000538:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800053a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053e:	4a0b      	ldr	r2, [pc, #44]	; (800056c <SystemInit+0xa0>)
 8000540:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800054c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000550:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000ed00 	.word	0xe000ed00
 8000568:	faf6fefb 	.word	0xfaf6fefb
 800056c:	22041000 	.word	0x22041000

08000570 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000570:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000572:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000574:	3304      	adds	r3, #4

08000576 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000576:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000578:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800057a:	d3f9      	bcc.n	8000570 <CopyDataInit>
  bx lr
 800057c:	4770      	bx	lr

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800057e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000580:	3004      	adds	r0, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000582:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>
  bx lr
 8000586:	4770      	bx	lr

08000588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000588:	480c      	ldr	r0, [pc, #48]	; (80005bc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800058a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800058c:	f7ff ff9e 	bl	80004cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <LoopForever+0x8>)
 8000592:	490c      	ldr	r1, [pc, #48]	; (80005c4 <LoopForever+0xc>)
 8000594:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <LoopForever+0x10>)
 8000596:	2300      	movs	r3, #0
 8000598:	f7ff ffed 	bl	8000576 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <LoopForever+0x14>)
 800059e:	490c      	ldr	r1, [pc, #48]	; (80005d0 <LoopForever+0x18>)
 80005a0:	2300      	movs	r3, #0
 80005a2:	f7ff ffee 	bl	8000582 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <LoopForever+0x1c>)
 80005a8:	490b      	ldr	r1, [pc, #44]	; (80005d8 <LoopForever+0x20>)
 80005aa:	2300      	movs	r3, #0
 80005ac:	f7ff ffe9 	bl	8000582 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b0:	f002 f934 	bl	800281c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80005b4:	f7ff fdfb 	bl	80001ae <main>

080005b8 <LoopForever>:

LoopForever:
  b LoopForever
 80005b8:	e7fe      	b.n	80005b8 <LoopForever>
 80005ba:	0000      	.short	0x0000
  ldr   r0, =_estack
 80005bc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000010 	.word	0x20000010
 80005c8:	08002940 	.word	0x08002940
  INIT_BSS _sbss, _ebss
 80005cc:	20000010 	.word	0x20000010
 80005d0:	20000094 	.word	0x20000094
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80005d4:	20030000 	.word	0x20030000
 80005d8:	20030000 	.word	0x20030000

080005dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_IRQHandler>
	...

080005e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005e6:	2300      	movs	r3, #0
 80005e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_Init+0x3c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <HAL_Init+0x3c>)
 80005f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f6:	2003      	movs	r0, #3
 80005f8:	f000 f92a 	bl	8000850 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f80f 	bl	8000620 <HAL_InitTick>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d002      	beq.n	800060e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000608:	2301      	movs	r3, #1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	e001      	b.n	8000612 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800060e:	f7ff fefb 	bl	8000408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000612:	79fb      	ldrb	r3, [r7, #7]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	58004000 	.word	0x58004000

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_InitTick+0x6c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d024      	beq.n	800067e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000634:	f001 fb62 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8000638:	4602      	mov	r2, r0
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <HAL_InitTick+0x6c>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000644:	fbb3 f3f1 	udiv	r3, r3, r1
 8000648:	fbb2 f3f3 	udiv	r3, r2, r3
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f924 	bl	800089a <HAL_SYSTICK_Config>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10f      	bne.n	8000678 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b0f      	cmp	r3, #15
 800065c:	d809      	bhi.n	8000672 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065e:	2200      	movs	r2, #0
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000666:	f000 f8fe 	bl	8000866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800066a:	4a09      	ldr	r2, [pc, #36]	; (8000690 <HAL_InitTick+0x70>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	e007      	b.n	8000682 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e004      	b.n	8000682 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000678:	2301      	movs	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
 800067c:	e001      	b.n	8000682 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000682:	7bfb      	ldrb	r3, [r7, #15]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000000c 	.word	0x2000000c
 8000690:	20000008 	.word	0x20000008

08000694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_IncTick+0x20>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x24>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <HAL_IncTick+0x24>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	2000000c 	.word	0x2000000c
 80006b8:	20000090 	.word	0x20000090

080006bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <HAL_GetTick+0x14>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000090 	.word	0x20000090

080006d4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <HAL_GetTickPrio+0x14>)
 80006da:	681b      	ldr	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000008 	.word	0x20000008

080006ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	; 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800081c:	d301      	bcc.n	8000822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081e:	2301      	movs	r3, #1
 8000820:	e00f      	b.n	8000842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <SysTick_Config+0x40>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082a:	210f      	movs	r1, #15
 800082c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000830:	f7ff ff8e 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <SysTick_Config+0x40>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <SysTick_Config+0x40>)
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff47 	bl	80006ec <__NVIC_SetPriorityGrouping>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff5e 	bl	8000734 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff90 	bl	80007a4 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5f 	bl	8000750 <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ffb2 	bl	800080c <SysTick_Config>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c2:	e14c      	b.n	8000b5e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	2101      	movs	r1, #1
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	fa01 f303 	lsl.w	r3, r1, r3
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f000 813e 	beq.w	8000b58 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d005      	beq.n	80008f4 <HAL_GPIO_Init+0x40>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 0303 	and.w	r3, r3, #3
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d130      	bne.n	8000956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	2203      	movs	r2, #3
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4313      	orrs	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800092a:	2201      	movs	r2, #1
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	091b      	lsrs	r3, r3, #4
 8000940:	f003 0201 	and.w	r2, r3, #1
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4313      	orrs	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f003 0303 	and.w	r3, r3, #3
 800095e:	2b03      	cmp	r3, #3
 8000960:	d017      	beq.n	8000992 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	2203      	movs	r2, #3
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	2b02      	cmp	r3, #2
 800099c:	d123      	bne.n	80009e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	08da      	lsrs	r2, r3, #3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3208      	adds	r2, #8
 80009a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	220f      	movs	r2, #15
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	691a      	ldr	r2, [r3, #16]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	08da      	lsrs	r2, r3, #3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3208      	adds	r2, #8
 80009e0:	6939      	ldr	r1, [r7, #16]
 80009e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 0203 	and.w	r2, r3, #3
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f000 8098 	beq.w	8000b58 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a28:	4a54      	ldr	r2, [pc, #336]	; (8000b7c <HAL_GPIO_Init+0x2c8>)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	089b      	lsrs	r3, r3, #2
 8000a2e:	3302      	adds	r3, #2
 8000a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	220f      	movs	r2, #15
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a52:	d019      	beq.n	8000a88 <HAL_GPIO_Init+0x1d4>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a4a      	ldr	r2, [pc, #296]	; (8000b80 <HAL_GPIO_Init+0x2cc>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d013      	beq.n	8000a84 <HAL_GPIO_Init+0x1d0>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a49      	ldr	r2, [pc, #292]	; (8000b84 <HAL_GPIO_Init+0x2d0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d00d      	beq.n	8000a80 <HAL_GPIO_Init+0x1cc>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a48      	ldr	r2, [pc, #288]	; (8000b88 <HAL_GPIO_Init+0x2d4>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d007      	beq.n	8000a7c <HAL_GPIO_Init+0x1c8>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a47      	ldr	r2, [pc, #284]	; (8000b8c <HAL_GPIO_Init+0x2d8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d101      	bne.n	8000a78 <HAL_GPIO_Init+0x1c4>
 8000a74:	2304      	movs	r3, #4
 8000a76:	e008      	b.n	8000a8a <HAL_GPIO_Init+0x1d6>
 8000a78:	2307      	movs	r3, #7
 8000a7a:	e006      	b.n	8000a8a <HAL_GPIO_Init+0x1d6>
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e004      	b.n	8000a8a <HAL_GPIO_Init+0x1d6>
 8000a80:	2302      	movs	r3, #2
 8000a82:	e002      	b.n	8000a8a <HAL_GPIO_Init+0x1d6>
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <HAL_GPIO_Init+0x1d6>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	f002 0203 	and.w	r2, r2, #3
 8000a90:	0092      	lsls	r2, r2, #2
 8000a92:	4093      	lsls	r3, r2
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a9a:	4938      	ldr	r1, [pc, #224]	; (8000b7c <HAL_GPIO_Init+0x2c8>)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <HAL_GPIO_Init+0x2dc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000acc:	4a30      	ldr	r2, [pc, #192]	; (8000b90 <HAL_GPIO_Init+0x2dc>)
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <HAL_GPIO_Init+0x2dc>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000af6:	4a26      	ldr	r2, [pc, #152]	; (8000b90 <HAL_GPIO_Init+0x2dc>)
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <HAL_GPIO_Init+0x2dc>)
 8000afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b22:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <HAL_GPIO_Init+0x2dc>)
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_GPIO_Init+0x2dc>)
 8000b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_GPIO_Init+0x2dc>)
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fa22 f303 	lsr.w	r3, r2, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f47f aeab 	bne.w	80008c4 <HAL_GPIO_Init+0x10>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	371c      	adds	r7, #28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40010000 	.word	0x40010000
 8000b80:	48000400 	.word	0x48000400
 8000b84:	48000800 	.word	0x48000800
 8000b88:	48000c00 	.word	0x48000c00
 8000b8c:	48001000 	.word	0x48001000
 8000b90:	58000800 	.word	0x58000800

08000b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	807b      	strh	r3, [r7, #2]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ba4:	787b      	ldrb	r3, [r7, #1]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bb0:	e002      	b.n	8000bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	58000400 	.word	0x58000400

08000be4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <HAL_PWREx_GetVoltageRange+0x18>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	58000400 	.word	0x58000400

08000c00 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000c12:	d101      	bne.n	8000c18 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e000      	b.n	8000c1a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c54:	6013      	str	r3, [r2, #0]
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c72:	d101      	bne.n	8000c78 <LL_RCC_HSE_IsReady+0x18>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <LL_RCC_HSE_IsReady+0x1a>
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cb4:	6013      	str	r3, [r2, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd2:	d101      	bne.n	8000cd8 <LL_RCC_HSI_IsReady+0x18>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e000      	b.n	8000cda <LL_RCC_HSI_IsReady+0x1a>
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	061b      	lsls	r3, r3, #24
 8000cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	604b      	str	r3, [r1, #4]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d40:	f023 0301 	bic.w	r3, r3, #1
 8000d44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d101      	bne.n	8000d6a <LL_RCC_HSI48_IsReady+0x18>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <LL_RCC_HSI48_IsReady+0x1a>
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000da8:	f023 0301 	bic.w	r3, r3, #1
 8000dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dec:	f023 0304 	bic.w	r3, r3, #4
 8000df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d101      	bne.n	8000e16 <LL_RCC_LSE_IsReady+0x18>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <LL_RCC_LSE_IsReady+0x1a>
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e54:	f023 0301 	bic.w	r3, r3, #1
 8000e58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d101      	bne.n	8000e7e <LL_RCC_LSI1_IsReady+0x18>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <LL_RCC_LSI1_IsReady+0x1a>
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ebc:	f023 0304 	bic.w	r3, r3, #4
 8000ec0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8000ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d101      	bne.n	8000ee6 <LL_RCC_LSI2_IsReady+0x18>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <LL_RCC_LSI2_IsReady+0x1a>
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	6013      	str	r3, [r2, #0]
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d101      	bne.n	8000f72 <LL_RCC_MSI_IsReady+0x16>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <LL_RCC_MSI_IsReady+0x18>
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fb6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2bb0      	cmp	r3, #176	; 0xb0
 8000fbc:	d901      	bls.n	8000fc2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000fbe:	23b0      	movs	r3, #176	; 0xb0
 8000fc0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000fc2:	687b      	ldr	r3, [r7, #4]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fea:	4313      	orrs	r3, r2
 8000fec:	604b      	str	r3, [r1, #4]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f023 0203 	bic.w	r2, r3, #3
 800100c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4313      	orrs	r3, r2
 8001014:	608b      	str	r3, [r1, #8]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 030c 	and.w	r3, r3, #12
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800104c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	608b      	str	r3, [r1, #8]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800106a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800109e:	f023 020f 	bic.w	r2, r3, #15
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010aa:	4313      	orrs	r3, r2
 80010ac:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80010c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	608b      	str	r3, [r1, #8]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80010ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	608b      	str	r3, [r1, #8]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800114e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800116c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001170:	6013      	str	r3, [r2, #0]
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800118e:	d101      	bne.n	8001194 <LL_RCC_PLL_IsReady+0x18>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <LL_RCC_PLL_IsReady+0x1a>
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80011be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80011d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80011ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0303 	and.w	r3, r3, #3
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001214:	d101      	bne.n	800121a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800122a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800123a:	d101      	bne.n	8001240 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001254:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001260:	d101      	bne.n	8001266 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001284:	d101      	bne.n	800128a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012a8:	d101      	bne.n	80012ae <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b08d      	sub	sp, #52	; 0x34
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e363      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 808d 	beq.w	80013f6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012dc:	f7ff fea1 	bl	8001022 <LL_RCC_GetSysClkSource>
 80012e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e2:	f7ff ff82 	bl	80011ea <LL_RCC_PLL_GetMainSource>
 80012e6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80012e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x3e>
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	d147      	bne.n	8001384 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d144      	bne.n	8001384 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e347      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800130a:	f7ff fe4c 	bl	8000fa6 <LL_RCC_MSI_GetRange>
 800130e:	4603      	mov	r3, r0
 8001310:	429c      	cmp	r4, r3
 8001312:	d914      	bls.n	800133e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fd03 	bl	8001d24 <RCC_SetFlashLatencyFromMSIRange>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e336      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe26 	bl	8000f7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe4a 	bl	8000fd0 <LL_RCC_MSI_SetCalibTrimming>
 800133c:	e013      	b.n	8001366 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fe1b 	bl	8000f7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe3f 	bl	8000fd0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fce4 	bl	8001d24 <RCC_SetFlashLatencyFromMSIRange>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e317      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001366:	f000 fcc9 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 800136a:	4603      	mov	r3, r0
 800136c:	4aa4      	ldr	r2, [pc, #656]	; (8001600 <HAL_RCC_OscConfig+0x344>)
 800136e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001370:	4ba4      	ldr	r3, [pc, #656]	; (8001604 <HAL_RCC_OscConfig+0x348>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f953 	bl	8000620 <HAL_InitTick>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d039      	beq.n	80013f4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e308      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d01e      	beq.n	80013ca <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800138c:	f7ff fdc8 	bl	8000f20 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001390:	f7ff f994 	bl	80006bc <HAL_GetTick>
 8001394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001398:	f7ff f990 	bl	80006bc <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e2f5      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80013aa:	f7ff fdd7 	bl	8000f5c <LL_RCC_MSI_IsReady>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f1      	beq.n	8001398 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fde0 	bl	8000f7e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fe04 	bl	8000fd0 <LL_RCC_MSI_SetCalibTrimming>
 80013c8:	e015      	b.n	80013f6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ca:	f7ff fdb8 	bl	8000f3e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ce:	f7ff f975 	bl	80006bc <HAL_GetTick>
 80013d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d6:	f7ff f971 	bl	80006bc <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e2d6      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80013e8:	f7ff fdb8 	bl	8000f5c <LL_RCC_MSI_IsReady>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f1      	bne.n	80013d6 <HAL_RCC_OscConfig+0x11a>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80013f4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d047      	beq.n	8001492 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001402:	f7ff fe0e 	bl	8001022 <LL_RCC_GetSysClkSource>
 8001406:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001408:	f7ff feef 	bl	80011ea <LL_RCC_PLL_GetMainSource>
 800140c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	2b08      	cmp	r3, #8
 8001412:	d005      	beq.n	8001420 <HAL_RCC_OscConfig+0x164>
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	2b0c      	cmp	r3, #12
 8001418:	d108      	bne.n	800142c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d105      	bne.n	800142c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d134      	bne.n	8001492 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e2b4      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d102      	bne.n	800143c <HAL_RCC_OscConfig+0x180>
 8001436:	f7ff fbf5 	bl	8000c24 <LL_RCC_HSE_Enable>
 800143a:	e001      	b.n	8001440 <HAL_RCC_OscConfig+0x184>
 800143c:	f7ff fc01 	bl	8000c42 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d012      	beq.n	800146e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff f938 	bl	80006bc <HAL_GetTick>
 800144c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff f934 	bl	80006bc <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e299      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001462:	f7ff fbfd 	bl	8000c60 <LL_RCC_HSE_IsReady>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f1      	beq.n	8001450 <HAL_RCC_OscConfig+0x194>
 800146c:	e011      	b.n	8001492 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff f925 	bl	80006bc <HAL_GetTick>
 8001472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001476:	f7ff f921 	bl	80006bc <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b64      	cmp	r3, #100	; 0x64
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e286      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001488:	f7ff fbea 	bl	8000c60 <LL_RCC_HSE_IsReady>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f1      	bne.n	8001476 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d04c      	beq.n	8001538 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149e:	f7ff fdc0 	bl	8001022 <LL_RCC_GetSysClkSource>
 80014a2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a4:	f7ff fea1 	bl	80011ea <LL_RCC_PLL_GetMainSource>
 80014a8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x200>
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	d10e      	bne.n	80014d4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d10b      	bne.n	80014d4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e266      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fc09 	bl	8000ce4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80014d2:	e031      	b.n	8001538 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d019      	beq.n	8001510 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014dc:	f7ff fbd2 	bl	8000c84 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff f8ec 	bl	80006bc <HAL_GetTick>
 80014e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff f8e8 	bl	80006bc <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e24d      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80014fa:	f7ff fbe1 	bl	8000cc0 <LL_RCC_HSI_IsReady>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f1      	beq.n	80014e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fbeb 	bl	8000ce4 <LL_RCC_HSI_SetCalibTrimming>
 800150e:	e013      	b.n	8001538 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001510:	f7ff fbc7 	bl	8000ca2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff f8d2 	bl	80006bc <HAL_GetTick>
 8001518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff f8ce 	bl	80006bc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e233      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800152e:	f7ff fbc7 	bl	8000cc0 <LL_RCC_HSI_IsReady>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f1      	bne.n	800151c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	2b00      	cmp	r3, #0
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a3 	beq.w	8001698 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d076      	beq.n	8001648 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	d046      	beq.n	80015f4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001566:	f7ff fc7e 	bl	8000e66 <LL_RCC_LSI1_IsReady>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d113      	bne.n	8001598 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001570:	f7ff fc57 	bl	8000e22 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001574:	f7ff f8a2 	bl	80006bc <HAL_GetTick>
 8001578:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800157c:	f7ff f89e 	bl	80006bc <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e203      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800158e:	f7ff fc6a 	bl	8000e66 <LL_RCC_LSI1_IsReady>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f1      	beq.n	800157c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001598:	f7ff fc77 	bl	8000e8a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff f88e 	bl	80006bc <HAL_GetTick>
 80015a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80015a4:	f7ff f88a 	bl	80006bc <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1ef      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80015b6:	f7ff fc8a 	bl	8000ece <LL_RCC_LSI2_IsReady>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f1      	beq.n	80015a4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fc94 	bl	8000ef2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80015ca:	f7ff fc3b 	bl	8000e44 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff f875 	bl	80006bc <HAL_GetTick>
 80015d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80015d6:	f7ff f871 	bl	80006bc <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1d6      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80015e8:	f7ff fc3d 	bl	8000e66 <LL_RCC_LSI1_IsReady>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f1      	bne.n	80015d6 <HAL_RCC_OscConfig+0x31a>
 80015f2:	e051      	b.n	8001698 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80015f4:	f7ff fc15 	bl	8000e22 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff f860 	bl	80006bc <HAL_GetTick>
 80015fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80015fe:	e00c      	b.n	800161a <HAL_RCC_OscConfig+0x35e>
 8001600:	20000004 	.word	0x20000004
 8001604:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001608:	f7ff f858 	bl	80006bc <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1bd      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800161a:	f7ff fc24 	bl	8000e66 <LL_RCC_LSI1_IsReady>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f1      	beq.n	8001608 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001624:	f7ff fc42 	bl	8000eac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800162a:	f7ff f847 	bl	80006bc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b03      	cmp	r3, #3
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1ac      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800163c:	f7ff fc47 	bl	8000ece <LL_RCC_LSI2_IsReady>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f1      	bne.n	800162a <HAL_RCC_OscConfig+0x36e>
 8001646:	e027      	b.n	8001698 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001648:	f7ff fc30 	bl	8000eac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff f836 	bl	80006bc <HAL_GetTick>
 8001650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001654:	f7ff f832 	bl	80006bc <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b03      	cmp	r3, #3
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e197      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001666:	f7ff fc32 	bl	8000ece <LL_RCC_LSI2_IsReady>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f1      	bne.n	8001654 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001670:	f7ff fbe8 	bl	8000e44 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff f822 	bl	80006bc <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800167c:	f7ff f81e 	bl	80006bc <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e183      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800168e:	f7ff fbea 	bl	8000e66 <LL_RCC_LSI1_IsReady>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f1      	bne.n	800167c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d05b      	beq.n	800175c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a4:	4ba7      	ldr	r3, [pc, #668]	; (8001944 <HAL_RCC_OscConfig+0x688>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d114      	bne.n	80016da <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80016b0:	f7ff fa88 	bl	8000bc4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b4:	f7ff f802 	bl	80006bc <HAL_GetTick>
 80016b8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016bc:	f7fe fffe 	bl	80006bc <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e163      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ce:	4b9d      	ldr	r3, [pc, #628]	; (8001944 <HAL_RCC_OscConfig+0x688>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d102      	bne.n	80016e8 <HAL_RCC_OscConfig+0x42c>
 80016e2:	f7ff fb48 	bl	8000d76 <LL_RCC_LSE_Enable>
 80016e6:	e00c      	b.n	8001702 <HAL_RCC_OscConfig+0x446>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d104      	bne.n	80016fa <HAL_RCC_OscConfig+0x43e>
 80016f0:	f7ff fb63 	bl	8000dba <LL_RCC_LSE_EnableBypass>
 80016f4:	f7ff fb3f 	bl	8000d76 <LL_RCC_LSE_Enable>
 80016f8:	e003      	b.n	8001702 <HAL_RCC_OscConfig+0x446>
 80016fa:	f7ff fb4d 	bl	8000d98 <LL_RCC_LSE_Disable>
 80016fe:	f7ff fb6d 	bl	8000ddc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d014      	beq.n	8001734 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7fe ffd7 	bl	80006bc <HAL_GetTick>
 800170e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7fe ffd3 	bl	80006bc <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e136      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001728:	f7ff fb69 	bl	8000dfe <LL_RCC_LSE_IsReady>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0ef      	beq.n	8001712 <HAL_RCC_OscConfig+0x456>
 8001732:	e013      	b.n	800175c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7fe ffc2 	bl	80006bc <HAL_GetTick>
 8001738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7fe ffbe 	bl	80006bc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e121      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001752:	f7ff fb54 	bl	8000dfe <LL_RCC_LSE_IsReady>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1ef      	bne.n	800173c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001764:	2b00      	cmp	r3, #0
 8001766:	d02c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	2b00      	cmp	r3, #0
 800176e:	d014      	beq.n	800179a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001770:	f7ff facd 	bl	8000d0e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7fe ffa2 	bl	80006bc <HAL_GetTick>
 8001778:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800177c:	f7fe ff9e 	bl	80006bc <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e103      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800178e:	f7ff fae0 	bl	8000d52 <LL_RCC_HSI48_IsReady>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f1      	beq.n	800177c <HAL_RCC_OscConfig+0x4c0>
 8001798:	e013      	b.n	80017c2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800179a:	f7ff fac9 	bl	8000d30 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179e:	f7fe ff8d 	bl	80006bc <HAL_GetTick>
 80017a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017a6:	f7fe ff89 	bl	80006bc <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0ee      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80017b8:	f7ff facb 	bl	8000d52 <LL_RCC_HSI48_IsReady>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f1      	bne.n	80017a6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80e4 	beq.w	8001994 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017cc:	f7ff fc29 	bl	8001022 <LL_RCC_GetSysClkSource>
 80017d0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80017d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017de:	2b02      	cmp	r3, #2
 80017e0:	f040 80b4 	bne.w	800194c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0203 	and.w	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d123      	bne.n	800183a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d11c      	bne.n	800183a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d114      	bne.n	800183a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d10d      	bne.n	800183a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d05d      	beq.n	80018f6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	2b0c      	cmp	r3, #12
 800183e:	d058      	beq.n	80018f2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0a1      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001852:	f7ff fc84 	bl	800115e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001856:	f7fe ff31 	bl	80006bc <HAL_GetTick>
 800185a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7fe ff2d 	bl	80006bc <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e092      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ef      	bne.n	800185e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <HAL_RCC_OscConfig+0x68c>)
 8001886:	4013      	ands	r3, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001890:	4311      	orrs	r1, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001896:	0212      	lsls	r2, r2, #8
 8001898:	4311      	orrs	r1, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018a4:	4311      	orrs	r1, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018aa:	430a      	orrs	r2, r1
 80018ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018b4:	f7ff fc44 	bl	8001140 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018c8:	f7fe fef8 	bl	80006bc <HAL_GetTick>
 80018cc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7fe fef4 	bl	80006bc <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e059      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ef      	beq.n	80018d0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f0:	e050      	b.n	8001994 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e04f      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d147      	bne.n	8001994 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001904:	f7ff fc1c 	bl	8001140 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001916:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001918:	f7fe fed0 	bl	80006bc <HAL_GetTick>
 800191c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7fe fecc 	bl	80006bc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e031      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0ef      	beq.n	8001920 <HAL_RCC_OscConfig+0x664>
 8001940:	e028      	b.n	8001994 <HAL_RCC_OscConfig+0x6d8>
 8001942:	bf00      	nop
 8001944:	58000400 	.word	0x58000400
 8001948:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d01e      	beq.n	8001990 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	f7ff fc04 	bl	800115e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7fe feb1 	bl	80006bc <HAL_GetTick>
 800195a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195e:	f7fe fead 	bl	80006bc <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e012      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ef      	bne.n	800195e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_OscConfig+0x6e4>)
 800198a:	4013      	ands	r3, r2
 800198c:	60cb      	str	r3, [r1, #12]
 800198e:	e001      	b.n	8001994 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3734      	adds	r7, #52	; 0x34
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop
 80019a0:	eefefffc 	.word	0xeefefffc

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e12d      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b98      	ldr	r3, [pc, #608]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d91b      	bls.n	80019fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b95      	ldr	r3, [pc, #596]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 0207 	bic.w	r2, r3, #7
 80019ce:	4993      	ldr	r1, [pc, #588]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019d6:	f7fe fe71 	bl	80006bc <HAL_GetTick>
 80019da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80019de:	f7fe fe6d 	bl	80006bc <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e111      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f0:	4b8a      	ldr	r3, [pc, #552]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d1ef      	bne.n	80019de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d016      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fb13 	bl	800103a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a14:	f7fe fe52 	bl	80006bc <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a1c:	f7fe fe4e 	bl	80006bc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e0f2      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001a2e:	f7ff fbe8 	bl	8001202 <LL_RCC_IsActiveFlag_HPRE>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f1      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d016      	beq.n	8001a72 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fb0a 	bl	8001062 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a4e:	f7fe fe35 	bl	80006bc <HAL_GetTick>
 8001a52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a56:	f7fe fe31 	bl	80006bc <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0d5      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001a68:	f7ff fbdd 	bl	8001226 <LL_RCC_IsActiveFlag_C2HPRE>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f1      	beq.n	8001a56 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d016      	beq.n	8001aac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fb03 	bl	800108e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a88:	f7fe fe18 	bl	80006bc <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a90:	f7fe fe14 	bl	80006bc <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0b8      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001aa2:	f7ff fbd3 	bl	800124c <LL_RCC_IsActiveFlag_SHDHPRE>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f1      	beq.n	8001a90 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d016      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fafd 	bl	80010bc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ac2:	f7fe fdfb 	bl	80006bc <HAL_GetTick>
 8001ac6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001aca:	f7fe fdf7 	bl	80006bc <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e09b      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001adc:	f7ff fbc9 	bl	8001272 <LL_RCC_IsActiveFlag_PPRE1>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f1      	beq.n	8001aca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d017      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff faf3 	bl	80010e4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001afe:	f7fe fddd 	bl	80006bc <HAL_GetTick>
 8001b02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b06:	f7fe fdd9 	bl	80006bc <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e07d      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001b18:	f7ff fbbd 	bl	8001296 <LL_RCC_IsActiveFlag_PPRE2>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f1      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d043      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001b36:	f7ff f893 	bl	8000c60 <LL_RCC_HSE_IsReady>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11e      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e067      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001b4c:	f7ff fb16 	bl	800117c <LL_RCC_PLL_IsReady>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d113      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e05c      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001b62:	f7ff f9fb 	bl	8000f5c <LL_RCC_MSI_IsReady>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d108      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e051      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001b70:	f7ff f8a6 	bl	8000cc0 <LL_RCC_HSI_IsReady>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e04a      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fa39 	bl	8000ffa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b88:	f7fe fd98 	bl	80006bc <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7fe fd94 	bl	80006bc <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e036      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	f7ff fa3c 	bl	8001022 <LL_RCC_GetSysClkSource>
 8001baa:	4602      	mov	r2, r0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d1ec      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb6:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d21b      	bcs.n	8001bfc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 0207 	bic.w	r2, r3, #7
 8001bcc:	4913      	ldr	r1, [pc, #76]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd4:	f7fe fd72 	bl	80006bc <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001bdc:	f7fe fd6e 	bl	80006bc <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e012      	b.n	8001c14 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_ClockConfig+0x278>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1ef      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001bfc:	f000 f87e 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_RCC_ClockConfig+0x27c>)
 8001c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001c06:	f7fe fd65 	bl	80006d4 <HAL_GetTickPrio>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fd07 	bl	8000620 <HAL_InitTick>
 8001c12:	4603      	mov	r3, r0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	58004000 	.word	0x58004000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2a:	f7ff f9fa 	bl	8001022 <LL_RCC_GetSysClkSource>
 8001c2e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10a      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001c36:	f7ff f9b6 	bl	8000fa6 <LL_RCC_MSI_GetRange>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e04b      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d102      	bne.n	8001c58 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c52:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e045      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d10a      	bne.n	8001c74 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c5e:	f7fe ffcf 	bl	8000c00 <LL_RCC_HSE_IsEnabledDiv2>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e03a      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	e037      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001c74:	f7ff fab9 	bl	80011ea <LL_RCC_PLL_GetMainSource>
 8001c78:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d003      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x64>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d003      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x6a>
 8001c86:	e00d      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c8a:	60bb      	str	r3, [r7, #8]
        break;
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c8e:	f7fe ffb7 	bl	8000c00 <LL_RCC_HSE_IsEnabledDiv2>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d102      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c9a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c9c:	e00d      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ca0:	60bb      	str	r3, [r7, #8]
        break;
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001ca4:	f7ff f97f 	bl	8000fa6 <LL_RCC_MSI_GetRange>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	60bb      	str	r3, [r7, #8]
        break;
 8001cb8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001cba:	f7ff fa71 	bl	80011a0 <LL_RCC_PLL_GetN>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	fb03 f402 	mul.w	r4, r3, r2
 8001cc6:	f7ff fa84 	bl	80011d2 <LL_RCC_PLL_GetDivider>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	3301      	adds	r3, #1
 8001cd0:	fbb4 f4f3 	udiv	r4, r4, r3
 8001cd4:	f7ff fa71 	bl	80011ba <LL_RCC_PLL_GetR>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	0f5b      	lsrs	r3, r3, #29
 8001cdc:	3301      	adds	r3, #1
 8001cde:	fbb4 f3f3 	udiv	r3, r4, r3
 8001ce2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	080028f8 	.word	0x080028f8
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	01e84800 	.word	0x01e84800

08001cfc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001d00:	f7ff ff90 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001d04:	4604      	mov	r4, r0
 8001d06:	f7ff fa01 	bl	800110c <LL_RCC_GetAHBPrescaler>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_RCC_GetHCLKFreq+0x24>)
 8001d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d18:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd98      	pop	{r3, r4, r7, pc}
 8001d20:	080028b8 	.word	0x080028b8

08001d24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2bb0      	cmp	r3, #176	; 0xb0
 8001d30:	d903      	bls.n	8001d3a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e007      	b.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001d4a:	f7ff f9eb 	bl	8001124 <LL_RCC_GetAHB4Prescaler>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	0c9c      	lsrs	r4, r3, #18
 8001d6e:	f7fe ff39 	bl	8000be4 <HAL_PWREx_GetVoltageRange>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4619      	mov	r1, r3
 8001d76:	4620      	mov	r0, r4
 8001d78:	f000 f80c 	bl	8001d94 <RCC_SetFlashLatency>
 8001d7c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd90      	pop	{r4, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	080028f8 	.word	0x080028f8
 8001d8c:	080028b8 	.word	0x080028b8
 8001d90:	431bde83 	.word	0x431bde83

08001d94 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b093      	sub	sp, #76	; 0x4c
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <RCC_SetFlashLatency+0xe8>)
 8001da0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001daa:	4a35      	ldr	r2, [pc, #212]	; (8001e80 <RCC_SetFlashLatency+0xec>)
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001db2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001db6:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <RCC_SetFlashLatency+0xf0>)
 8001db8:	f107 040c 	add.w	r4, r7, #12
 8001dbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dcc:	d11a      	bne.n	8001e04 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8001dd2:	e013      	b.n	8001dfc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	3348      	adds	r3, #72	; 0x48
 8001dda:	443b      	add	r3, r7
 8001ddc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d807      	bhi.n	8001df6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	3348      	adds	r3, #72	; 0x48
 8001dec:	443b      	add	r3, r7
 8001dee:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001df4:	e020      	b.n	8001e38 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001df8:	3301      	adds	r3, #1
 8001dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8001dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d9e8      	bls.n	8001dd4 <RCC_SetFlashLatency+0x40>
 8001e02:	e019      	b.n	8001e38 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e08:	e013      	b.n	8001e32 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	3348      	adds	r3, #72	; 0x48
 8001e10:	443b      	add	r3, r7
 8001e12:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d807      	bhi.n	8001e2c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	3348      	adds	r3, #72	; 0x48
 8001e22:	443b      	add	r3, r7
 8001e24:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001e2a:	e005      	b.n	8001e38 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e2e:	3301      	adds	r3, #1
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d9e8      	bls.n	8001e0a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <RCC_SetFlashLatency+0xf4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 0207 	bic.w	r2, r3, #7
 8001e40:	4911      	ldr	r1, [pc, #68]	; (8001e88 <RCC_SetFlashLatency+0xf4>)
 8001e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001e48:	f7fe fc38 	bl	80006bc <HAL_GetTick>
 8001e4c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e4e:	e008      	b.n	8001e62 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e50:	f7fe fc34 	bl	80006bc <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e007      	b.n	8001e72 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <RCC_SetFlashLatency+0xf4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1ef      	bne.n	8001e50 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	374c      	adds	r7, #76	; 0x4c
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd90      	pop	{r4, r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	0800288c 	.word	0x0800288c
 8001e80:	0800289c 	.word	0x0800289c
 8001e84:	080028a8 	.word	0x080028a8
 8001e88:	58004000 	.word	0x58004000

08001e8c <LL_RCC_LSE_IsEnabled>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <LL_RCC_LSE_IsEnabled+0x18>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <LL_RCC_LSE_IsEnabled+0x1a>
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_RCC_LSE_IsReady>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d101      	bne.n	8001ec8 <LL_RCC_LSE_IsReady+0x18>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_RCC_LSE_IsReady+0x1a>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_RCC_SetRFWKPClockSource>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_SetSMPSClockSource>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	f023 0203 	bic.w	r2, r3, #3
 8001f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_RCC_SetSMPSPrescaler>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_RCC_SetUSARTClockSource>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f60:	f023 0203 	bic.w	r2, r3, #3
 8001f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_RCC_SetLPUARTClockSource>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_RCC_SetI2CClockSource>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <LL_RCC_SetLPTIMClockSource>:
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_RCC_SetSAIClockSource>:
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800202a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_RCC_SetRNGClockSource>:
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_RCC_SetCLK48ClockSource>:
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_RCC_SetUSBClockSource>:
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffe3 	bl	800206e <LL_RCC_SetCLK48ClockSource>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <LL_RCC_SetADCClockSource>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_RCC_SetRTCClockSource>:
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80020e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_RCC_GetRTCClockSource>:
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_RCC_ForceBackupDomainReset>:
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_RCC_PLLSAI1_Enable>:
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002174:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002178:	6013      	str	r3, [r2, #0]
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_RCC_PLLSAI1_Disable>:
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002192:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_RCC_PLLSAI1_IsReady>:
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b4:	d101      	bne.n	80021ba <LL_RCC_PLLSAI1_IsReady+0x18>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b088      	sub	sp, #32
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80021ce:	2300      	movs	r3, #0
 80021d0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80021d2:	2300      	movs	r3, #0
 80021d4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d034      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021ea:	d021      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80021ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021f0:	d81b      	bhi.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021f6:	d01d      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80021f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021fc:	d815      	bhi.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002206:	d110      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002218:	e00d      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3304      	adds	r3, #4
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f947 	bl	80024b2 <RCCEx_PLLSAI1_ConfigNP>
 8002224:	4603      	mov	r3, r0
 8002226:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002228:	e005      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	77fb      	strb	r3, [r7, #31]
        break;
 800222e:	e002      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002230:	bf00      	nop
 8002232:	e000      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002236:	7ffb      	ldrb	r3, [r7, #31]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fee8 	bl	8002016 <LL_RCC_SetSAIClockSource>
 8002246:	e001      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002248:	7ffb      	ldrb	r3, [r7, #31]
 800224a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002254:	2b00      	cmp	r3, #0
 8002256:	d046      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002258:	f7ff ff56 	bl	8002108 <LL_RCC_GetRTCClockSource>
 800225c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	429a      	cmp	r2, r3
 8002266:	d03c      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002268:	f7fe fcac 	bl	8000bc4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff30 	bl	80020dc <LL_RCC_SetRTCClockSource>
 800227c:	e02e      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002288:	f7ff ff4b 	bl	8002122 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800228c:	f7ff ff5a 	bl	8002144 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800229e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80022a8:	f7ff fdf0 	bl	8001e8c <LL_RCC_LSE_IsEnabled>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d114      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022b2:	f7fe fa03 	bl	80006bc <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80022b8:	e00b      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe f9ff 	bl	80006bc <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d902      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	77fb      	strb	r3, [r7, #31]
              break;
 80022d0:	e004      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80022d2:	f7ff fded 	bl	8001eb0 <LL_RCC_LSE_IsReady>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d1ee      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80022dc:	7ffb      	ldrb	r3, [r7, #31]
 80022de:	77bb      	strb	r3, [r7, #30]
 80022e0:	e001      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d004      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fe2a 	bl	8001f50 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fe35 	bl	8001f7c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe5d 	bl	8001fe2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fe52 	bl	8001fe2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fe2a 	bl	8001fa8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fe1f 	bl	8001fa8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d022      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fe8d 	bl	800209a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002388:	d107      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002394:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002398:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023a2:	d10b      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3304      	adds	r3, #4
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f8dd 	bl	8002568 <RCCEx_PLLSAI1_ConfigNQ>
 80023ae:	4603      	mov	r3, r0
 80023b0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80023b2:	7ffb      	ldrb	r3, [r7, #31]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80023b8:	7ffb      	ldrb	r3, [r7, #31]
 80023ba:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d02b      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d0:	d008      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023da:	d003      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fe2a 	bl	8002042 <LL_RCC_SetRNGClockSource>
 80023ee:	e00a      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7ff fe21 	bl	8002042 <LL_RCC_SetRNGClockSource>
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f7ff fe34 	bl	800206e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800240e:	d107      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800241a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d022      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fe3d 	bl	80020b0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800243e:	d107      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002458:	d10b      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3304      	adds	r3, #4
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f8dd 	bl	800261e <RCCEx_PLLSAI1_ConfigNR>
 8002464:	4603      	mov	r3, r0
 8002466:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002468:	7ffb      	ldrb	r3, [r7, #31]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800246e:	7ffb      	ldrb	r3, [r7, #31]
 8002470:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fd26 	bl	8001ed4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d009      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fd45 	bl	8001f28 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fd2c 	bl	8001f00 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80024a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80024be:	f7ff fe61 	bl	8002184 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80024c2:	f7fe f8fb 	bl	80006bc <HAL_GetTick>
 80024c6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80024c8:	e009      	b.n	80024de <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ca:	f7fe f8f7 	bl	80006bc <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d902      	bls.n	80024de <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	e004      	b.n	80024e8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80024de:	f7ff fe60 	bl	80021a2 <LL_RCC_PLLSAI1_IsReady>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d137      	bne.n	800255e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002502:	4313      	orrs	r3, r2
 8002504:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002518:	4313      	orrs	r3, r2
 800251a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800251c:	f7ff fe23 	bl	8002166 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002520:	f7fe f8cc 	bl	80006bc <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002526:	e009      	b.n	800253c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002528:	f7fe f8c8 	bl	80006bc <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d902      	bls.n	800253c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	73fb      	strb	r3, [r7, #15]
        break;
 800253a:	e004      	b.n	8002546 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800253c:	f7ff fe31 	bl	80021a2 <LL_RCC_PLLSAI1_IsReady>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d1f0      	bne.n	8002528 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d108      	bne.n	800255e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800254c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800255a:	4313      	orrs	r3, r2
 800255c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002574:	f7ff fe06 	bl	8002184 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002578:	f7fe f8a0 	bl	80006bc <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800257e:	e009      	b.n	8002594 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002580:	f7fe f89c 	bl	80006bc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d902      	bls.n	8002594 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	73fb      	strb	r3, [r7, #15]
      break;
 8002592:	e004      	b.n	800259e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002594:	f7ff fe05 	bl	80021a2 <LL_RCC_PLLSAI1_IsReady>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d137      	bne.n	8002614 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80025a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025b8:	4313      	orrs	r3, r2
 80025ba:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80025bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ce:	4313      	orrs	r3, r2
 80025d0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80025d2:	f7ff fdc8 	bl	8002166 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d6:	f7fe f871 	bl	80006bc <HAL_GetTick>
 80025da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80025dc:	e009      	b.n	80025f2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025de:	f7fe f86d 	bl	80006bc <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d902      	bls.n	80025f2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	73fb      	strb	r3, [r7, #15]
        break;
 80025f0:	e004      	b.n	80025fc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80025f2:	f7ff fdd6 	bl	80021a2 <LL_RCC_PLLSAI1_IsReady>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d1f0      	bne.n	80025de <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d108      	bne.n	8002614 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002610:	4313      	orrs	r3, r2
 8002612:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800262a:	f7ff fdab 	bl	8002184 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800262e:	f7fe f845 	bl	80006bc <HAL_GetTick>
 8002632:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002634:	e009      	b.n	800264a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002636:	f7fe f841 	bl	80006bc <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d902      	bls.n	800264a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e004      	b.n	8002654 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800264a:	f7ff fdaa 	bl	80021a2 <LL_RCC_PLLSAI1_IsReady>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d137      	bne.n	80026ca <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800265a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800266e:	4313      	orrs	r3, r2
 8002670:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002684:	4313      	orrs	r3, r2
 8002686:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002688:	f7ff fd6d 	bl	8002166 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268c:	f7fe f816 	bl	80006bc <HAL_GetTick>
 8002690:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002692:	e009      	b.n	80026a8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002694:	f7fe f812 	bl	80006bc <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d902      	bls.n	80026a8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	73fb      	strb	r3, [r7, #15]
        break;
 80026a6:	e004      	b.n	80026b2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80026a8:	f7ff fd7b 	bl	80021a2 <LL_RCC_PLLSAI1_IsReady>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d1f0      	bne.n	8002694 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d108      	bne.n	80026ca <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80026b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c6:	4313      	orrs	r3, r2
 80026c8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e095      	b.n	8002812 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d108      	bne.n	8002700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026f6:	d009      	beq.n	800270c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
 80026fe:	e005      	b.n	800270c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fd fe76 	bl	8000418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002742:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800274c:	d902      	bls.n	8002754 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	e002      	b.n	800275a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002758:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002762:	d007      	beq.n	8002774 <HAL_SPI_Init+0xa0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800276c:	d002      	beq.n	8002774 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b6:	ea42 0103 	orr.w	r1, r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	0c1b      	lsrs	r3, r3, #16
 80027d0:	f003 0204 	and.w	r2, r3, #4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80027f0:	ea42 0103 	orr.w	r1, r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <__libc_init_array>:
 800281c:	b570      	push	{r4, r5, r6, lr}
 800281e:	4d0d      	ldr	r5, [pc, #52]	; (8002854 <__libc_init_array+0x38>)
 8002820:	4c0d      	ldr	r4, [pc, #52]	; (8002858 <__libc_init_array+0x3c>)
 8002822:	1b64      	subs	r4, r4, r5
 8002824:	10a4      	asrs	r4, r4, #2
 8002826:	2600      	movs	r6, #0
 8002828:	42a6      	cmp	r6, r4
 800282a:	d109      	bne.n	8002840 <__libc_init_array+0x24>
 800282c:	4d0b      	ldr	r5, [pc, #44]	; (800285c <__libc_init_array+0x40>)
 800282e:	4c0c      	ldr	r4, [pc, #48]	; (8002860 <__libc_init_array+0x44>)
 8002830:	f000 f820 	bl	8002874 <_init>
 8002834:	1b64      	subs	r4, r4, r5
 8002836:	10a4      	asrs	r4, r4, #2
 8002838:	2600      	movs	r6, #0
 800283a:	42a6      	cmp	r6, r4
 800283c:	d105      	bne.n	800284a <__libc_init_array+0x2e>
 800283e:	bd70      	pop	{r4, r5, r6, pc}
 8002840:	f855 3b04 	ldr.w	r3, [r5], #4
 8002844:	4798      	blx	r3
 8002846:	3601      	adds	r6, #1
 8002848:	e7ee      	b.n	8002828 <__libc_init_array+0xc>
 800284a:	f855 3b04 	ldr.w	r3, [r5], #4
 800284e:	4798      	blx	r3
 8002850:	3601      	adds	r6, #1
 8002852:	e7f2      	b.n	800283a <__libc_init_array+0x1e>
 8002854:	08002938 	.word	0x08002938
 8002858:	08002938 	.word	0x08002938
 800285c:	08002938 	.word	0x08002938
 8002860:	0800293c 	.word	0x0800293c

08002864 <memset>:
 8002864:	4402      	add	r2, r0
 8002866:	4603      	mov	r3, r0
 8002868:	4293      	cmp	r3, r2
 800286a:	d100      	bne.n	800286e <memset+0xa>
 800286c:	4770      	bx	lr
 800286e:	f803 1b01 	strb.w	r1, [r3], #1
 8002872:	e7f9      	b.n	8002868 <memset+0x4>

08002874 <_init>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	bf00      	nop
 8002878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287a:	bc08      	pop	{r3}
 800287c:	469e      	mov	lr, r3
 800287e:	4770      	bx	lr

08002880 <_fini>:
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002882:	bf00      	nop
 8002884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002886:	bc08      	pop	{r3}
 8002888:	469e      	mov	lr, r3
 800288a:	4770      	bx	lr
